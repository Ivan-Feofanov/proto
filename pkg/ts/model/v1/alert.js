"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: model/v1/alert.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.APIAlert_APIAlertAgent = exports.APIAlert = exports.Finding_IndicatorsEntry = exports.Finding_MetadataEntry = exports.Finding = exports.Source_CustomSource = exports.Source_AlertSource = exports.Source_ChainSource = exports.Source_URLSource = exports.Source_BlockSource = exports.Source_TransactionSource = exports.Source = exports.Label = exports.SignedAlert = exports.Alert_TagsEntry = exports.Alert_MetadataEntry = exports.Alert = exports.BloomFilter = exports.Signature = exports.AlertResponse = exports.ScannerInfo = exports.AgentInfo = exports.TrackingTimestamps = exports.finding_FindingTypeToJSON = exports.finding_FindingTypeFromJSON = exports.Finding_FindingType = exports.finding_SeverityToJSON = exports.finding_SeverityFromJSON = exports.Finding_Severity = exports.label_EntityTypeToJSON = exports.label_EntityTypeFromJSON = exports.Label_EntityType = exports.alertTypeToJSON = exports.alertTypeFromJSON = exports.AlertType = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const Long = require("long");
exports.protobufPackage = "model.v1";
var AlertType;
(function (AlertType) {
    AlertType[AlertType["UNKNOWN_ALERT_TYPE"] = 0] = "UNKNOWN_ALERT_TYPE";
    AlertType[AlertType["TRANSACTION"] = 1] = "TRANSACTION";
    AlertType[AlertType["BLOCK"] = 2] = "BLOCK";
    AlertType[AlertType["PRIVATE"] = 3] = "PRIVATE";
    AlertType[AlertType["COMBINATION"] = 4] = "COMBINATION";
    AlertType[AlertType["API"] = 5] = "API";
    AlertType[AlertType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AlertType || (exports.AlertType = AlertType = {}));
function alertTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN_ALERT_TYPE":
            return AlertType.UNKNOWN_ALERT_TYPE;
        case 1:
        case "TRANSACTION":
            return AlertType.TRANSACTION;
        case 2:
        case "BLOCK":
            return AlertType.BLOCK;
        case 3:
        case "PRIVATE":
            return AlertType.PRIVATE;
        case 4:
        case "COMBINATION":
            return AlertType.COMBINATION;
        case 5:
        case "API":
            return AlertType.API;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AlertType.UNRECOGNIZED;
    }
}
exports.alertTypeFromJSON = alertTypeFromJSON;
function alertTypeToJSON(object) {
    switch (object) {
        case AlertType.UNKNOWN_ALERT_TYPE:
            return "UNKNOWN_ALERT_TYPE";
        case AlertType.TRANSACTION:
            return "TRANSACTION";
        case AlertType.BLOCK:
            return "BLOCK";
        case AlertType.PRIVATE:
            return "PRIVATE";
        case AlertType.COMBINATION:
            return "COMBINATION";
        case AlertType.API:
            return "API";
        case AlertType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.alertTypeToJSON = alertTypeToJSON;
var Label_EntityType;
(function (Label_EntityType) {
    Label_EntityType[Label_EntityType["UNKNOWN_ENTITY_TYPE"] = 0] = "UNKNOWN_ENTITY_TYPE";
    Label_EntityType[Label_EntityType["ADDRESS"] = 1] = "ADDRESS";
    Label_EntityType[Label_EntityType["TRANSACTION"] = 2] = "TRANSACTION";
    Label_EntityType[Label_EntityType["BLOCK"] = 3] = "BLOCK";
    Label_EntityType[Label_EntityType["URL"] = 4] = "URL";
    Label_EntityType[Label_EntityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Label_EntityType || (exports.Label_EntityType = Label_EntityType = {}));
function label_EntityTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN_ENTITY_TYPE":
            return Label_EntityType.UNKNOWN_ENTITY_TYPE;
        case 1:
        case "ADDRESS":
            return Label_EntityType.ADDRESS;
        case 2:
        case "TRANSACTION":
            return Label_EntityType.TRANSACTION;
        case 3:
        case "BLOCK":
            return Label_EntityType.BLOCK;
        case 4:
        case "URL":
            return Label_EntityType.URL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Label_EntityType.UNRECOGNIZED;
    }
}
exports.label_EntityTypeFromJSON = label_EntityTypeFromJSON;
function label_EntityTypeToJSON(object) {
    switch (object) {
        case Label_EntityType.UNKNOWN_ENTITY_TYPE:
            return "UNKNOWN_ENTITY_TYPE";
        case Label_EntityType.ADDRESS:
            return "ADDRESS";
        case Label_EntityType.TRANSACTION:
            return "TRANSACTION";
        case Label_EntityType.BLOCK:
            return "BLOCK";
        case Label_EntityType.URL:
            return "URL";
        case Label_EntityType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.label_EntityTypeToJSON = label_EntityTypeToJSON;
var Finding_Severity;
(function (Finding_Severity) {
    Finding_Severity[Finding_Severity["UNKNOWN"] = 0] = "UNKNOWN";
    Finding_Severity[Finding_Severity["INFO"] = 1] = "INFO";
    Finding_Severity[Finding_Severity["LOW"] = 2] = "LOW";
    Finding_Severity[Finding_Severity["MEDIUM"] = 3] = "MEDIUM";
    Finding_Severity[Finding_Severity["HIGH"] = 4] = "HIGH";
    Finding_Severity[Finding_Severity["CRITICAL"] = 5] = "CRITICAL";
    Finding_Severity[Finding_Severity["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Finding_Severity || (exports.Finding_Severity = Finding_Severity = {}));
function finding_SeverityFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN":
            return Finding_Severity.UNKNOWN;
        case 1:
        case "INFO":
            return Finding_Severity.INFO;
        case 2:
        case "LOW":
            return Finding_Severity.LOW;
        case 3:
        case "MEDIUM":
            return Finding_Severity.MEDIUM;
        case 4:
        case "HIGH":
            return Finding_Severity.HIGH;
        case 5:
        case "CRITICAL":
            return Finding_Severity.CRITICAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Finding_Severity.UNRECOGNIZED;
    }
}
exports.finding_SeverityFromJSON = finding_SeverityFromJSON;
function finding_SeverityToJSON(object) {
    switch (object) {
        case Finding_Severity.UNKNOWN:
            return "UNKNOWN";
        case Finding_Severity.INFO:
            return "INFO";
        case Finding_Severity.LOW:
            return "LOW";
        case Finding_Severity.MEDIUM:
            return "MEDIUM";
        case Finding_Severity.HIGH:
            return "HIGH";
        case Finding_Severity.CRITICAL:
            return "CRITICAL";
        case Finding_Severity.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.finding_SeverityToJSON = finding_SeverityToJSON;
var Finding_FindingType;
(function (Finding_FindingType) {
    Finding_FindingType[Finding_FindingType["UNKNOWN_TYPE"] = 0] = "UNKNOWN_TYPE";
    Finding_FindingType[Finding_FindingType["EXPLOIT"] = 1] = "EXPLOIT";
    Finding_FindingType[Finding_FindingType["SUSPICIOUS"] = 2] = "SUSPICIOUS";
    Finding_FindingType[Finding_FindingType["DEGRADED"] = 3] = "DEGRADED";
    Finding_FindingType[Finding_FindingType["INFORMATION"] = 4] = "INFORMATION";
    Finding_FindingType[Finding_FindingType["SCAM"] = 5] = "SCAM";
    Finding_FindingType[Finding_FindingType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Finding_FindingType || (exports.Finding_FindingType = Finding_FindingType = {}));
function finding_FindingTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN_TYPE":
            return Finding_FindingType.UNKNOWN_TYPE;
        case 1:
        case "EXPLOIT":
            return Finding_FindingType.EXPLOIT;
        case 2:
        case "SUSPICIOUS":
            return Finding_FindingType.SUSPICIOUS;
        case 3:
        case "DEGRADED":
            return Finding_FindingType.DEGRADED;
        case 4:
        case "INFORMATION":
            return Finding_FindingType.INFORMATION;
        case 5:
        case "SCAM":
            return Finding_FindingType.SCAM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Finding_FindingType.UNRECOGNIZED;
    }
}
exports.finding_FindingTypeFromJSON = finding_FindingTypeFromJSON;
function finding_FindingTypeToJSON(object) {
    switch (object) {
        case Finding_FindingType.UNKNOWN_TYPE:
            return "UNKNOWN_TYPE";
        case Finding_FindingType.EXPLOIT:
            return "EXPLOIT";
        case Finding_FindingType.SUSPICIOUS:
            return "SUSPICIOUS";
        case Finding_FindingType.DEGRADED:
            return "DEGRADED";
        case Finding_FindingType.INFORMATION:
            return "INFORMATION";
        case Finding_FindingType.SCAM:
            return "SCAM";
        case Finding_FindingType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.finding_FindingTypeToJSON = finding_FindingTypeToJSON;
function createBaseTrackingTimestamps() {
    return { block: "", feed: "", botRequest: "", botResponse: "", sourceAlert: "" };
}
exports.TrackingTimestamps = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.block !== "") {
            writer.uint32(10).string(message.block);
        }
        if (message.feed !== "") {
            writer.uint32(18).string(message.feed);
        }
        if (message.botRequest !== "") {
            writer.uint32(26).string(message.botRequest);
        }
        if (message.botResponse !== "") {
            writer.uint32(34).string(message.botResponse);
        }
        if (message.sourceAlert !== "") {
            writer.uint32(42).string(message.sourceAlert);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTrackingTimestamps();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.block = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.feed = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.botRequest = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.botResponse = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.sourceAlert = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            block: isSet(object.block) ? globalThis.String(object.block) : "",
            feed: isSet(object.feed) ? globalThis.String(object.feed) : "",
            botRequest: isSet(object.botRequest) ? globalThis.String(object.botRequest) : "",
            botResponse: isSet(object.botResponse) ? globalThis.String(object.botResponse) : "",
            sourceAlert: isSet(object.sourceAlert) ? globalThis.String(object.sourceAlert) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.block !== "") {
            obj.block = message.block;
        }
        if (message.feed !== "") {
            obj.feed = message.feed;
        }
        if (message.botRequest !== "") {
            obj.botRequest = message.botRequest;
        }
        if (message.botResponse !== "") {
            obj.botResponse = message.botResponse;
        }
        if (message.sourceAlert !== "") {
            obj.sourceAlert = message.sourceAlert;
        }
        return obj;
    },
    create(base) {
        return exports.TrackingTimestamps.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseTrackingTimestamps();
        message.block = (_a = object.block) !== null && _a !== void 0 ? _a : "";
        message.feed = (_b = object.feed) !== null && _b !== void 0 ? _b : "";
        message.botRequest = (_c = object.botRequest) !== null && _c !== void 0 ? _c : "";
        message.botResponse = (_d = object.botResponse) !== null && _d !== void 0 ? _d : "";
        message.sourceAlert = (_e = object.sourceAlert) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseAgentInfo() {
    return { image: "", imageHash: "", id: "", isTest: false, manifest: "" };
}
exports.AgentInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.image !== "") {
            writer.uint32(10).string(message.image);
        }
        if (message.imageHash !== "") {
            writer.uint32(18).string(message.imageHash);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.isTest !== false) {
            writer.uint32(32).bool(message.isTest);
        }
        if (message.manifest !== "") {
            writer.uint32(42).string(message.manifest);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAgentInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.image = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.imageHash = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.isTest = reader.bool();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.manifest = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            image: isSet(object.image) ? globalThis.String(object.image) : "",
            imageHash: isSet(object.imageHash) ? globalThis.String(object.imageHash) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            isTest: isSet(object.isTest) ? globalThis.Boolean(object.isTest) : false,
            manifest: isSet(object.manifest) ? globalThis.String(object.manifest) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.image !== "") {
            obj.image = message.image;
        }
        if (message.imageHash !== "") {
            obj.imageHash = message.imageHash;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.isTest !== false) {
            obj.isTest = message.isTest;
        }
        if (message.manifest !== "") {
            obj.manifest = message.manifest;
        }
        return obj;
    },
    create(base) {
        return exports.AgentInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseAgentInfo();
        message.image = (_a = object.image) !== null && _a !== void 0 ? _a : "";
        message.imageHash = (_b = object.imageHash) !== null && _b !== void 0 ? _b : "";
        message.id = (_c = object.id) !== null && _c !== void 0 ? _c : "";
        message.isTest = (_d = object.isTest) !== null && _d !== void 0 ? _d : false;
        message.manifest = (_e = object.manifest) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseScannerInfo() {
    return { address: "" };
}
exports.ScannerInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScannerInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        return obj;
    },
    create(base) {
        return exports.ScannerInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseScannerInfo();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAlertResponse() {
    return { alerts: [], nextPageToken: "" };
}
exports.AlertResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.alerts) {
            exports.SignedAlert.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.nextPageToken !== "") {
            writer.uint32(18).string(message.nextPageToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alerts.push(exports.SignedAlert.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.nextPageToken = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alerts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.alerts) ? object.alerts.map((e) => exports.SignedAlert.fromJSON(e)) : [],
            nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.alerts) === null || _a === void 0 ? void 0 : _a.length) {
            obj.alerts = message.alerts.map((e) => exports.SignedAlert.toJSON(e));
        }
        if (message.nextPageToken !== "") {
            obj.nextPageToken = message.nextPageToken;
        }
        return obj;
    },
    create(base) {
        return exports.AlertResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAlertResponse();
        message.alerts = ((_a = object.alerts) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SignedAlert.fromPartial(e))) || [];
        message.nextPageToken = (_b = object.nextPageToken) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSignature() {
    return { signature: "", algorithm: "", signer: "" };
}
exports.Signature = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.signature !== "") {
            writer.uint32(10).string(message.signature);
        }
        if (message.algorithm !== "") {
            writer.uint32(18).string(message.algorithm);
        }
        if (message.signer !== "") {
            writer.uint32(26).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignature();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.signature = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.algorithm = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
            algorithm: isSet(object.algorithm) ? globalThis.String(object.algorithm) : "",
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signature !== "") {
            obj.signature = message.signature;
        }
        if (message.algorithm !== "") {
            obj.algorithm = message.algorithm;
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return exports.Signature.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSignature();
        message.signature = (_a = object.signature) !== null && _a !== void 0 ? _a : "";
        message.algorithm = (_b = object.algorithm) !== null && _b !== void 0 ? _b : "";
        message.signer = (_c = object.signer) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseBloomFilter() {
    return { k: "", m: "", bitset: "", itemCount: 0 };
}
exports.BloomFilter = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.k !== "") {
            writer.uint32(10).string(message.k);
        }
        if (message.m !== "") {
            writer.uint32(18).string(message.m);
        }
        if (message.bitset !== "") {
            writer.uint32(26).string(message.bitset);
        }
        if (message.itemCount !== 0) {
            writer.uint32(32).uint32(message.itemCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBloomFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.k = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.m = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.bitset = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.itemCount = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            k: isSet(object.k) ? globalThis.String(object.k) : "",
            m: isSet(object.m) ? globalThis.String(object.m) : "",
            bitset: isSet(object.bitset) ? globalThis.String(object.bitset) : "",
            itemCount: isSet(object.itemCount) ? globalThis.Number(object.itemCount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.k !== "") {
            obj.k = message.k;
        }
        if (message.m !== "") {
            obj.m = message.m;
        }
        if (message.bitset !== "") {
            obj.bitset = message.bitset;
        }
        if (message.itemCount !== 0) {
            obj.itemCount = Math.round(message.itemCount);
        }
        return obj;
    },
    create(base) {
        return exports.BloomFilter.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseBloomFilter();
        message.k = (_a = object.k) !== null && _a !== void 0 ? _a : "";
        message.m = (_b = object.m) !== null && _b !== void 0 ? _b : "";
        message.bitset = (_c = object.bitset) !== null && _c !== void 0 ? _c : "";
        message.itemCount = (_d = object.itemCount) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseAlert() {
    return {
        id: "",
        type: 0,
        finding: undefined,
        timestamp: "",
        metadata: {},
        agent: undefined,
        tags: {},
        scanner: undefined,
        timestamps: undefined,
        truncated: false,
        addressBloomFilter: undefined,
    };
}
exports.Alert = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        if (message.finding !== undefined) {
            exports.Finding.encode(message.finding, writer.uint32(26).fork()).ldelim();
        }
        if (message.timestamp !== "") {
            writer.uint32(34).string(message.timestamp);
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.Alert_MetadataEntry.encode({ key: key, value }, writer.uint32(42).fork()).ldelim();
        });
        if (message.agent !== undefined) {
            exports.AgentInfo.encode(message.agent, writer.uint32(50).fork()).ldelim();
        }
        Object.entries(message.tags).forEach(([key, value]) => {
            exports.Alert_TagsEntry.encode({ key: key, value }, writer.uint32(58).fork()).ldelim();
        });
        if (message.scanner !== undefined) {
            exports.ScannerInfo.encode(message.scanner, writer.uint32(66).fork()).ldelim();
        }
        if (message.timestamps !== undefined) {
            exports.TrackingTimestamps.encode(message.timestamps, writer.uint32(74).fork()).ldelim();
        }
        if (message.truncated !== false) {
            writer.uint32(80).bool(message.truncated);
        }
        if (message.addressBloomFilter !== undefined) {
            exports.BloomFilter.encode(message.addressBloomFilter, writer.uint32(90).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlert();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.finding = exports.Finding.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.timestamp = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    const entry5 = exports.Alert_MetadataEntry.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.metadata[entry5.key] = entry5.value;
                    }
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.agent = exports.AgentInfo.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    const entry7 = exports.Alert_TagsEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.tags[entry7.key] = entry7.value;
                    }
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.scanner = exports.ScannerInfo.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.timestamps = exports.TrackingTimestamps.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.truncated = reader.bool();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.addressBloomFilter = exports.BloomFilter.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            type: isSet(object.type) ? alertTypeFromJSON(object.type) : 0,
            finding: isSet(object.finding) ? exports.Finding.fromJSON(object.finding) : undefined,
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            agent: isSet(object.agent) ? exports.AgentInfo.fromJSON(object.agent) : undefined,
            tags: isObject(object.tags)
                ? Object.entries(object.tags).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            scanner: isSet(object.scanner) ? exports.ScannerInfo.fromJSON(object.scanner) : undefined,
            timestamps: isSet(object.timestamps) ? exports.TrackingTimestamps.fromJSON(object.timestamps) : undefined,
            truncated: isSet(object.truncated) ? globalThis.Boolean(object.truncated) : false,
            addressBloomFilter: isSet(object.addressBloomFilter)
                ? exports.BloomFilter.fromJSON(object.addressBloomFilter)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.type !== 0) {
            obj.type = alertTypeToJSON(message.type);
        }
        if (message.finding !== undefined) {
            obj.finding = exports.Finding.toJSON(message.finding);
        }
        if (message.timestamp !== "") {
            obj.timestamp = message.timestamp;
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        if (message.agent !== undefined) {
            obj.agent = exports.AgentInfo.toJSON(message.agent);
        }
        if (message.tags) {
            const entries = Object.entries(message.tags);
            if (entries.length > 0) {
                obj.tags = {};
                entries.forEach(([k, v]) => {
                    obj.tags[k] = v;
                });
            }
        }
        if (message.scanner !== undefined) {
            obj.scanner = exports.ScannerInfo.toJSON(message.scanner);
        }
        if (message.timestamps !== undefined) {
            obj.timestamps = exports.TrackingTimestamps.toJSON(message.timestamps);
        }
        if (message.truncated !== false) {
            obj.truncated = message.truncated;
        }
        if (message.addressBloomFilter !== undefined) {
            obj.addressBloomFilter = exports.BloomFilter.toJSON(message.addressBloomFilter);
        }
        return obj;
    },
    create(base) {
        return exports.Alert.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseAlert();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : 0;
        message.finding = (object.finding !== undefined && object.finding !== null)
            ? exports.Finding.fromPartial(object.finding)
            : undefined;
        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : "";
        message.metadata = Object.entries((_d = object.metadata) !== null && _d !== void 0 ? _d : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.agent = (object.agent !== undefined && object.agent !== null)
            ? exports.AgentInfo.fromPartial(object.agent)
            : undefined;
        message.tags = Object.entries((_e = object.tags) !== null && _e !== void 0 ? _e : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.scanner = (object.scanner !== undefined && object.scanner !== null)
            ? exports.ScannerInfo.fromPartial(object.scanner)
            : undefined;
        message.timestamps = (object.timestamps !== undefined && object.timestamps !== null)
            ? exports.TrackingTimestamps.fromPartial(object.timestamps)
            : undefined;
        message.truncated = (_f = object.truncated) !== null && _f !== void 0 ? _f : false;
        message.addressBloomFilter = (object.addressBloomFilter !== undefined && object.addressBloomFilter !== null)
            ? exports.BloomFilter.fromPartial(object.addressBloomFilter)
            : undefined;
        return message;
    },
};
function createBaseAlert_MetadataEntry() {
    return { key: "", value: "" };
}
exports.Alert_MetadataEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlert_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.Alert_MetadataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAlert_MetadataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAlert_TagsEntry() {
    return { key: "", value: "" };
}
exports.Alert_TagsEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlert_TagsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.Alert_TagsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAlert_TagsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSignedAlert() {
    return { alert: undefined, signature: undefined, chainId: "", blockNumber: "", publishedWithTx: "" };
}
exports.SignedAlert = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.alert !== undefined) {
            exports.Alert.encode(message.alert, writer.uint32(10).fork()).ldelim();
        }
        if (message.signature !== undefined) {
            exports.Signature.encode(message.signature, writer.uint32(18).fork()).ldelim();
        }
        if (message.chainId !== "") {
            writer.uint32(26).string(message.chainId);
        }
        if (message.blockNumber !== "") {
            writer.uint32(34).string(message.blockNumber);
        }
        if (message.publishedWithTx !== "") {
            writer.uint32(42).string(message.publishedWithTx);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignedAlert();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alert = exports.Alert.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.signature = exports.Signature.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.chainId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.blockNumber = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.publishedWithTx = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alert: isSet(object.alert) ? exports.Alert.fromJSON(object.alert) : undefined,
            signature: isSet(object.signature) ? exports.Signature.fromJSON(object.signature) : undefined,
            chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "",
            blockNumber: isSet(object.blockNumber) ? globalThis.String(object.blockNumber) : "",
            publishedWithTx: isSet(object.publishedWithTx) ? globalThis.String(object.publishedWithTx) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.alert !== undefined) {
            obj.alert = exports.Alert.toJSON(message.alert);
        }
        if (message.signature !== undefined) {
            obj.signature = exports.Signature.toJSON(message.signature);
        }
        if (message.chainId !== "") {
            obj.chainId = message.chainId;
        }
        if (message.blockNumber !== "") {
            obj.blockNumber = message.blockNumber;
        }
        if (message.publishedWithTx !== "") {
            obj.publishedWithTx = message.publishedWithTx;
        }
        return obj;
    },
    create(base) {
        return exports.SignedAlert.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSignedAlert();
        message.alert = (object.alert !== undefined && object.alert !== null) ? exports.Alert.fromPartial(object.alert) : undefined;
        message.signature = (object.signature !== undefined && object.signature !== null)
            ? exports.Signature.fromPartial(object.signature)
            : undefined;
        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : "";
        message.blockNumber = (_b = object.blockNumber) !== null && _b !== void 0 ? _b : "";
        message.publishedWithTx = (_c = object.publishedWithTx) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseLabel() {
    return {
        entityType: 0,
        entity: "",
        confidence: 0,
        remove: false,
        label: "",
        metadata: [],
        uniqueKey: "",
        embedding: [],
    };
}
exports.Label = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.entityType !== 0) {
            writer.uint32(8).int32(message.entityType);
        }
        if (message.entity !== "") {
            writer.uint32(18).string(message.entity);
        }
        if (message.confidence !== 0) {
            writer.uint32(37).float(message.confidence);
        }
        if (message.remove !== false) {
            writer.uint32(48).bool(message.remove);
        }
        if (message.label !== "") {
            writer.uint32(58).string(message.label);
        }
        for (const v of message.metadata) {
            writer.uint32(66).string(v);
        }
        if (message.uniqueKey !== "") {
            writer.uint32(74).string(message.uniqueKey);
        }
        writer.uint32(82).fork();
        for (const v of message.embedding) {
            writer.float(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLabel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.entityType = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.entity = reader.string();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.confidence = reader.float();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.remove = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.metadata.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.uniqueKey = reader.string();
                    continue;
                case 10:
                    if (tag === 85) {
                        message.embedding.push(reader.float());
                        continue;
                    }
                    if (tag === 82) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.embedding.push(reader.float());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            entityType: isSet(object.entityType) ? label_EntityTypeFromJSON(object.entityType) : 0,
            entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
            confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
            remove: isSet(object.remove) ? globalThis.Boolean(object.remove) : false,
            label: isSet(object.label) ? globalThis.String(object.label) : "",
            metadata: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.metadata) ? object.metadata.map((e) => globalThis.String(e)) : [],
            uniqueKey: isSet(object.uniqueKey) ? globalThis.String(object.uniqueKey) : "",
            embedding: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.embedding)
                ? object.embedding.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.entityType !== 0) {
            obj.entityType = label_EntityTypeToJSON(message.entityType);
        }
        if (message.entity !== "") {
            obj.entity = message.entity;
        }
        if (message.confidence !== 0) {
            obj.confidence = message.confidence;
        }
        if (message.remove !== false) {
            obj.remove = message.remove;
        }
        if (message.label !== "") {
            obj.label = message.label;
        }
        if ((_a = message.metadata) === null || _a === void 0 ? void 0 : _a.length) {
            obj.metadata = message.metadata;
        }
        if (message.uniqueKey !== "") {
            obj.uniqueKey = message.uniqueKey;
        }
        if ((_b = message.embedding) === null || _b === void 0 ? void 0 : _b.length) {
            obj.embedding = message.embedding;
        }
        return obj;
    },
    create(base) {
        return exports.Label.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseLabel();
        message.entityType = (_a = object.entityType) !== null && _a !== void 0 ? _a : 0;
        message.entity = (_b = object.entity) !== null && _b !== void 0 ? _b : "";
        message.confidence = (_c = object.confidence) !== null && _c !== void 0 ? _c : 0;
        message.remove = (_d = object.remove) !== null && _d !== void 0 ? _d : false;
        message.label = (_e = object.label) !== null && _e !== void 0 ? _e : "";
        message.metadata = ((_f = object.metadata) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.uniqueKey = (_g = object.uniqueKey) !== null && _g !== void 0 ? _g : "";
        message.embedding = ((_h = object.embedding) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        return message;
    },
};
function createBaseSource() {
    return { transactions: [], blocks: [], urls: [], chains: [], alerts: [], customSources: [] };
}
exports.Source = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.transactions) {
            exports.Source_TransactionSource.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.blocks) {
            exports.Source_BlockSource.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.urls) {
            exports.Source_URLSource.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.chains) {
            exports.Source_ChainSource.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.alerts) {
            exports.Source_AlertSource.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.customSources) {
            exports.Source_CustomSource.encode(v, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.transactions.push(exports.Source_TransactionSource.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.blocks.push(exports.Source_BlockSource.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.urls.push(exports.Source_URLSource.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.chains.push(exports.Source_ChainSource.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.alerts.push(exports.Source_AlertSource.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.customSources.push(exports.Source_CustomSource.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            transactions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.transactions)
                ? object.transactions.map((e) => exports.Source_TransactionSource.fromJSON(e))
                : [],
            blocks: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.blocks)
                ? object.blocks.map((e) => exports.Source_BlockSource.fromJSON(e))
                : [],
            urls: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.urls) ? object.urls.map((e) => exports.Source_URLSource.fromJSON(e)) : [],
            chains: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.chains)
                ? object.chains.map((e) => exports.Source_ChainSource.fromJSON(e))
                : [],
            alerts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.alerts)
                ? object.alerts.map((e) => exports.Source_AlertSource.fromJSON(e))
                : [],
            customSources: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.customSources)
                ? object.customSources.map((e) => exports.Source_CustomSource.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f;
        const obj = {};
        if ((_a = message.transactions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.transactions = message.transactions.map((e) => exports.Source_TransactionSource.toJSON(e));
        }
        if ((_b = message.blocks) === null || _b === void 0 ? void 0 : _b.length) {
            obj.blocks = message.blocks.map((e) => exports.Source_BlockSource.toJSON(e));
        }
        if ((_c = message.urls) === null || _c === void 0 ? void 0 : _c.length) {
            obj.urls = message.urls.map((e) => exports.Source_URLSource.toJSON(e));
        }
        if ((_d = message.chains) === null || _d === void 0 ? void 0 : _d.length) {
            obj.chains = message.chains.map((e) => exports.Source_ChainSource.toJSON(e));
        }
        if ((_e = message.alerts) === null || _e === void 0 ? void 0 : _e.length) {
            obj.alerts = message.alerts.map((e) => exports.Source_AlertSource.toJSON(e));
        }
        if ((_f = message.customSources) === null || _f === void 0 ? void 0 : _f.length) {
            obj.customSources = message.customSources.map((e) => exports.Source_CustomSource.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Source.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseSource();
        message.transactions = ((_a = object.transactions) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Source_TransactionSource.fromPartial(e))) || [];
        message.blocks = ((_b = object.blocks) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Source_BlockSource.fromPartial(e))) || [];
        message.urls = ((_c = object.urls) === null || _c === void 0 ? void 0 : _c.map((e) => exports.Source_URLSource.fromPartial(e))) || [];
        message.chains = ((_d = object.chains) === null || _d === void 0 ? void 0 : _d.map((e) => exports.Source_ChainSource.fromPartial(e))) || [];
        message.alerts = ((_e = object.alerts) === null || _e === void 0 ? void 0 : _e.map((e) => exports.Source_AlertSource.fromPartial(e))) || [];
        message.customSources = ((_f = object.customSources) === null || _f === void 0 ? void 0 : _f.map((e) => exports.Source_CustomSource.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSource_TransactionSource() {
    return { chainId: 0, hash: "" };
}
exports.Source_TransactionSource = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chainId !== 0) {
            writer.uint32(8).uint64(message.chainId);
        }
        if (message.hash !== "") {
            writer.uint32(18).string(message.hash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSource_TransactionSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.chainId = longToNumber(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.chainId !== 0) {
            obj.chainId = Math.round(message.chainId);
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        return obj;
    },
    create(base) {
        return exports.Source_TransactionSource.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSource_TransactionSource();
        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : 0;
        message.hash = (_b = object.hash) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSource_BlockSource() {
    return { chainId: 0, hash: "", number: 0 };
}
exports.Source_BlockSource = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chainId !== 0) {
            writer.uint32(8).uint64(message.chainId);
        }
        if (message.hash !== "") {
            writer.uint32(18).string(message.hash);
        }
        if (message.number !== 0) {
            writer.uint32(24).uint64(message.number);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSource_BlockSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.chainId = longToNumber(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.number = longToNumber(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            number: isSet(object.number) ? globalThis.Number(object.number) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.chainId !== 0) {
            obj.chainId = Math.round(message.chainId);
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.number !== 0) {
            obj.number = Math.round(message.number);
        }
        return obj;
    },
    create(base) {
        return exports.Source_BlockSource.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSource_BlockSource();
        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : 0;
        message.hash = (_b = object.hash) !== null && _b !== void 0 ? _b : "";
        message.number = (_c = object.number) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseSource_URLSource() {
    return { url: "" };
}
exports.Source_URLSource = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSource_URLSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return exports.Source_URLSource.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSource_URLSource();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseSource_ChainSource() {
    return { chainId: 0 };
}
exports.Source_ChainSource = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chainId !== 0) {
            writer.uint32(8).uint64(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSource_ChainSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.chainId = longToNumber(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.chainId !== 0) {
            obj.chainId = Math.round(message.chainId);
        }
        return obj;
    },
    create(base) {
        return exports.Source_ChainSource.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSource_ChainSource();
        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseSource_AlertSource() {
    return { id: "" };
}
exports.Source_AlertSource = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSource_AlertSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.Source_AlertSource.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSource_AlertSource();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseSource_CustomSource() {
    return { name: "", value: "" };
}
exports.Source_CustomSource = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSource_CustomSource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.Source_CustomSource.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSource_CustomSource();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseFinding() {
    return {
        protocol: "",
        severity: 0,
        metadata: {},
        type: 0,
        alertId: "",
        name: "",
        description: "",
        private: false,
        addresses: [],
        indicators: {},
        labels: [],
        relatedAlerts: [],
        uniqueKey: "",
        source: undefined,
        timestamp: "",
    };
}
exports.Finding = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.protocol !== "") {
            writer.uint32(10).string(message.protocol);
        }
        if (message.severity !== 0) {
            writer.uint32(16).int32(message.severity);
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.Finding_MetadataEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        if (message.alertId !== "") {
            writer.uint32(42).string(message.alertId);
        }
        if (message.name !== "") {
            writer.uint32(50).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(58).string(message.description);
        }
        if (message.private !== false) {
            writer.uint32(72).bool(message.private);
        }
        for (const v of message.addresses) {
            writer.uint32(82).string(v);
        }
        Object.entries(message.indicators).forEach(([key, value]) => {
            exports.Finding_IndicatorsEntry.encode({ key: key, value }, writer.uint32(90).fork()).ldelim();
        });
        for (const v of message.labels) {
            exports.Label.encode(v, writer.uint32(98).fork()).ldelim();
        }
        for (const v of message.relatedAlerts) {
            writer.uint32(106).string(v);
        }
        if (message.uniqueKey !== "") {
            writer.uint32(114).string(message.uniqueKey);
        }
        if (message.source !== undefined) {
            exports.Source.encode(message.source, writer.uint32(122).fork()).ldelim();
        }
        if (message.timestamp !== "") {
            writer.uint32(130).string(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFinding();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.protocol = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.severity = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.Finding_MetadataEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.metadata[entry3.key] = entry3.value;
                    }
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.alertId = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.private = reader.bool();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    const entry11 = exports.Finding_IndicatorsEntry.decode(reader, reader.uint32());
                    if (entry11.value !== undefined) {
                        message.indicators[entry11.key] = entry11.value;
                    }
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.labels.push(exports.Label.decode(reader, reader.uint32()));
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.relatedAlerts.push(reader.string());
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.uniqueKey = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.source = exports.Source.decode(reader, reader.uint32());
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.timestamp = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            protocol: isSet(object.protocol) ? globalThis.String(object.protocol) : "",
            severity: isSet(object.severity) ? finding_SeverityFromJSON(object.severity) : 0,
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            type: isSet(object.type) ? finding_FindingTypeFromJSON(object.type) : 0,
            alertId: isSet(object.alertId) ? globalThis.String(object.alertId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            private: isSet(object.private) ? globalThis.Boolean(object.private) : false,
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            indicators: isObject(object.indicators)
                ? Object.entries(object.indicators).reduce((acc, [key, value]) => {
                    acc[key] = Number(value);
                    return acc;
                }, {})
                : {},
            labels: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.labels) ? object.labels.map((e) => exports.Label.fromJSON(e)) : [],
            relatedAlerts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.relatedAlerts)
                ? object.relatedAlerts.map((e) => globalThis.String(e))
                : [],
            uniqueKey: isSet(object.uniqueKey) ? globalThis.String(object.uniqueKey) : "",
            source: isSet(object.source) ? exports.Source.fromJSON(object.source) : undefined,
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.protocol !== "") {
            obj.protocol = message.protocol;
        }
        if (message.severity !== 0) {
            obj.severity = finding_SeverityToJSON(message.severity);
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        if (message.type !== 0) {
            obj.type = finding_FindingTypeToJSON(message.type);
        }
        if (message.alertId !== "") {
            obj.alertId = message.alertId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.private !== false) {
            obj.private = message.private;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if (message.indicators) {
            const entries = Object.entries(message.indicators);
            if (entries.length > 0) {
                obj.indicators = {};
                entries.forEach(([k, v]) => {
                    obj.indicators[k] = v;
                });
            }
        }
        if ((_b = message.labels) === null || _b === void 0 ? void 0 : _b.length) {
            obj.labels = message.labels.map((e) => exports.Label.toJSON(e));
        }
        if ((_c = message.relatedAlerts) === null || _c === void 0 ? void 0 : _c.length) {
            obj.relatedAlerts = message.relatedAlerts;
        }
        if (message.uniqueKey !== "") {
            obj.uniqueKey = message.uniqueKey;
        }
        if (message.source !== undefined) {
            obj.source = exports.Source.toJSON(message.source);
        }
        if (message.timestamp !== "") {
            obj.timestamp = message.timestamp;
        }
        return obj;
    },
    create(base) {
        return exports.Finding.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const message = createBaseFinding();
        message.protocol = (_a = object.protocol) !== null && _a !== void 0 ? _a : "";
        message.severity = (_b = object.severity) !== null && _b !== void 0 ? _b : 0;
        message.metadata = Object.entries((_c = object.metadata) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.type = (_d = object.type) !== null && _d !== void 0 ? _d : 0;
        message.alertId = (_e = object.alertId) !== null && _e !== void 0 ? _e : "";
        message.name = (_f = object.name) !== null && _f !== void 0 ? _f : "";
        message.description = (_g = object.description) !== null && _g !== void 0 ? _g : "";
        message.private = (_h = object.private) !== null && _h !== void 0 ? _h : false;
        message.addresses = ((_j = object.addresses) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        message.indicators = Object.entries((_k = object.indicators) !== null && _k !== void 0 ? _k : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Number(value);
            }
            return acc;
        }, {});
        message.labels = ((_l = object.labels) === null || _l === void 0 ? void 0 : _l.map((e) => exports.Label.fromPartial(e))) || [];
        message.relatedAlerts = ((_m = object.relatedAlerts) === null || _m === void 0 ? void 0 : _m.map((e) => e)) || [];
        message.uniqueKey = (_o = object.uniqueKey) !== null && _o !== void 0 ? _o : "";
        message.source = (object.source !== undefined && object.source !== null)
            ? exports.Source.fromPartial(object.source)
            : undefined;
        message.timestamp = (_p = object.timestamp) !== null && _p !== void 0 ? _p : "";
        return message;
    },
};
function createBaseFinding_MetadataEntry() {
    return { key: "", value: "" };
}
exports.Finding_MetadataEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFinding_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.Finding_MetadataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseFinding_MetadataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseFinding_IndicatorsEntry() {
    return { key: "", value: 0 };
}
exports.Finding_IndicatorsEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(17).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFinding_IndicatorsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.value = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.Finding_IndicatorsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseFinding_IndicatorsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseAPIAlert() {
    return { id: "", type: 0, finding: undefined, agent: undefined, timestamp: "" };
}
exports.APIAlert = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        if (message.finding !== undefined) {
            exports.Finding.encode(message.finding, writer.uint32(26).fork()).ldelim();
        }
        if (message.agent !== undefined) {
            exports.APIAlert_APIAlertAgent.encode(message.agent, writer.uint32(34).fork()).ldelim();
        }
        if (message.timestamp !== "") {
            writer.uint32(42).string(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAPIAlert();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.finding = exports.Finding.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.agent = exports.APIAlert_APIAlertAgent.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.timestamp = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            type: isSet(object.type) ? alertTypeFromJSON(object.type) : 0,
            finding: isSet(object.finding) ? exports.Finding.fromJSON(object.finding) : undefined,
            agent: isSet(object.agent) ? exports.APIAlert_APIAlertAgent.fromJSON(object.agent) : undefined,
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.type !== 0) {
            obj.type = alertTypeToJSON(message.type);
        }
        if (message.finding !== undefined) {
            obj.finding = exports.Finding.toJSON(message.finding);
        }
        if (message.agent !== undefined) {
            obj.agent = exports.APIAlert_APIAlertAgent.toJSON(message.agent);
        }
        if (message.timestamp !== "") {
            obj.timestamp = message.timestamp;
        }
        return obj;
    },
    create(base) {
        return exports.APIAlert.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAPIAlert();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : 0;
        message.finding = (object.finding !== undefined && object.finding !== null)
            ? exports.Finding.fromPartial(object.finding)
            : undefined;
        message.agent = (object.agent !== undefined && object.agent !== null)
            ? exports.APIAlert_APIAlertAgent.fromPartial(object.agent)
            : undefined;
        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseAPIAlert_APIAlertAgent() {
    return { id: "" };
}
exports.APIAlert_APIAlertAgent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAPIAlert_APIAlertAgent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.APIAlert_APIAlertAgent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAPIAlert_APIAlertAgent();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
