// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: model/v1/agent.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal.js";
import { BloomFilter, Finding, TrackingTimestamps } from "./alert.js";
import Long = require("long");

export const protobufPackage = "model.v1";

export enum ResponseStatus {
  UNKNOWN = 0,
  ERROR = 1,
  SUCCESS = 2,
  UNRECOGNIZED = -1,
}

export function responseStatusFromJSON(object: any): ResponseStatus {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ResponseStatus.UNKNOWN;
    case 1:
    case "ERROR":
      return ResponseStatus.ERROR;
    case 2:
    case "SUCCESS":
      return ResponseStatus.SUCCESS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResponseStatus.UNRECOGNIZED;
  }
}

export function responseStatusToJSON(object: ResponseStatus): string {
  switch (object) {
    case ResponseStatus.UNKNOWN:
      return "UNKNOWN";
    case ResponseStatus.ERROR:
      return "ERROR";
    case ResponseStatus.SUCCESS:
      return "SUCCESS";
    case ResponseStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Error {
  message: string;
}

export interface HealthCheckRequest {
}

export interface HealthCheckResponse {
  status: HealthCheckResponse_ResponseStatus;
  errors: Error[];
}

export enum HealthCheckResponse_ResponseStatus {
  UNKNOWN = 0,
  ERROR = 1,
  SUCCESS = 2,
  UNRECOGNIZED = -1,
}

export function healthCheckResponse_ResponseStatusFromJSON(object: any): HealthCheckResponse_ResponseStatus {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return HealthCheckResponse_ResponseStatus.UNKNOWN;
    case 1:
    case "ERROR":
      return HealthCheckResponse_ResponseStatus.ERROR;
    case 2:
    case "SUCCESS":
      return HealthCheckResponse_ResponseStatus.SUCCESS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HealthCheckResponse_ResponseStatus.UNRECOGNIZED;
  }
}

export function healthCheckResponse_ResponseStatusToJSON(object: HealthCheckResponse_ResponseStatus): string {
  switch (object) {
    case HealthCheckResponse_ResponseStatus.UNKNOWN:
      return "UNKNOWN";
    case HealthCheckResponse_ResponseStatus.ERROR:
      return "ERROR";
    case HealthCheckResponse_ResponseStatus.SUCCESS:
      return "SUCCESS";
    case HealthCheckResponse_ResponseStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface InitializeRequest {
  agentId: string;
  proxyHost: string;
  shardId: number;
}

export interface InitializeResponse {
  status: ResponseStatus;
  errors: Error[];
  addresses: string[];
  alertConfig: AlertConfig | undefined;
}

export interface AlertConfig {
  subscriptions: CombinerBotSubscription[];
}

export interface CombinerBotSubscription {
  botId: string;
  alertId: string;
  alertIds: string[];
  chainId: number;
}

export interface EvaluateTxRequest {
  requestId: string;
  event: TransactionEvent | undefined;
  shardId: number;
}

export interface EvaluateBlockRequest {
  requestId: string;
  event: BlockEvent | undefined;
  shardId: number;
}

export interface EvaluateAlertRequest {
  requestId: string;
  event: AlertEvent | undefined;
  targetBotId: string;
  shardId: number;
}

export interface EvaluateTxResponse {
  status: ResponseStatus;
  errors: Error[];
  findings: Finding[];
  metadata: { [key: string]: string };
  timestamp: string;
  latencyMs: number;
  private: boolean;
}

export interface EvaluateTxResponse_MetadataEntry {
  key: string;
  value: string;
}

export interface EvaluateBlockResponse {
  status: ResponseStatus;
  errors: Error[];
  findings: Finding[];
  metadata: { [key: string]: string };
  timestamp: string;
  latencyMs: number;
  private: boolean;
}

export interface EvaluateBlockResponse_MetadataEntry {
  key: string;
  value: string;
}

export interface EvaluateAlertResponse {
  status: ResponseStatus;
  errors: Error[];
  findings: Finding[];
  metadata: { [key: string]: string };
  timestamp: string;
  latencyMs: number;
  private: boolean;
}

export interface EvaluateAlertResponse_MetadataEntry {
  key: string;
  value: string;
}

export interface BlockEvent {
  type: BlockEvent_EventType;
  blockHash: string;
  blockNumber: string;
  network: BlockEvent_Network | undefined;
  block: BlockEvent_EthBlock | undefined;
  timestamps: TrackingTimestamps | undefined;
}

export enum BlockEvent_EventType {
  BLOCK = 0,
  /** @deprecated */
  REORG = 1,
  UNRECOGNIZED = -1,
}

export function blockEvent_EventTypeFromJSON(object: any): BlockEvent_EventType {
  switch (object) {
    case 0:
    case "BLOCK":
      return BlockEvent_EventType.BLOCK;
    case 1:
    case "REORG":
      return BlockEvent_EventType.REORG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BlockEvent_EventType.UNRECOGNIZED;
  }
}

export function blockEvent_EventTypeToJSON(object: BlockEvent_EventType): string {
  switch (object) {
    case BlockEvent_EventType.BLOCK:
      return "BLOCK";
    case BlockEvent_EventType.REORG:
      return "REORG";
    case BlockEvent_EventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BlockEvent_Network {
  chainId: string;
}

export interface BlockEvent_EthBlock {
  difficulty: string;
  extraData: string;
  gasLimit: string;
  gasUsed: string;
  hash: string;
  logsBloom: string;
  miner: string;
  mixHash: string;
  nonce: string;
  number: string;
  parentHash: string;
  receiptsRoot: string;
  sha3Uncles: string;
  size: string;
  stateRoot: string;
  timestamp: string;
  totalDifficulty: string;
  transactions: string[];
  transactionsRoot: string;
  uncles: string[];
  baseFeePerGas: string;
}

export interface TransactionEvent {
  type: TransactionEvent_EventType;
  transaction:
    | TransactionEvent_EthTransaction
    | undefined;
  /** @deprecated */
  receipt: TransactionEvent_EthReceipt | undefined;
  network: TransactionEvent_Network | undefined;
  traces: TransactionEvent_Trace[];
  addresses: { [key: string]: boolean };
  block: TransactionEvent_EthBlock | undefined;
  logs: TransactionEvent_Log[];
  isContractDeployment: boolean;
  contractAddress: string;
  timestamps: TrackingTimestamps | undefined;
  txAddresses: { [key: string]: boolean };
}

export enum TransactionEvent_EventType {
  BLOCK = 0,
  REORG = 1,
  UNRECOGNIZED = -1,
}

export function transactionEvent_EventTypeFromJSON(object: any): TransactionEvent_EventType {
  switch (object) {
    case 0:
    case "BLOCK":
      return TransactionEvent_EventType.BLOCK;
    case 1:
    case "REORG":
      return TransactionEvent_EventType.REORG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TransactionEvent_EventType.UNRECOGNIZED;
  }
}

export function transactionEvent_EventTypeToJSON(object: TransactionEvent_EventType): string {
  switch (object) {
    case TransactionEvent_EventType.BLOCK:
      return "BLOCK";
    case TransactionEvent_EventType.REORG:
      return "REORG";
    case TransactionEvent_EventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface TransactionEvent_Network {
  chainId: string;
}

export interface TransactionEvent_EthBlock {
  blockHash: string;
  blockNumber: string;
  blockTimestamp: string;
  baseFeePerGas: string;
}

export interface TransactionEvent_EthTransaction {
  type: string;
  nonce: string;
  gasPrice: string;
  gas: string;
  value: string;
  input: string;
  v: string;
  r: string;
  s: string;
  to: string;
  hash: string;
  from: string;
  maxFeePerGas: string;
  maxPriorityFeePerGas: string;
}

export interface TransactionEvent_Log {
  address: string;
  topics: string[];
  data: string;
  blockNumber: string;
  transactionHash: string;
  transactionIndex: string;
  blockHash: string;
  logIndex: string;
  removed: boolean;
}

export interface TransactionEvent_EthReceipt {
  root: string;
  status: string;
  cumulativeGasUsed: string;
  logsBloom: string;
  logs: TransactionEvent_Log[];
  transactionHash: string;
  contractAddress: string;
  gasUsed: string;
  blockHash: string;
  blockNumber: string;
  transactionIndex: string;
}

export interface TransactionEvent_TraceAction {
  callType: string;
  to: string;
  input: string;
  from: string;
  value: string;
  init: string;
  address: string;
  balance: string;
  refundAddress: string;
}

export interface TransactionEvent_TraceResult {
  gasUsed: string;
  address: string;
  code: string;
  output: string;
}

export interface TransactionEvent_Trace {
  action: TransactionEvent_TraceAction | undefined;
  blockHash: string;
  blockNumber: number;
  result: TransactionEvent_TraceResult | undefined;
  subtraces: number;
  traceAddress: number[];
  transactionHash: string;
  transactionPosition: number;
  type: string;
  error: string;
}

export interface TransactionEvent_AddressesEntry {
  key: string;
  value: boolean;
}

export interface TransactionEvent_TxAddressesEntry {
  key: string;
  value: boolean;
}

export interface AlertEvent {
  alert: AlertEvent_Alert | undefined;
  timestamps: TrackingTimestamps | undefined;
}

export interface AlertEvent_Alert {
  /**
   * Unique string to identify this class of finding,
   * primarily used to group similar findings for the end user
   */
  alertId: string;
  /** List of addresses involved in the alert */
  addresses: string[];
  /** List of contracts related to the alert */
  contracts: AlertEvent_Alert_Contract[];
  /** Timestamp when the alert was published */
  createdAt: string;
  description: string;
  hash: string;
  metadata: { [key: string]: string };
  name: string;
  projects: AlertEvent_Alert_Project[];
  scanNodeCount: number;
  severity: string;
  source: AlertEvent_Alert_Source | undefined;
  findingType: string;
  relatedAlerts: string[];
  chainId: number;
  labels: AlertEvent_Alert_Label[];
  truncated: boolean;
  addressBloomFilter: BloomFilter | undefined;
}

export interface AlertEvent_Alert_Contract {
  name: string;
  projectId: string;
}

export interface AlertEvent_Alert_Project {
  id: string;
}

export interface AlertEvent_Alert_Block {
  number: number;
  hash: string;
  timestamp: string;
  chainId: number;
}

export interface AlertEvent_Alert_Bot {
  chainIds: string[];
  createdAt: string;
  description: string;
  developer: string;
  DocReference: string;
  enabled: boolean;
  id: string;
  image: string;
  name: string;
  reference: string;
  repository: string;
  projects: string[];
  scanNodes: string[];
  version: string;
}

export interface AlertEvent_Alert_SourceAlertEvent {
  botId: string;
  hash: string;
  timestamp: string;
  chainId: number;
}

export interface AlertEvent_Alert_Source {
  transactionHash: string;
  bot: AlertEvent_Alert_Bot | undefined;
  block: AlertEvent_Alert_Block | undefined;
  sourceAlert: AlertEvent_Alert_SourceAlertEvent | undefined;
}

export interface AlertEvent_Alert_Label {
  label: string;
  confidence: number;
  entity: string;
  entityType: string;
  remove: boolean;
  metadata: string[];
  uniqueKey: string;
  embedding: number[];
}

export interface AlertEvent_Alert_MetadataEntry {
  key: string;
  value: string;
}

function createBaseError(): Error {
  return { message: "" };
}

export const Error = {
  encode(message: Error, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Error {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: Error): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error>, I>>(base?: I): Error {
    return Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error>, I>>(object: I): Error {
    const message = createBaseError();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseHealthCheckRequest(): HealthCheckRequest {
  return {};
}

export const HealthCheckRequest = {
  encode(_: HealthCheckRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HealthCheckRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HealthCheckRequest {
    return {};
  },

  toJSON(_: HealthCheckRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckRequest>, I>>(base?: I): HealthCheckRequest {
    return HealthCheckRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckRequest>, I>>(_: I): HealthCheckRequest {
    const message = createBaseHealthCheckRequest();
    return message;
  },
};

function createBaseHealthCheckResponse(): HealthCheckResponse {
  return { status: 0, errors: [] };
}

export const HealthCheckResponse = {
  encode(message: HealthCheckResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    for (const v of message.errors) {
      Error.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HealthCheckResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errors.push(Error.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckResponse {
    return {
      status: isSet(object.status) ? healthCheckResponse_ResponseStatusFromJSON(object.status) : 0,
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Error.fromJSON(e)) : [],
    };
  },

  toJSON(message: HealthCheckResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = healthCheckResponse_ResponseStatusToJSON(message.status);
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Error.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckResponse>, I>>(base?: I): HealthCheckResponse {
    return HealthCheckResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckResponse>, I>>(object: I): HealthCheckResponse {
    const message = createBaseHealthCheckResponse();
    message.status = object.status ?? 0;
    message.errors = object.errors?.map((e) => Error.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInitializeRequest(): InitializeRequest {
  return { agentId: "", proxyHost: "", shardId: 0 };
}

export const InitializeRequest = {
  encode(message: InitializeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.agentId !== "") {
      writer.uint32(10).string(message.agentId);
    }
    if (message.proxyHost !== "") {
      writer.uint32(18).string(message.proxyHost);
    }
    if (message.shardId !== 0) {
      writer.uint32(24).int32(message.shardId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InitializeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitializeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.agentId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.proxyHost = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.shardId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitializeRequest {
    return {
      agentId: isSet(object.agentId) ? globalThis.String(object.agentId) : "",
      proxyHost: isSet(object.proxyHost) ? globalThis.String(object.proxyHost) : "",
      shardId: isSet(object.shardId) ? globalThis.Number(object.shardId) : 0,
    };
  },

  toJSON(message: InitializeRequest): unknown {
    const obj: any = {};
    if (message.agentId !== "") {
      obj.agentId = message.agentId;
    }
    if (message.proxyHost !== "") {
      obj.proxyHost = message.proxyHost;
    }
    if (message.shardId !== 0) {
      obj.shardId = Math.round(message.shardId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitializeRequest>, I>>(base?: I): InitializeRequest {
    return InitializeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitializeRequest>, I>>(object: I): InitializeRequest {
    const message = createBaseInitializeRequest();
    message.agentId = object.agentId ?? "";
    message.proxyHost = object.proxyHost ?? "";
    message.shardId = object.shardId ?? 0;
    return message;
  },
};

function createBaseInitializeResponse(): InitializeResponse {
  return { status: 0, errors: [], addresses: [], alertConfig: undefined };
}

export const InitializeResponse = {
  encode(message: InitializeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    for (const v of message.errors) {
      Error.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.addresses) {
      writer.uint32(26).string(v!);
    }
    if (message.alertConfig !== undefined) {
      AlertConfig.encode(message.alertConfig, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InitializeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitializeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errors.push(Error.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.addresses.push(reader.string());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.alertConfig = AlertConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitializeResponse {
    return {
      status: isSet(object.status) ? responseStatusFromJSON(object.status) : 0,
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Error.fromJSON(e)) : [],
      addresses: globalThis.Array.isArray(object?.addresses)
        ? object.addresses.map((e: any) => globalThis.String(e))
        : [],
      alertConfig: isSet(object.alertConfig) ? AlertConfig.fromJSON(object.alertConfig) : undefined,
    };
  },

  toJSON(message: InitializeResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = responseStatusToJSON(message.status);
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Error.toJSON(e));
    }
    if (message.addresses?.length) {
      obj.addresses = message.addresses;
    }
    if (message.alertConfig !== undefined) {
      obj.alertConfig = AlertConfig.toJSON(message.alertConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitializeResponse>, I>>(base?: I): InitializeResponse {
    return InitializeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitializeResponse>, I>>(object: I): InitializeResponse {
    const message = createBaseInitializeResponse();
    message.status = object.status ?? 0;
    message.errors = object.errors?.map((e) => Error.fromPartial(e)) || [];
    message.addresses = object.addresses?.map((e) => e) || [];
    message.alertConfig = (object.alertConfig !== undefined && object.alertConfig !== null)
      ? AlertConfig.fromPartial(object.alertConfig)
      : undefined;
    return message;
  },
};

function createBaseAlertConfig(): AlertConfig {
  return { subscriptions: [] };
}

export const AlertConfig = {
  encode(message: AlertConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.subscriptions) {
      CombinerBotSubscription.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AlertConfig {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.subscriptions.push(CombinerBotSubscription.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertConfig {
    return {
      subscriptions: globalThis.Array.isArray(object?.subscriptions)
        ? object.subscriptions.map((e: any) => CombinerBotSubscription.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AlertConfig): unknown {
    const obj: any = {};
    if (message.subscriptions?.length) {
      obj.subscriptions = message.subscriptions.map((e) => CombinerBotSubscription.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertConfig>, I>>(base?: I): AlertConfig {
    return AlertConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertConfig>, I>>(object: I): AlertConfig {
    const message = createBaseAlertConfig();
    message.subscriptions = object.subscriptions?.map((e) => CombinerBotSubscription.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCombinerBotSubscription(): CombinerBotSubscription {
  return { botId: "", alertId: "", alertIds: [], chainId: 0 };
}

export const CombinerBotSubscription = {
  encode(message: CombinerBotSubscription, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.botId !== "") {
      writer.uint32(10).string(message.botId);
    }
    if (message.alertId !== "") {
      writer.uint32(18).string(message.alertId);
    }
    for (const v of message.alertIds) {
      writer.uint32(26).string(v!);
    }
    if (message.chainId !== 0) {
      writer.uint32(32).uint64(message.chainId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CombinerBotSubscription {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCombinerBotSubscription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.botId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.alertId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.alertIds.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.chainId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CombinerBotSubscription {
    return {
      botId: isSet(object.botId) ? globalThis.String(object.botId) : "",
      alertId: isSet(object.alertId) ? globalThis.String(object.alertId) : "",
      alertIds: globalThis.Array.isArray(object?.alertIds) ? object.alertIds.map((e: any) => globalThis.String(e)) : [],
      chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
    };
  },

  toJSON(message: CombinerBotSubscription): unknown {
    const obj: any = {};
    if (message.botId !== "") {
      obj.botId = message.botId;
    }
    if (message.alertId !== "") {
      obj.alertId = message.alertId;
    }
    if (message.alertIds?.length) {
      obj.alertIds = message.alertIds;
    }
    if (message.chainId !== 0) {
      obj.chainId = Math.round(message.chainId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CombinerBotSubscription>, I>>(base?: I): CombinerBotSubscription {
    return CombinerBotSubscription.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CombinerBotSubscription>, I>>(object: I): CombinerBotSubscription {
    const message = createBaseCombinerBotSubscription();
    message.botId = object.botId ?? "";
    message.alertId = object.alertId ?? "";
    message.alertIds = object.alertIds?.map((e) => e) || [];
    message.chainId = object.chainId ?? 0;
    return message;
  },
};

function createBaseEvaluateTxRequest(): EvaluateTxRequest {
  return { requestId: "", event: undefined, shardId: 0 };
}

export const EvaluateTxRequest = {
  encode(message: EvaluateTxRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.event !== undefined) {
      TransactionEvent.encode(message.event, writer.uint32(18).fork()).ldelim();
    }
    if (message.shardId !== 0) {
      writer.uint32(24).int32(message.shardId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EvaluateTxRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.event = TransactionEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.shardId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateTxRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      event: isSet(object.event) ? TransactionEvent.fromJSON(object.event) : undefined,
      shardId: isSet(object.shardId) ? globalThis.Number(object.shardId) : 0,
    };
  },

  toJSON(message: EvaluateTxRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.event !== undefined) {
      obj.event = TransactionEvent.toJSON(message.event);
    }
    if (message.shardId !== 0) {
      obj.shardId = Math.round(message.shardId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateTxRequest>, I>>(base?: I): EvaluateTxRequest {
    return EvaluateTxRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateTxRequest>, I>>(object: I): EvaluateTxRequest {
    const message = createBaseEvaluateTxRequest();
    message.requestId = object.requestId ?? "";
    message.event = (object.event !== undefined && object.event !== null)
      ? TransactionEvent.fromPartial(object.event)
      : undefined;
    message.shardId = object.shardId ?? 0;
    return message;
  },
};

function createBaseEvaluateBlockRequest(): EvaluateBlockRequest {
  return { requestId: "", event: undefined, shardId: 0 };
}

export const EvaluateBlockRequest = {
  encode(message: EvaluateBlockRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.event !== undefined) {
      BlockEvent.encode(message.event, writer.uint32(18).fork()).ldelim();
    }
    if (message.shardId !== 0) {
      writer.uint32(24).int32(message.shardId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EvaluateBlockRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.event = BlockEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.shardId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateBlockRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      event: isSet(object.event) ? BlockEvent.fromJSON(object.event) : undefined,
      shardId: isSet(object.shardId) ? globalThis.Number(object.shardId) : 0,
    };
  },

  toJSON(message: EvaluateBlockRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.event !== undefined) {
      obj.event = BlockEvent.toJSON(message.event);
    }
    if (message.shardId !== 0) {
      obj.shardId = Math.round(message.shardId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateBlockRequest>, I>>(base?: I): EvaluateBlockRequest {
    return EvaluateBlockRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateBlockRequest>, I>>(object: I): EvaluateBlockRequest {
    const message = createBaseEvaluateBlockRequest();
    message.requestId = object.requestId ?? "";
    message.event = (object.event !== undefined && object.event !== null)
      ? BlockEvent.fromPartial(object.event)
      : undefined;
    message.shardId = object.shardId ?? 0;
    return message;
  },
};

function createBaseEvaluateAlertRequest(): EvaluateAlertRequest {
  return { requestId: "", event: undefined, targetBotId: "", shardId: 0 };
}

export const EvaluateAlertRequest = {
  encode(message: EvaluateAlertRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.event !== undefined) {
      AlertEvent.encode(message.event, writer.uint32(18).fork()).ldelim();
    }
    if (message.targetBotId !== "") {
      writer.uint32(26).string(message.targetBotId);
    }
    if (message.shardId !== 0) {
      writer.uint32(32).int32(message.shardId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EvaluateAlertRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateAlertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.event = AlertEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.targetBotId = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.shardId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateAlertRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      event: isSet(object.event) ? AlertEvent.fromJSON(object.event) : undefined,
      targetBotId: isSet(object.targetBotId) ? globalThis.String(object.targetBotId) : "",
      shardId: isSet(object.shardId) ? globalThis.Number(object.shardId) : 0,
    };
  },

  toJSON(message: EvaluateAlertRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.event !== undefined) {
      obj.event = AlertEvent.toJSON(message.event);
    }
    if (message.targetBotId !== "") {
      obj.targetBotId = message.targetBotId;
    }
    if (message.shardId !== 0) {
      obj.shardId = Math.round(message.shardId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateAlertRequest>, I>>(base?: I): EvaluateAlertRequest {
    return EvaluateAlertRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateAlertRequest>, I>>(object: I): EvaluateAlertRequest {
    const message = createBaseEvaluateAlertRequest();
    message.requestId = object.requestId ?? "";
    message.event = (object.event !== undefined && object.event !== null)
      ? AlertEvent.fromPartial(object.event)
      : undefined;
    message.targetBotId = object.targetBotId ?? "";
    message.shardId = object.shardId ?? 0;
    return message;
  },
};

function createBaseEvaluateTxResponse(): EvaluateTxResponse {
  return { status: 0, errors: [], findings: [], metadata: {}, timestamp: "", latencyMs: 0, private: false };
}

export const EvaluateTxResponse = {
  encode(message: EvaluateTxResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    for (const v of message.errors) {
      Error.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.findings) {
      Finding.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      EvaluateTxResponse_MetadataEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).ldelim();
    });
    if (message.timestamp !== "") {
      writer.uint32(42).string(message.timestamp);
    }
    if (message.latencyMs !== 0) {
      writer.uint32(48).uint32(message.latencyMs);
    }
    if (message.private !== false) {
      writer.uint32(56).bool(message.private);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EvaluateTxResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateTxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errors.push(Error.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.findings.push(Finding.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = EvaluateTxResponse_MetadataEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.metadata[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.latencyMs = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.private = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateTxResponse {
    return {
      status: isSet(object.status) ? responseStatusFromJSON(object.status) : 0,
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Error.fromJSON(e)) : [],
      findings: globalThis.Array.isArray(object?.findings) ? object.findings.map((e: any) => Finding.fromJSON(e)) : [],
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      latencyMs: isSet(object.latencyMs) ? globalThis.Number(object.latencyMs) : 0,
      private: isSet(object.private) ? globalThis.Boolean(object.private) : false,
    };
  },

  toJSON(message: EvaluateTxResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = responseStatusToJSON(message.status);
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Error.toJSON(e));
    }
    if (message.findings?.length) {
      obj.findings = message.findings.map((e) => Finding.toJSON(e));
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.latencyMs !== 0) {
      obj.latencyMs = Math.round(message.latencyMs);
    }
    if (message.private !== false) {
      obj.private = message.private;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateTxResponse>, I>>(base?: I): EvaluateTxResponse {
    return EvaluateTxResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateTxResponse>, I>>(object: I): EvaluateTxResponse {
    const message = createBaseEvaluateTxResponse();
    message.status = object.status ?? 0;
    message.errors = object.errors?.map((e) => Error.fromPartial(e)) || [];
    message.findings = object.findings?.map((e) => Finding.fromPartial(e)) || [];
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.timestamp = object.timestamp ?? "";
    message.latencyMs = object.latencyMs ?? 0;
    message.private = object.private ?? false;
    return message;
  },
};

function createBaseEvaluateTxResponse_MetadataEntry(): EvaluateTxResponse_MetadataEntry {
  return { key: "", value: "" };
}

export const EvaluateTxResponse_MetadataEntry = {
  encode(message: EvaluateTxResponse_MetadataEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EvaluateTxResponse_MetadataEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateTxResponse_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateTxResponse_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: EvaluateTxResponse_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateTxResponse_MetadataEntry>, I>>(
    base?: I,
  ): EvaluateTxResponse_MetadataEntry {
    return EvaluateTxResponse_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateTxResponse_MetadataEntry>, I>>(
    object: I,
  ): EvaluateTxResponse_MetadataEntry {
    const message = createBaseEvaluateTxResponse_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseEvaluateBlockResponse(): EvaluateBlockResponse {
  return { status: 0, errors: [], findings: [], metadata: {}, timestamp: "", latencyMs: 0, private: false };
}

export const EvaluateBlockResponse = {
  encode(message: EvaluateBlockResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    for (const v of message.errors) {
      Error.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.findings) {
      Finding.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      EvaluateBlockResponse_MetadataEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).ldelim();
    });
    if (message.timestamp !== "") {
      writer.uint32(42).string(message.timestamp);
    }
    if (message.latencyMs !== 0) {
      writer.uint32(48).uint32(message.latencyMs);
    }
    if (message.private !== false) {
      writer.uint32(56).bool(message.private);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EvaluateBlockResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errors.push(Error.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.findings.push(Finding.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = EvaluateBlockResponse_MetadataEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.metadata[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.latencyMs = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.private = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateBlockResponse {
    return {
      status: isSet(object.status) ? responseStatusFromJSON(object.status) : 0,
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Error.fromJSON(e)) : [],
      findings: globalThis.Array.isArray(object?.findings) ? object.findings.map((e: any) => Finding.fromJSON(e)) : [],
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      latencyMs: isSet(object.latencyMs) ? globalThis.Number(object.latencyMs) : 0,
      private: isSet(object.private) ? globalThis.Boolean(object.private) : false,
    };
  },

  toJSON(message: EvaluateBlockResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = responseStatusToJSON(message.status);
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Error.toJSON(e));
    }
    if (message.findings?.length) {
      obj.findings = message.findings.map((e) => Finding.toJSON(e));
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.latencyMs !== 0) {
      obj.latencyMs = Math.round(message.latencyMs);
    }
    if (message.private !== false) {
      obj.private = message.private;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateBlockResponse>, I>>(base?: I): EvaluateBlockResponse {
    return EvaluateBlockResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateBlockResponse>, I>>(object: I): EvaluateBlockResponse {
    const message = createBaseEvaluateBlockResponse();
    message.status = object.status ?? 0;
    message.errors = object.errors?.map((e) => Error.fromPartial(e)) || [];
    message.findings = object.findings?.map((e) => Finding.fromPartial(e)) || [];
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.timestamp = object.timestamp ?? "";
    message.latencyMs = object.latencyMs ?? 0;
    message.private = object.private ?? false;
    return message;
  },
};

function createBaseEvaluateBlockResponse_MetadataEntry(): EvaluateBlockResponse_MetadataEntry {
  return { key: "", value: "" };
}

export const EvaluateBlockResponse_MetadataEntry = {
  encode(message: EvaluateBlockResponse_MetadataEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EvaluateBlockResponse_MetadataEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateBlockResponse_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateBlockResponse_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: EvaluateBlockResponse_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateBlockResponse_MetadataEntry>, I>>(
    base?: I,
  ): EvaluateBlockResponse_MetadataEntry {
    return EvaluateBlockResponse_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateBlockResponse_MetadataEntry>, I>>(
    object: I,
  ): EvaluateBlockResponse_MetadataEntry {
    const message = createBaseEvaluateBlockResponse_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseEvaluateAlertResponse(): EvaluateAlertResponse {
  return { status: 0, errors: [], findings: [], metadata: {}, timestamp: "", latencyMs: 0, private: false };
}

export const EvaluateAlertResponse = {
  encode(message: EvaluateAlertResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    for (const v of message.errors) {
      Error.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.findings) {
      Finding.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      EvaluateAlertResponse_MetadataEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).ldelim();
    });
    if (message.timestamp !== "") {
      writer.uint32(42).string(message.timestamp);
    }
    if (message.latencyMs !== 0) {
      writer.uint32(48).uint32(message.latencyMs);
    }
    if (message.private !== false) {
      writer.uint32(56).bool(message.private);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EvaluateAlertResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateAlertResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errors.push(Error.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.findings.push(Finding.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = EvaluateAlertResponse_MetadataEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.metadata[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.latencyMs = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.private = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateAlertResponse {
    return {
      status: isSet(object.status) ? responseStatusFromJSON(object.status) : 0,
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Error.fromJSON(e)) : [],
      findings: globalThis.Array.isArray(object?.findings) ? object.findings.map((e: any) => Finding.fromJSON(e)) : [],
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      latencyMs: isSet(object.latencyMs) ? globalThis.Number(object.latencyMs) : 0,
      private: isSet(object.private) ? globalThis.Boolean(object.private) : false,
    };
  },

  toJSON(message: EvaluateAlertResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = responseStatusToJSON(message.status);
    }
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Error.toJSON(e));
    }
    if (message.findings?.length) {
      obj.findings = message.findings.map((e) => Finding.toJSON(e));
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.latencyMs !== 0) {
      obj.latencyMs = Math.round(message.latencyMs);
    }
    if (message.private !== false) {
      obj.private = message.private;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateAlertResponse>, I>>(base?: I): EvaluateAlertResponse {
    return EvaluateAlertResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateAlertResponse>, I>>(object: I): EvaluateAlertResponse {
    const message = createBaseEvaluateAlertResponse();
    message.status = object.status ?? 0;
    message.errors = object.errors?.map((e) => Error.fromPartial(e)) || [];
    message.findings = object.findings?.map((e) => Finding.fromPartial(e)) || [];
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.timestamp = object.timestamp ?? "";
    message.latencyMs = object.latencyMs ?? 0;
    message.private = object.private ?? false;
    return message;
  },
};

function createBaseEvaluateAlertResponse_MetadataEntry(): EvaluateAlertResponse_MetadataEntry {
  return { key: "", value: "" };
}

export const EvaluateAlertResponse_MetadataEntry = {
  encode(message: EvaluateAlertResponse_MetadataEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EvaluateAlertResponse_MetadataEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateAlertResponse_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateAlertResponse_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: EvaluateAlertResponse_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateAlertResponse_MetadataEntry>, I>>(
    base?: I,
  ): EvaluateAlertResponse_MetadataEntry {
    return EvaluateAlertResponse_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateAlertResponse_MetadataEntry>, I>>(
    object: I,
  ): EvaluateAlertResponse_MetadataEntry {
    const message = createBaseEvaluateAlertResponse_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseBlockEvent(): BlockEvent {
  return { type: 0, blockHash: "", blockNumber: "", network: undefined, block: undefined, timestamps: undefined };
}

export const BlockEvent = {
  encode(message: BlockEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.blockHash !== "") {
      writer.uint32(18).string(message.blockHash);
    }
    if (message.blockNumber !== "") {
      writer.uint32(26).string(message.blockNumber);
    }
    if (message.network !== undefined) {
      BlockEvent_Network.encode(message.network, writer.uint32(34).fork()).ldelim();
    }
    if (message.block !== undefined) {
      BlockEvent_EthBlock.encode(message.block, writer.uint32(42).fork()).ldelim();
    }
    if (message.timestamps !== undefined) {
      TrackingTimestamps.encode(message.timestamps, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BlockEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blockHash = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.blockNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.network = BlockEvent_Network.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.block = BlockEvent_EthBlock.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.timestamps = TrackingTimestamps.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockEvent {
    return {
      type: isSet(object.type) ? blockEvent_EventTypeFromJSON(object.type) : 0,
      blockHash: isSet(object.blockHash) ? globalThis.String(object.blockHash) : "",
      blockNumber: isSet(object.blockNumber) ? globalThis.String(object.blockNumber) : "",
      network: isSet(object.network) ? BlockEvent_Network.fromJSON(object.network) : undefined,
      block: isSet(object.block) ? BlockEvent_EthBlock.fromJSON(object.block) : undefined,
      timestamps: isSet(object.timestamps) ? TrackingTimestamps.fromJSON(object.timestamps) : undefined,
    };
  },

  toJSON(message: BlockEvent): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = blockEvent_EventTypeToJSON(message.type);
    }
    if (message.blockHash !== "") {
      obj.blockHash = message.blockHash;
    }
    if (message.blockNumber !== "") {
      obj.blockNumber = message.blockNumber;
    }
    if (message.network !== undefined) {
      obj.network = BlockEvent_Network.toJSON(message.network);
    }
    if (message.block !== undefined) {
      obj.block = BlockEvent_EthBlock.toJSON(message.block);
    }
    if (message.timestamps !== undefined) {
      obj.timestamps = TrackingTimestamps.toJSON(message.timestamps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockEvent>, I>>(base?: I): BlockEvent {
    return BlockEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockEvent>, I>>(object: I): BlockEvent {
    const message = createBaseBlockEvent();
    message.type = object.type ?? 0;
    message.blockHash = object.blockHash ?? "";
    message.blockNumber = object.blockNumber ?? "";
    message.network = (object.network !== undefined && object.network !== null)
      ? BlockEvent_Network.fromPartial(object.network)
      : undefined;
    message.block = (object.block !== undefined && object.block !== null)
      ? BlockEvent_EthBlock.fromPartial(object.block)
      : undefined;
    message.timestamps = (object.timestamps !== undefined && object.timestamps !== null)
      ? TrackingTimestamps.fromPartial(object.timestamps)
      : undefined;
    return message;
  },
};

function createBaseBlockEvent_Network(): BlockEvent_Network {
  return { chainId: "" };
}

export const BlockEvent_Network = {
  encode(message: BlockEvent_Network, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BlockEvent_Network {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockEvent_Network();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockEvent_Network {
    return { chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "" };
  },

  toJSON(message: BlockEvent_Network): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockEvent_Network>, I>>(base?: I): BlockEvent_Network {
    return BlockEvent_Network.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockEvent_Network>, I>>(object: I): BlockEvent_Network {
    const message = createBaseBlockEvent_Network();
    message.chainId = object.chainId ?? "";
    return message;
  },
};

function createBaseBlockEvent_EthBlock(): BlockEvent_EthBlock {
  return {
    difficulty: "",
    extraData: "",
    gasLimit: "",
    gasUsed: "",
    hash: "",
    logsBloom: "",
    miner: "",
    mixHash: "",
    nonce: "",
    number: "",
    parentHash: "",
    receiptsRoot: "",
    sha3Uncles: "",
    size: "",
    stateRoot: "",
    timestamp: "",
    totalDifficulty: "",
    transactions: [],
    transactionsRoot: "",
    uncles: [],
    baseFeePerGas: "",
  };
}

export const BlockEvent_EthBlock = {
  encode(message: BlockEvent_EthBlock, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.difficulty !== "") {
      writer.uint32(10).string(message.difficulty);
    }
    if (message.extraData !== "") {
      writer.uint32(18).string(message.extraData);
    }
    if (message.gasLimit !== "") {
      writer.uint32(26).string(message.gasLimit);
    }
    if (message.gasUsed !== "") {
      writer.uint32(34).string(message.gasUsed);
    }
    if (message.hash !== "") {
      writer.uint32(42).string(message.hash);
    }
    if (message.logsBloom !== "") {
      writer.uint32(50).string(message.logsBloom);
    }
    if (message.miner !== "") {
      writer.uint32(58).string(message.miner);
    }
    if (message.mixHash !== "") {
      writer.uint32(66).string(message.mixHash);
    }
    if (message.nonce !== "") {
      writer.uint32(74).string(message.nonce);
    }
    if (message.number !== "") {
      writer.uint32(82).string(message.number);
    }
    if (message.parentHash !== "") {
      writer.uint32(90).string(message.parentHash);
    }
    if (message.receiptsRoot !== "") {
      writer.uint32(98).string(message.receiptsRoot);
    }
    if (message.sha3Uncles !== "") {
      writer.uint32(106).string(message.sha3Uncles);
    }
    if (message.size !== "") {
      writer.uint32(114).string(message.size);
    }
    if (message.stateRoot !== "") {
      writer.uint32(122).string(message.stateRoot);
    }
    if (message.timestamp !== "") {
      writer.uint32(130).string(message.timestamp);
    }
    if (message.totalDifficulty !== "") {
      writer.uint32(138).string(message.totalDifficulty);
    }
    for (const v of message.transactions) {
      writer.uint32(146).string(v!);
    }
    if (message.transactionsRoot !== "") {
      writer.uint32(154).string(message.transactionsRoot);
    }
    for (const v of message.uncles) {
      writer.uint32(162).string(v!);
    }
    if (message.baseFeePerGas !== "") {
      writer.uint32(170).string(message.baseFeePerGas);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BlockEvent_EthBlock {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockEvent_EthBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.difficulty = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.extraData = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gasLimit = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.gasUsed = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.hash = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.logsBloom = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.miner = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.mixHash = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.nonce = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.number = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.parentHash = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.receiptsRoot = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.sha3Uncles = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.size = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.stateRoot = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.totalDifficulty = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.transactions.push(reader.string());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.transactionsRoot = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.uncles.push(reader.string());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.baseFeePerGas = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockEvent_EthBlock {
    return {
      difficulty: isSet(object.difficulty) ? globalThis.String(object.difficulty) : "",
      extraData: isSet(object.extraData) ? globalThis.String(object.extraData) : "",
      gasLimit: isSet(object.gasLimit) ? globalThis.String(object.gasLimit) : "",
      gasUsed: isSet(object.gasUsed) ? globalThis.String(object.gasUsed) : "",
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
      logsBloom: isSet(object.logsBloom) ? globalThis.String(object.logsBloom) : "",
      miner: isSet(object.miner) ? globalThis.String(object.miner) : "",
      mixHash: isSet(object.mixHash) ? globalThis.String(object.mixHash) : "",
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      parentHash: isSet(object.parentHash) ? globalThis.String(object.parentHash) : "",
      receiptsRoot: isSet(object.receiptsRoot) ? globalThis.String(object.receiptsRoot) : "",
      sha3Uncles: isSet(object.sha3Uncles) ? globalThis.String(object.sha3Uncles) : "",
      size: isSet(object.size) ? globalThis.String(object.size) : "",
      stateRoot: isSet(object.stateRoot) ? globalThis.String(object.stateRoot) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      totalDifficulty: isSet(object.totalDifficulty) ? globalThis.String(object.totalDifficulty) : "",
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => globalThis.String(e))
        : [],
      transactionsRoot: isSet(object.transactionsRoot) ? globalThis.String(object.transactionsRoot) : "",
      uncles: globalThis.Array.isArray(object?.uncles) ? object.uncles.map((e: any) => globalThis.String(e)) : [],
      baseFeePerGas: isSet(object.baseFeePerGas) ? globalThis.String(object.baseFeePerGas) : "",
    };
  },

  toJSON(message: BlockEvent_EthBlock): unknown {
    const obj: any = {};
    if (message.difficulty !== "") {
      obj.difficulty = message.difficulty;
    }
    if (message.extraData !== "") {
      obj.extraData = message.extraData;
    }
    if (message.gasLimit !== "") {
      obj.gasLimit = message.gasLimit;
    }
    if (message.gasUsed !== "") {
      obj.gasUsed = message.gasUsed;
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if (message.logsBloom !== "") {
      obj.logsBloom = message.logsBloom;
    }
    if (message.miner !== "") {
      obj.miner = message.miner;
    }
    if (message.mixHash !== "") {
      obj.mixHash = message.mixHash;
    }
    if (message.nonce !== "") {
      obj.nonce = message.nonce;
    }
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.parentHash !== "") {
      obj.parentHash = message.parentHash;
    }
    if (message.receiptsRoot !== "") {
      obj.receiptsRoot = message.receiptsRoot;
    }
    if (message.sha3Uncles !== "") {
      obj.sha3Uncles = message.sha3Uncles;
    }
    if (message.size !== "") {
      obj.size = message.size;
    }
    if (message.stateRoot !== "") {
      obj.stateRoot = message.stateRoot;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.totalDifficulty !== "") {
      obj.totalDifficulty = message.totalDifficulty;
    }
    if (message.transactions?.length) {
      obj.transactions = message.transactions;
    }
    if (message.transactionsRoot !== "") {
      obj.transactionsRoot = message.transactionsRoot;
    }
    if (message.uncles?.length) {
      obj.uncles = message.uncles;
    }
    if (message.baseFeePerGas !== "") {
      obj.baseFeePerGas = message.baseFeePerGas;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockEvent_EthBlock>, I>>(base?: I): BlockEvent_EthBlock {
    return BlockEvent_EthBlock.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockEvent_EthBlock>, I>>(object: I): BlockEvent_EthBlock {
    const message = createBaseBlockEvent_EthBlock();
    message.difficulty = object.difficulty ?? "";
    message.extraData = object.extraData ?? "";
    message.gasLimit = object.gasLimit ?? "";
    message.gasUsed = object.gasUsed ?? "";
    message.hash = object.hash ?? "";
    message.logsBloom = object.logsBloom ?? "";
    message.miner = object.miner ?? "";
    message.mixHash = object.mixHash ?? "";
    message.nonce = object.nonce ?? "";
    message.number = object.number ?? "";
    message.parentHash = object.parentHash ?? "";
    message.receiptsRoot = object.receiptsRoot ?? "";
    message.sha3Uncles = object.sha3Uncles ?? "";
    message.size = object.size ?? "";
    message.stateRoot = object.stateRoot ?? "";
    message.timestamp = object.timestamp ?? "";
    message.totalDifficulty = object.totalDifficulty ?? "";
    message.transactions = object.transactions?.map((e) => e) || [];
    message.transactionsRoot = object.transactionsRoot ?? "";
    message.uncles = object.uncles?.map((e) => e) || [];
    message.baseFeePerGas = object.baseFeePerGas ?? "";
    return message;
  },
};

function createBaseTransactionEvent(): TransactionEvent {
  return {
    type: 0,
    transaction: undefined,
    receipt: undefined,
    network: undefined,
    traces: [],
    addresses: {},
    block: undefined,
    logs: [],
    isContractDeployment: false,
    contractAddress: "",
    timestamps: undefined,
    txAddresses: {},
  };
}

export const TransactionEvent = {
  encode(message: TransactionEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.transaction !== undefined) {
      TransactionEvent_EthTransaction.encode(message.transaction, writer.uint32(18).fork()).ldelim();
    }
    if (message.receipt !== undefined) {
      TransactionEvent_EthReceipt.encode(message.receipt, writer.uint32(26).fork()).ldelim();
    }
    if (message.network !== undefined) {
      TransactionEvent_Network.encode(message.network, writer.uint32(34).fork()).ldelim();
    }
    for (const v of message.traces) {
      TransactionEvent_Trace.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    Object.entries(message.addresses).forEach(([key, value]) => {
      TransactionEvent_AddressesEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).ldelim();
    });
    if (message.block !== undefined) {
      TransactionEvent_EthBlock.encode(message.block, writer.uint32(58).fork()).ldelim();
    }
    for (const v of message.logs) {
      TransactionEvent_Log.encode(v!, writer.uint32(66).fork()).ldelim();
    }
    if (message.isContractDeployment !== false) {
      writer.uint32(72).bool(message.isContractDeployment);
    }
    if (message.contractAddress !== "") {
      writer.uint32(82).string(message.contractAddress);
    }
    if (message.timestamps !== undefined) {
      TrackingTimestamps.encode(message.timestamps, writer.uint32(90).fork()).ldelim();
    }
    Object.entries(message.txAddresses).forEach(([key, value]) => {
      TransactionEvent_TxAddressesEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.transaction = TransactionEvent_EthTransaction.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.receipt = TransactionEvent_EthReceipt.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.network = TransactionEvent_Network.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.traces.push(TransactionEvent_Trace.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = TransactionEvent_AddressesEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.addresses[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.block = TransactionEvent_EthBlock.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.logs.push(TransactionEvent_Log.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.isContractDeployment = reader.bool();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.timestamps = TrackingTimestamps.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          const entry12 = TransactionEvent_TxAddressesEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.txAddresses[entry12.key] = entry12.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent {
    return {
      type: isSet(object.type) ? transactionEvent_EventTypeFromJSON(object.type) : 0,
      transaction: isSet(object.transaction) ? TransactionEvent_EthTransaction.fromJSON(object.transaction) : undefined,
      receipt: isSet(object.receipt) ? TransactionEvent_EthReceipt.fromJSON(object.receipt) : undefined,
      network: isSet(object.network) ? TransactionEvent_Network.fromJSON(object.network) : undefined,
      traces: globalThis.Array.isArray(object?.traces)
        ? object.traces.map((e: any) => TransactionEvent_Trace.fromJSON(e))
        : [],
      addresses: isObject(object.addresses)
        ? Object.entries(object.addresses).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
          acc[key] = Boolean(value);
          return acc;
        }, {})
        : {},
      block: isSet(object.block) ? TransactionEvent_EthBlock.fromJSON(object.block) : undefined,
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => TransactionEvent_Log.fromJSON(e)) : [],
      isContractDeployment: isSet(object.isContractDeployment)
        ? globalThis.Boolean(object.isContractDeployment)
        : false,
      contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
      timestamps: isSet(object.timestamps) ? TrackingTimestamps.fromJSON(object.timestamps) : undefined,
      txAddresses: isObject(object.txAddresses)
        ? Object.entries(object.txAddresses).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
          acc[key] = Boolean(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: TransactionEvent): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = transactionEvent_EventTypeToJSON(message.type);
    }
    if (message.transaction !== undefined) {
      obj.transaction = TransactionEvent_EthTransaction.toJSON(message.transaction);
    }
    if (message.receipt !== undefined) {
      obj.receipt = TransactionEvent_EthReceipt.toJSON(message.receipt);
    }
    if (message.network !== undefined) {
      obj.network = TransactionEvent_Network.toJSON(message.network);
    }
    if (message.traces?.length) {
      obj.traces = message.traces.map((e) => TransactionEvent_Trace.toJSON(e));
    }
    if (message.addresses) {
      const entries = Object.entries(message.addresses);
      if (entries.length > 0) {
        obj.addresses = {};
        entries.forEach(([k, v]) => {
          obj.addresses[k] = v;
        });
      }
    }
    if (message.block !== undefined) {
      obj.block = TransactionEvent_EthBlock.toJSON(message.block);
    }
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => TransactionEvent_Log.toJSON(e));
    }
    if (message.isContractDeployment !== false) {
      obj.isContractDeployment = message.isContractDeployment;
    }
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    if (message.timestamps !== undefined) {
      obj.timestamps = TrackingTimestamps.toJSON(message.timestamps);
    }
    if (message.txAddresses) {
      const entries = Object.entries(message.txAddresses);
      if (entries.length > 0) {
        obj.txAddresses = {};
        entries.forEach(([k, v]) => {
          obj.txAddresses[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent>, I>>(base?: I): TransactionEvent {
    return TransactionEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent>, I>>(object: I): TransactionEvent {
    const message = createBaseTransactionEvent();
    message.type = object.type ?? 0;
    message.transaction = (object.transaction !== undefined && object.transaction !== null)
      ? TransactionEvent_EthTransaction.fromPartial(object.transaction)
      : undefined;
    message.receipt = (object.receipt !== undefined && object.receipt !== null)
      ? TransactionEvent_EthReceipt.fromPartial(object.receipt)
      : undefined;
    message.network = (object.network !== undefined && object.network !== null)
      ? TransactionEvent_Network.fromPartial(object.network)
      : undefined;
    message.traces = object.traces?.map((e) => TransactionEvent_Trace.fromPartial(e)) || [];
    message.addresses = Object.entries(object.addresses ?? {}).reduce<{ [key: string]: boolean }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Boolean(value);
        }
        return acc;
      },
      {},
    );
    message.block = (object.block !== undefined && object.block !== null)
      ? TransactionEvent_EthBlock.fromPartial(object.block)
      : undefined;
    message.logs = object.logs?.map((e) => TransactionEvent_Log.fromPartial(e)) || [];
    message.isContractDeployment = object.isContractDeployment ?? false;
    message.contractAddress = object.contractAddress ?? "";
    message.timestamps = (object.timestamps !== undefined && object.timestamps !== null)
      ? TrackingTimestamps.fromPartial(object.timestamps)
      : undefined;
    message.txAddresses = Object.entries(object.txAddresses ?? {}).reduce<{ [key: string]: boolean }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Boolean(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseTransactionEvent_Network(): TransactionEvent_Network {
  return { chainId: "" };
}

export const TransactionEvent_Network = {
  encode(message: TransactionEvent_Network, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionEvent_Network {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_Network();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_Network {
    return { chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "" };
  },

  toJSON(message: TransactionEvent_Network): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_Network>, I>>(base?: I): TransactionEvent_Network {
    return TransactionEvent_Network.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_Network>, I>>(object: I): TransactionEvent_Network {
    const message = createBaseTransactionEvent_Network();
    message.chainId = object.chainId ?? "";
    return message;
  },
};

function createBaseTransactionEvent_EthBlock(): TransactionEvent_EthBlock {
  return { blockHash: "", blockNumber: "", blockTimestamp: "", baseFeePerGas: "" };
}

export const TransactionEvent_EthBlock = {
  encode(message: TransactionEvent_EthBlock, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.blockHash !== "") {
      writer.uint32(10).string(message.blockHash);
    }
    if (message.blockNumber !== "") {
      writer.uint32(18).string(message.blockNumber);
    }
    if (message.blockTimestamp !== "") {
      writer.uint32(26).string(message.blockTimestamp);
    }
    if (message.baseFeePerGas !== "") {
      writer.uint32(34).string(message.baseFeePerGas);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionEvent_EthBlock {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_EthBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.blockHash = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blockNumber = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.blockTimestamp = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.baseFeePerGas = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_EthBlock {
    return {
      blockHash: isSet(object.blockHash) ? globalThis.String(object.blockHash) : "",
      blockNumber: isSet(object.blockNumber) ? globalThis.String(object.blockNumber) : "",
      blockTimestamp: isSet(object.blockTimestamp) ? globalThis.String(object.blockTimestamp) : "",
      baseFeePerGas: isSet(object.baseFeePerGas) ? globalThis.String(object.baseFeePerGas) : "",
    };
  },

  toJSON(message: TransactionEvent_EthBlock): unknown {
    const obj: any = {};
    if (message.blockHash !== "") {
      obj.blockHash = message.blockHash;
    }
    if (message.blockNumber !== "") {
      obj.blockNumber = message.blockNumber;
    }
    if (message.blockTimestamp !== "") {
      obj.blockTimestamp = message.blockTimestamp;
    }
    if (message.baseFeePerGas !== "") {
      obj.baseFeePerGas = message.baseFeePerGas;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_EthBlock>, I>>(base?: I): TransactionEvent_EthBlock {
    return TransactionEvent_EthBlock.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_EthBlock>, I>>(object: I): TransactionEvent_EthBlock {
    const message = createBaseTransactionEvent_EthBlock();
    message.blockHash = object.blockHash ?? "";
    message.blockNumber = object.blockNumber ?? "";
    message.blockTimestamp = object.blockTimestamp ?? "";
    message.baseFeePerGas = object.baseFeePerGas ?? "";
    return message;
  },
};

function createBaseTransactionEvent_EthTransaction(): TransactionEvent_EthTransaction {
  return {
    type: "",
    nonce: "",
    gasPrice: "",
    gas: "",
    value: "",
    input: "",
    v: "",
    r: "",
    s: "",
    to: "",
    hash: "",
    from: "",
    maxFeePerGas: "",
    maxPriorityFeePerGas: "",
  };
}

export const TransactionEvent_EthTransaction = {
  encode(message: TransactionEvent_EthTransaction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.nonce !== "") {
      writer.uint32(18).string(message.nonce);
    }
    if (message.gasPrice !== "") {
      writer.uint32(26).string(message.gasPrice);
    }
    if (message.gas !== "") {
      writer.uint32(34).string(message.gas);
    }
    if (message.value !== "") {
      writer.uint32(42).string(message.value);
    }
    if (message.input !== "") {
      writer.uint32(50).string(message.input);
    }
    if (message.v !== "") {
      writer.uint32(58).string(message.v);
    }
    if (message.r !== "") {
      writer.uint32(66).string(message.r);
    }
    if (message.s !== "") {
      writer.uint32(74).string(message.s);
    }
    if (message.to !== "") {
      writer.uint32(82).string(message.to);
    }
    if (message.hash !== "") {
      writer.uint32(90).string(message.hash);
    }
    if (message.from !== "") {
      writer.uint32(98).string(message.from);
    }
    if (message.maxFeePerGas !== "") {
      writer.uint32(106).string(message.maxFeePerGas);
    }
    if (message.maxPriorityFeePerGas !== "") {
      writer.uint32(114).string(message.maxPriorityFeePerGas);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionEvent_EthTransaction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_EthTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nonce = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gasPrice = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.gas = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.value = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.input = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.v = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.r = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.s = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.to = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.hash = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.from = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.maxFeePerGas = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.maxPriorityFeePerGas = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_EthTransaction {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
      gasPrice: isSet(object.gasPrice) ? globalThis.String(object.gasPrice) : "",
      gas: isSet(object.gas) ? globalThis.String(object.gas) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      input: isSet(object.input) ? globalThis.String(object.input) : "",
      v: isSet(object.v) ? globalThis.String(object.v) : "",
      r: isSet(object.r) ? globalThis.String(object.r) : "",
      s: isSet(object.s) ? globalThis.String(object.s) : "",
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
      from: isSet(object.from) ? globalThis.String(object.from) : "",
      maxFeePerGas: isSet(object.maxFeePerGas) ? globalThis.String(object.maxFeePerGas) : "",
      maxPriorityFeePerGas: isSet(object.maxPriorityFeePerGas) ? globalThis.String(object.maxPriorityFeePerGas) : "",
    };
  },

  toJSON(message: TransactionEvent_EthTransaction): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.nonce !== "") {
      obj.nonce = message.nonce;
    }
    if (message.gasPrice !== "") {
      obj.gasPrice = message.gasPrice;
    }
    if (message.gas !== "") {
      obj.gas = message.gas;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.input !== "") {
      obj.input = message.input;
    }
    if (message.v !== "") {
      obj.v = message.v;
    }
    if (message.r !== "") {
      obj.r = message.r;
    }
    if (message.s !== "") {
      obj.s = message.s;
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if (message.from !== "") {
      obj.from = message.from;
    }
    if (message.maxFeePerGas !== "") {
      obj.maxFeePerGas = message.maxFeePerGas;
    }
    if (message.maxPriorityFeePerGas !== "") {
      obj.maxPriorityFeePerGas = message.maxPriorityFeePerGas;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_EthTransaction>, I>>(base?: I): TransactionEvent_EthTransaction {
    return TransactionEvent_EthTransaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_EthTransaction>, I>>(
    object: I,
  ): TransactionEvent_EthTransaction {
    const message = createBaseTransactionEvent_EthTransaction();
    message.type = object.type ?? "";
    message.nonce = object.nonce ?? "";
    message.gasPrice = object.gasPrice ?? "";
    message.gas = object.gas ?? "";
    message.value = object.value ?? "";
    message.input = object.input ?? "";
    message.v = object.v ?? "";
    message.r = object.r ?? "";
    message.s = object.s ?? "";
    message.to = object.to ?? "";
    message.hash = object.hash ?? "";
    message.from = object.from ?? "";
    message.maxFeePerGas = object.maxFeePerGas ?? "";
    message.maxPriorityFeePerGas = object.maxPriorityFeePerGas ?? "";
    return message;
  },
};

function createBaseTransactionEvent_Log(): TransactionEvent_Log {
  return {
    address: "",
    topics: [],
    data: "",
    blockNumber: "",
    transactionHash: "",
    transactionIndex: "",
    blockHash: "",
    logIndex: "",
    removed: false,
  };
}

export const TransactionEvent_Log = {
  encode(message: TransactionEvent_Log, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.topics) {
      writer.uint32(18).string(v!);
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    if (message.blockNumber !== "") {
      writer.uint32(34).string(message.blockNumber);
    }
    if (message.transactionHash !== "") {
      writer.uint32(42).string(message.transactionHash);
    }
    if (message.transactionIndex !== "") {
      writer.uint32(50).string(message.transactionIndex);
    }
    if (message.blockHash !== "") {
      writer.uint32(58).string(message.blockHash);
    }
    if (message.logIndex !== "") {
      writer.uint32(66).string(message.logIndex);
    }
    if (message.removed !== false) {
      writer.uint32(72).bool(message.removed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionEvent_Log {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_Log();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.topics.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.blockNumber = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.transactionHash = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.transactionIndex = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.blockHash = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.logIndex = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.removed = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_Log {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      topics: globalThis.Array.isArray(object?.topics) ? object.topics.map((e: any) => globalThis.String(e)) : [],
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      blockNumber: isSet(object.blockNumber) ? globalThis.String(object.blockNumber) : "",
      transactionHash: isSet(object.transactionHash) ? globalThis.String(object.transactionHash) : "",
      transactionIndex: isSet(object.transactionIndex) ? globalThis.String(object.transactionIndex) : "",
      blockHash: isSet(object.blockHash) ? globalThis.String(object.blockHash) : "",
      logIndex: isSet(object.logIndex) ? globalThis.String(object.logIndex) : "",
      removed: isSet(object.removed) ? globalThis.Boolean(object.removed) : false,
    };
  },

  toJSON(message: TransactionEvent_Log): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.topics?.length) {
      obj.topics = message.topics;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.blockNumber !== "") {
      obj.blockNumber = message.blockNumber;
    }
    if (message.transactionHash !== "") {
      obj.transactionHash = message.transactionHash;
    }
    if (message.transactionIndex !== "") {
      obj.transactionIndex = message.transactionIndex;
    }
    if (message.blockHash !== "") {
      obj.blockHash = message.blockHash;
    }
    if (message.logIndex !== "") {
      obj.logIndex = message.logIndex;
    }
    if (message.removed !== false) {
      obj.removed = message.removed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_Log>, I>>(base?: I): TransactionEvent_Log {
    return TransactionEvent_Log.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_Log>, I>>(object: I): TransactionEvent_Log {
    const message = createBaseTransactionEvent_Log();
    message.address = object.address ?? "";
    message.topics = object.topics?.map((e) => e) || [];
    message.data = object.data ?? "";
    message.blockNumber = object.blockNumber ?? "";
    message.transactionHash = object.transactionHash ?? "";
    message.transactionIndex = object.transactionIndex ?? "";
    message.blockHash = object.blockHash ?? "";
    message.logIndex = object.logIndex ?? "";
    message.removed = object.removed ?? false;
    return message;
  },
};

function createBaseTransactionEvent_EthReceipt(): TransactionEvent_EthReceipt {
  return {
    root: "",
    status: "",
    cumulativeGasUsed: "",
    logsBloom: "",
    logs: [],
    transactionHash: "",
    contractAddress: "",
    gasUsed: "",
    blockHash: "",
    blockNumber: "",
    transactionIndex: "",
  };
}

export const TransactionEvent_EthReceipt = {
  encode(message: TransactionEvent_EthReceipt, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.root !== "") {
      writer.uint32(10).string(message.root);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.cumulativeGasUsed !== "") {
      writer.uint32(26).string(message.cumulativeGasUsed);
    }
    if (message.logsBloom !== "") {
      writer.uint32(34).string(message.logsBloom);
    }
    for (const v of message.logs) {
      TransactionEvent_Log.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    if (message.transactionHash !== "") {
      writer.uint32(50).string(message.transactionHash);
    }
    if (message.contractAddress !== "") {
      writer.uint32(58).string(message.contractAddress);
    }
    if (message.gasUsed !== "") {
      writer.uint32(66).string(message.gasUsed);
    }
    if (message.blockHash !== "") {
      writer.uint32(74).string(message.blockHash);
    }
    if (message.blockNumber !== "") {
      writer.uint32(82).string(message.blockNumber);
    }
    if (message.transactionIndex !== "") {
      writer.uint32(90).string(message.transactionIndex);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionEvent_EthReceipt {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_EthReceipt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.root = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cumulativeGasUsed = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.logsBloom = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.logs.push(TransactionEvent_Log.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.transactionHash = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.gasUsed = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.blockHash = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.blockNumber = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.transactionIndex = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_EthReceipt {
    return {
      root: isSet(object.root) ? globalThis.String(object.root) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      cumulativeGasUsed: isSet(object.cumulativeGasUsed) ? globalThis.String(object.cumulativeGasUsed) : "",
      logsBloom: isSet(object.logsBloom) ? globalThis.String(object.logsBloom) : "",
      logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e: any) => TransactionEvent_Log.fromJSON(e)) : [],
      transactionHash: isSet(object.transactionHash) ? globalThis.String(object.transactionHash) : "",
      contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
      gasUsed: isSet(object.gasUsed) ? globalThis.String(object.gasUsed) : "",
      blockHash: isSet(object.blockHash) ? globalThis.String(object.blockHash) : "",
      blockNumber: isSet(object.blockNumber) ? globalThis.String(object.blockNumber) : "",
      transactionIndex: isSet(object.transactionIndex) ? globalThis.String(object.transactionIndex) : "",
    };
  },

  toJSON(message: TransactionEvent_EthReceipt): unknown {
    const obj: any = {};
    if (message.root !== "") {
      obj.root = message.root;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.cumulativeGasUsed !== "") {
      obj.cumulativeGasUsed = message.cumulativeGasUsed;
    }
    if (message.logsBloom !== "") {
      obj.logsBloom = message.logsBloom;
    }
    if (message.logs?.length) {
      obj.logs = message.logs.map((e) => TransactionEvent_Log.toJSON(e));
    }
    if (message.transactionHash !== "") {
      obj.transactionHash = message.transactionHash;
    }
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    if (message.gasUsed !== "") {
      obj.gasUsed = message.gasUsed;
    }
    if (message.blockHash !== "") {
      obj.blockHash = message.blockHash;
    }
    if (message.blockNumber !== "") {
      obj.blockNumber = message.blockNumber;
    }
    if (message.transactionIndex !== "") {
      obj.transactionIndex = message.transactionIndex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_EthReceipt>, I>>(base?: I): TransactionEvent_EthReceipt {
    return TransactionEvent_EthReceipt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_EthReceipt>, I>>(object: I): TransactionEvent_EthReceipt {
    const message = createBaseTransactionEvent_EthReceipt();
    message.root = object.root ?? "";
    message.status = object.status ?? "";
    message.cumulativeGasUsed = object.cumulativeGasUsed ?? "";
    message.logsBloom = object.logsBloom ?? "";
    message.logs = object.logs?.map((e) => TransactionEvent_Log.fromPartial(e)) || [];
    message.transactionHash = object.transactionHash ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.gasUsed = object.gasUsed ?? "";
    message.blockHash = object.blockHash ?? "";
    message.blockNumber = object.blockNumber ?? "";
    message.transactionIndex = object.transactionIndex ?? "";
    return message;
  },
};

function createBaseTransactionEvent_TraceAction(): TransactionEvent_TraceAction {
  return {
    callType: "",
    to: "",
    input: "",
    from: "",
    value: "",
    init: "",
    address: "",
    balance: "",
    refundAddress: "",
  };
}

export const TransactionEvent_TraceAction = {
  encode(message: TransactionEvent_TraceAction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.callType !== "") {
      writer.uint32(10).string(message.callType);
    }
    if (message.to !== "") {
      writer.uint32(18).string(message.to);
    }
    if (message.input !== "") {
      writer.uint32(26).string(message.input);
    }
    if (message.from !== "") {
      writer.uint32(34).string(message.from);
    }
    if (message.value !== "") {
      writer.uint32(42).string(message.value);
    }
    if (message.init !== "") {
      writer.uint32(50).string(message.init);
    }
    if (message.address !== "") {
      writer.uint32(58).string(message.address);
    }
    if (message.balance !== "") {
      writer.uint32(66).string(message.balance);
    }
    if (message.refundAddress !== "") {
      writer.uint32(74).string(message.refundAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionEvent_TraceAction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_TraceAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.callType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.to = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.input = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.from = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.value = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.init = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.address = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.balance = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.refundAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_TraceAction {
    return {
      callType: isSet(object.callType) ? globalThis.String(object.callType) : "",
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      input: isSet(object.input) ? globalThis.String(object.input) : "",
      from: isSet(object.from) ? globalThis.String(object.from) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      init: isSet(object.init) ? globalThis.String(object.init) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      balance: isSet(object.balance) ? globalThis.String(object.balance) : "",
      refundAddress: isSet(object.refundAddress) ? globalThis.String(object.refundAddress) : "",
    };
  },

  toJSON(message: TransactionEvent_TraceAction): unknown {
    const obj: any = {};
    if (message.callType !== "") {
      obj.callType = message.callType;
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.input !== "") {
      obj.input = message.input;
    }
    if (message.from !== "") {
      obj.from = message.from;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.init !== "") {
      obj.init = message.init;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.balance !== "") {
      obj.balance = message.balance;
    }
    if (message.refundAddress !== "") {
      obj.refundAddress = message.refundAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_TraceAction>, I>>(base?: I): TransactionEvent_TraceAction {
    return TransactionEvent_TraceAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_TraceAction>, I>>(object: I): TransactionEvent_TraceAction {
    const message = createBaseTransactionEvent_TraceAction();
    message.callType = object.callType ?? "";
    message.to = object.to ?? "";
    message.input = object.input ?? "";
    message.from = object.from ?? "";
    message.value = object.value ?? "";
    message.init = object.init ?? "";
    message.address = object.address ?? "";
    message.balance = object.balance ?? "";
    message.refundAddress = object.refundAddress ?? "";
    return message;
  },
};

function createBaseTransactionEvent_TraceResult(): TransactionEvent_TraceResult {
  return { gasUsed: "", address: "", code: "", output: "" };
}

export const TransactionEvent_TraceResult = {
  encode(message: TransactionEvent_TraceResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.gasUsed !== "") {
      writer.uint32(10).string(message.gasUsed);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.code !== "") {
      writer.uint32(26).string(message.code);
    }
    if (message.output !== "") {
      writer.uint32(34).string(message.output);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionEvent_TraceResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_TraceResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gasUsed = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.code = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.output = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_TraceResult {
    return {
      gasUsed: isSet(object.gasUsed) ? globalThis.String(object.gasUsed) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      output: isSet(object.output) ? globalThis.String(object.output) : "",
    };
  },

  toJSON(message: TransactionEvent_TraceResult): unknown {
    const obj: any = {};
    if (message.gasUsed !== "") {
      obj.gasUsed = message.gasUsed;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.output !== "") {
      obj.output = message.output;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_TraceResult>, I>>(base?: I): TransactionEvent_TraceResult {
    return TransactionEvent_TraceResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_TraceResult>, I>>(object: I): TransactionEvent_TraceResult {
    const message = createBaseTransactionEvent_TraceResult();
    message.gasUsed = object.gasUsed ?? "";
    message.address = object.address ?? "";
    message.code = object.code ?? "";
    message.output = object.output ?? "";
    return message;
  },
};

function createBaseTransactionEvent_Trace(): TransactionEvent_Trace {
  return {
    action: undefined,
    blockHash: "",
    blockNumber: 0,
    result: undefined,
    subtraces: 0,
    traceAddress: [],
    transactionHash: "",
    transactionPosition: 0,
    type: "",
    error: "",
  };
}

export const TransactionEvent_Trace = {
  encode(message: TransactionEvent_Trace, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.action !== undefined) {
      TransactionEvent_TraceAction.encode(message.action, writer.uint32(10).fork()).ldelim();
    }
    if (message.blockHash !== "") {
      writer.uint32(18).string(message.blockHash);
    }
    if (message.blockNumber !== 0) {
      writer.uint32(24).int64(message.blockNumber);
    }
    if (message.result !== undefined) {
      TransactionEvent_TraceResult.encode(message.result, writer.uint32(34).fork()).ldelim();
    }
    if (message.subtraces !== 0) {
      writer.uint32(40).int64(message.subtraces);
    }
    writer.uint32(50).fork();
    for (const v of message.traceAddress) {
      writer.int64(v);
    }
    writer.ldelim();
    if (message.transactionHash !== "") {
      writer.uint32(58).string(message.transactionHash);
    }
    if (message.transactionPosition !== 0) {
      writer.uint32(64).int64(message.transactionPosition);
    }
    if (message.type !== "") {
      writer.uint32(74).string(message.type);
    }
    if (message.error !== "") {
      writer.uint32(82).string(message.error);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionEvent_Trace {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_Trace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.action = TransactionEvent_TraceAction.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blockHash = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.blockNumber = longToNumber(reader.int64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.result = TransactionEvent_TraceResult.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.subtraces = longToNumber(reader.int64() as Long);
          continue;
        case 6:
          if (tag === 48) {
            message.traceAddress.push(longToNumber(reader.int64() as Long));

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.traceAddress.push(longToNumber(reader.int64() as Long));
            }

            continue;
          }

          break;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.transactionHash = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.transactionPosition = longToNumber(reader.int64() as Long);
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.type = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_Trace {
    return {
      action: isSet(object.action) ? TransactionEvent_TraceAction.fromJSON(object.action) : undefined,
      blockHash: isSet(object.blockHash) ? globalThis.String(object.blockHash) : "",
      blockNumber: isSet(object.blockNumber) ? globalThis.Number(object.blockNumber) : 0,
      result: isSet(object.result) ? TransactionEvent_TraceResult.fromJSON(object.result) : undefined,
      subtraces: isSet(object.subtraces) ? globalThis.Number(object.subtraces) : 0,
      traceAddress: globalThis.Array.isArray(object?.traceAddress)
        ? object.traceAddress.map((e: any) => globalThis.Number(e))
        : [],
      transactionHash: isSet(object.transactionHash) ? globalThis.String(object.transactionHash) : "",
      transactionPosition: isSet(object.transactionPosition) ? globalThis.Number(object.transactionPosition) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: TransactionEvent_Trace): unknown {
    const obj: any = {};
    if (message.action !== undefined) {
      obj.action = TransactionEvent_TraceAction.toJSON(message.action);
    }
    if (message.blockHash !== "") {
      obj.blockHash = message.blockHash;
    }
    if (message.blockNumber !== 0) {
      obj.blockNumber = Math.round(message.blockNumber);
    }
    if (message.result !== undefined) {
      obj.result = TransactionEvent_TraceResult.toJSON(message.result);
    }
    if (message.subtraces !== 0) {
      obj.subtraces = Math.round(message.subtraces);
    }
    if (message.traceAddress?.length) {
      obj.traceAddress = message.traceAddress.map((e) => Math.round(e));
    }
    if (message.transactionHash !== "") {
      obj.transactionHash = message.transactionHash;
    }
    if (message.transactionPosition !== 0) {
      obj.transactionPosition = Math.round(message.transactionPosition);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_Trace>, I>>(base?: I): TransactionEvent_Trace {
    return TransactionEvent_Trace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_Trace>, I>>(object: I): TransactionEvent_Trace {
    const message = createBaseTransactionEvent_Trace();
    message.action = (object.action !== undefined && object.action !== null)
      ? TransactionEvent_TraceAction.fromPartial(object.action)
      : undefined;
    message.blockHash = object.blockHash ?? "";
    message.blockNumber = object.blockNumber ?? 0;
    message.result = (object.result !== undefined && object.result !== null)
      ? TransactionEvent_TraceResult.fromPartial(object.result)
      : undefined;
    message.subtraces = object.subtraces ?? 0;
    message.traceAddress = object.traceAddress?.map((e) => e) || [];
    message.transactionHash = object.transactionHash ?? "";
    message.transactionPosition = object.transactionPosition ?? 0;
    message.type = object.type ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseTransactionEvent_AddressesEntry(): TransactionEvent_AddressesEntry {
  return { key: "", value: false };
}

export const TransactionEvent_AddressesEntry = {
  encode(message: TransactionEvent_AddressesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionEvent_AddressesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_AddressesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_AddressesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
    };
  },

  toJSON(message: TransactionEvent_AddressesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_AddressesEntry>, I>>(base?: I): TransactionEvent_AddressesEntry {
    return TransactionEvent_AddressesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_AddressesEntry>, I>>(
    object: I,
  ): TransactionEvent_AddressesEntry {
    const message = createBaseTransactionEvent_AddressesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseTransactionEvent_TxAddressesEntry(): TransactionEvent_TxAddressesEntry {
  return { key: "", value: false };
}

export const TransactionEvent_TxAddressesEntry = {
  encode(message: TransactionEvent_TxAddressesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionEvent_TxAddressesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionEvent_TxAddressesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionEvent_TxAddressesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
    };
  },

  toJSON(message: TransactionEvent_TxAddressesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionEvent_TxAddressesEntry>, I>>(
    base?: I,
  ): TransactionEvent_TxAddressesEntry {
    return TransactionEvent_TxAddressesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionEvent_TxAddressesEntry>, I>>(
    object: I,
  ): TransactionEvent_TxAddressesEntry {
    const message = createBaseTransactionEvent_TxAddressesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseAlertEvent(): AlertEvent {
  return { alert: undefined, timestamps: undefined };
}

export const AlertEvent = {
  encode(message: AlertEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.alert !== undefined) {
      AlertEvent_Alert.encode(message.alert, writer.uint32(10).fork()).ldelim();
    }
    if (message.timestamps !== undefined) {
      TrackingTimestamps.encode(message.timestamps, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AlertEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.alert = AlertEvent_Alert.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timestamps = TrackingTimestamps.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertEvent {
    return {
      alert: isSet(object.alert) ? AlertEvent_Alert.fromJSON(object.alert) : undefined,
      timestamps: isSet(object.timestamps) ? TrackingTimestamps.fromJSON(object.timestamps) : undefined,
    };
  },

  toJSON(message: AlertEvent): unknown {
    const obj: any = {};
    if (message.alert !== undefined) {
      obj.alert = AlertEvent_Alert.toJSON(message.alert);
    }
    if (message.timestamps !== undefined) {
      obj.timestamps = TrackingTimestamps.toJSON(message.timestamps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertEvent>, I>>(base?: I): AlertEvent {
    return AlertEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertEvent>, I>>(object: I): AlertEvent {
    const message = createBaseAlertEvent();
    message.alert = (object.alert !== undefined && object.alert !== null)
      ? AlertEvent_Alert.fromPartial(object.alert)
      : undefined;
    message.timestamps = (object.timestamps !== undefined && object.timestamps !== null)
      ? TrackingTimestamps.fromPartial(object.timestamps)
      : undefined;
    return message;
  },
};

function createBaseAlertEvent_Alert(): AlertEvent_Alert {
  return {
    alertId: "",
    addresses: [],
    contracts: [],
    createdAt: "",
    description: "",
    hash: "",
    metadata: {},
    name: "",
    projects: [],
    scanNodeCount: 0,
    severity: "",
    source: undefined,
    findingType: "",
    relatedAlerts: [],
    chainId: 0,
    labels: [],
    truncated: false,
    addressBloomFilter: undefined,
  };
}

export const AlertEvent_Alert = {
  encode(message: AlertEvent_Alert, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.alertId !== "") {
      writer.uint32(10).string(message.alertId);
    }
    for (const v of message.addresses) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.contracts) {
      AlertEvent_Alert_Contract.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.hash !== "") {
      writer.uint32(50).string(message.hash);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      AlertEvent_Alert_MetadataEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).ldelim();
    });
    if (message.name !== "") {
      writer.uint32(66).string(message.name);
    }
    for (const v of message.projects) {
      AlertEvent_Alert_Project.encode(v!, writer.uint32(74).fork()).ldelim();
    }
    if (message.scanNodeCount !== 0) {
      writer.uint32(80).int32(message.scanNodeCount);
    }
    if (message.severity !== "") {
      writer.uint32(90).string(message.severity);
    }
    if (message.source !== undefined) {
      AlertEvent_Alert_Source.encode(message.source, writer.uint32(98).fork()).ldelim();
    }
    if (message.findingType !== "") {
      writer.uint32(106).string(message.findingType);
    }
    for (const v of message.relatedAlerts) {
      writer.uint32(114).string(v!);
    }
    if (message.chainId !== 0) {
      writer.uint32(120).uint64(message.chainId);
    }
    for (const v of message.labels) {
      AlertEvent_Alert_Label.encode(v!, writer.uint32(130).fork()).ldelim();
    }
    if (message.truncated !== false) {
      writer.uint32(136).bool(message.truncated);
    }
    if (message.addressBloomFilter !== undefined) {
      BloomFilter.encode(message.addressBloomFilter, writer.uint32(146).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AlertEvent_Alert {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertEvent_Alert();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.alertId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.addresses.push(reader.string());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contracts.push(AlertEvent_Alert_Contract.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.hash = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = AlertEvent_Alert_MetadataEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.metadata[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.name = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.projects.push(AlertEvent_Alert_Project.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.scanNodeCount = reader.int32();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.severity = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.source = AlertEvent_Alert_Source.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.findingType = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.relatedAlerts.push(reader.string());
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.chainId = longToNumber(reader.uint64() as Long);
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.labels.push(AlertEvent_Alert_Label.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.truncated = reader.bool();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.addressBloomFilter = BloomFilter.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertEvent_Alert {
    return {
      alertId: isSet(object.alertId) ? globalThis.String(object.alertId) : "",
      addresses: globalThis.Array.isArray(object?.addresses)
        ? object.addresses.map((e: any) => globalThis.String(e))
        : [],
      contracts: globalThis.Array.isArray(object?.contracts)
        ? object.contracts.map((e: any) => AlertEvent_Alert_Contract.fromJSON(e))
        : [],
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      projects: globalThis.Array.isArray(object?.projects)
        ? object.projects.map((e: any) => AlertEvent_Alert_Project.fromJSON(e))
        : [],
      scanNodeCount: isSet(object.scanNodeCount) ? globalThis.Number(object.scanNodeCount) : 0,
      severity: isSet(object.severity) ? globalThis.String(object.severity) : "",
      source: isSet(object.source) ? AlertEvent_Alert_Source.fromJSON(object.source) : undefined,
      findingType: isSet(object.findingType) ? globalThis.String(object.findingType) : "",
      relatedAlerts: globalThis.Array.isArray(object?.relatedAlerts)
        ? object.relatedAlerts.map((e: any) => globalThis.String(e))
        : [],
      chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
      labels: globalThis.Array.isArray(object?.labels)
        ? object.labels.map((e: any) => AlertEvent_Alert_Label.fromJSON(e))
        : [],
      truncated: isSet(object.truncated) ? globalThis.Boolean(object.truncated) : false,
      addressBloomFilter: isSet(object.addressBloomFilter)
        ? BloomFilter.fromJSON(object.addressBloomFilter)
        : undefined,
    };
  },

  toJSON(message: AlertEvent_Alert): unknown {
    const obj: any = {};
    if (message.alertId !== "") {
      obj.alertId = message.alertId;
    }
    if (message.addresses?.length) {
      obj.addresses = message.addresses;
    }
    if (message.contracts?.length) {
      obj.contracts = message.contracts.map((e) => AlertEvent_Alert_Contract.toJSON(e));
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.projects?.length) {
      obj.projects = message.projects.map((e) => AlertEvent_Alert_Project.toJSON(e));
    }
    if (message.scanNodeCount !== 0) {
      obj.scanNodeCount = Math.round(message.scanNodeCount);
    }
    if (message.severity !== "") {
      obj.severity = message.severity;
    }
    if (message.source !== undefined) {
      obj.source = AlertEvent_Alert_Source.toJSON(message.source);
    }
    if (message.findingType !== "") {
      obj.findingType = message.findingType;
    }
    if (message.relatedAlerts?.length) {
      obj.relatedAlerts = message.relatedAlerts;
    }
    if (message.chainId !== 0) {
      obj.chainId = Math.round(message.chainId);
    }
    if (message.labels?.length) {
      obj.labels = message.labels.map((e) => AlertEvent_Alert_Label.toJSON(e));
    }
    if (message.truncated !== false) {
      obj.truncated = message.truncated;
    }
    if (message.addressBloomFilter !== undefined) {
      obj.addressBloomFilter = BloomFilter.toJSON(message.addressBloomFilter);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertEvent_Alert>, I>>(base?: I): AlertEvent_Alert {
    return AlertEvent_Alert.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertEvent_Alert>, I>>(object: I): AlertEvent_Alert {
    const message = createBaseAlertEvent_Alert();
    message.alertId = object.alertId ?? "";
    message.addresses = object.addresses?.map((e) => e) || [];
    message.contracts = object.contracts?.map((e) => AlertEvent_Alert_Contract.fromPartial(e)) || [];
    message.createdAt = object.createdAt ?? "";
    message.description = object.description ?? "";
    message.hash = object.hash ?? "";
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.name = object.name ?? "";
    message.projects = object.projects?.map((e) => AlertEvent_Alert_Project.fromPartial(e)) || [];
    message.scanNodeCount = object.scanNodeCount ?? 0;
    message.severity = object.severity ?? "";
    message.source = (object.source !== undefined && object.source !== null)
      ? AlertEvent_Alert_Source.fromPartial(object.source)
      : undefined;
    message.findingType = object.findingType ?? "";
    message.relatedAlerts = object.relatedAlerts?.map((e) => e) || [];
    message.chainId = object.chainId ?? 0;
    message.labels = object.labels?.map((e) => AlertEvent_Alert_Label.fromPartial(e)) || [];
    message.truncated = object.truncated ?? false;
    message.addressBloomFilter = (object.addressBloomFilter !== undefined && object.addressBloomFilter !== null)
      ? BloomFilter.fromPartial(object.addressBloomFilter)
      : undefined;
    return message;
  },
};

function createBaseAlertEvent_Alert_Contract(): AlertEvent_Alert_Contract {
  return { name: "", projectId: "" };
}

export const AlertEvent_Alert_Contract = {
  encode(message: AlertEvent_Alert_Contract, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AlertEvent_Alert_Contract {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertEvent_Alert_Contract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertEvent_Alert_Contract {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
    };
  },

  toJSON(message: AlertEvent_Alert_Contract): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertEvent_Alert_Contract>, I>>(base?: I): AlertEvent_Alert_Contract {
    return AlertEvent_Alert_Contract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertEvent_Alert_Contract>, I>>(object: I): AlertEvent_Alert_Contract {
    const message = createBaseAlertEvent_Alert_Contract();
    message.name = object.name ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseAlertEvent_Alert_Project(): AlertEvent_Alert_Project {
  return { id: "" };
}

export const AlertEvent_Alert_Project = {
  encode(message: AlertEvent_Alert_Project, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AlertEvent_Alert_Project {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertEvent_Alert_Project();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertEvent_Alert_Project {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: AlertEvent_Alert_Project): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertEvent_Alert_Project>, I>>(base?: I): AlertEvent_Alert_Project {
    return AlertEvent_Alert_Project.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertEvent_Alert_Project>, I>>(object: I): AlertEvent_Alert_Project {
    const message = createBaseAlertEvent_Alert_Project();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseAlertEvent_Alert_Block(): AlertEvent_Alert_Block {
  return { number: 0, hash: "", timestamp: "", chainId: 0 };
}

export const AlertEvent_Alert_Block = {
  encode(message: AlertEvent_Alert_Block, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.number !== 0) {
      writer.uint32(8).uint64(message.number);
    }
    if (message.hash !== "") {
      writer.uint32(18).string(message.hash);
    }
    if (message.timestamp !== "") {
      writer.uint32(26).string(message.timestamp);
    }
    if (message.chainId !== 0) {
      writer.uint32(32).uint64(message.chainId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AlertEvent_Alert_Block {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertEvent_Alert_Block();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.number = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hash = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.chainId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertEvent_Alert_Block {
    return {
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
    };
  },

  toJSON(message: AlertEvent_Alert_Block): unknown {
    const obj: any = {};
    if (message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.chainId !== 0) {
      obj.chainId = Math.round(message.chainId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertEvent_Alert_Block>, I>>(base?: I): AlertEvent_Alert_Block {
    return AlertEvent_Alert_Block.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertEvent_Alert_Block>, I>>(object: I): AlertEvent_Alert_Block {
    const message = createBaseAlertEvent_Alert_Block();
    message.number = object.number ?? 0;
    message.hash = object.hash ?? "";
    message.timestamp = object.timestamp ?? "";
    message.chainId = object.chainId ?? 0;
    return message;
  },
};

function createBaseAlertEvent_Alert_Bot(): AlertEvent_Alert_Bot {
  return {
    chainIds: [],
    createdAt: "",
    description: "",
    developer: "",
    DocReference: "",
    enabled: false,
    id: "",
    image: "",
    name: "",
    reference: "",
    repository: "",
    projects: [],
    scanNodes: [],
    version: "",
  };
}

export const AlertEvent_Alert_Bot = {
  encode(message: AlertEvent_Alert_Bot, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.chainIds) {
      writer.uint32(10).string(v!);
    }
    if (message.createdAt !== "") {
      writer.uint32(18).string(message.createdAt);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.developer !== "") {
      writer.uint32(34).string(message.developer);
    }
    if (message.DocReference !== "") {
      writer.uint32(42).string(message.DocReference);
    }
    if (message.enabled !== false) {
      writer.uint32(48).bool(message.enabled);
    }
    if (message.id !== "") {
      writer.uint32(58).string(message.id);
    }
    if (message.image !== "") {
      writer.uint32(66).string(message.image);
    }
    if (message.name !== "") {
      writer.uint32(74).string(message.name);
    }
    if (message.reference !== "") {
      writer.uint32(82).string(message.reference);
    }
    if (message.repository !== "") {
      writer.uint32(90).string(message.repository);
    }
    for (const v of message.projects) {
      writer.uint32(98).string(v!);
    }
    for (const v of message.scanNodes) {
      writer.uint32(106).string(v!);
    }
    if (message.version !== "") {
      writer.uint32(114).string(message.version);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AlertEvent_Alert_Bot {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertEvent_Alert_Bot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chainIds.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.developer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.DocReference = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.id = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.image = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.name = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.reference = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.repository = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.projects.push(reader.string());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.scanNodes.push(reader.string());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertEvent_Alert_Bot {
    return {
      chainIds: globalThis.Array.isArray(object?.chainIds) ? object.chainIds.map((e: any) => globalThis.String(e)) : [],
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      developer: isSet(object.developer) ? globalThis.String(object.developer) : "",
      DocReference: isSet(object.DocReference) ? globalThis.String(object.DocReference) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      reference: isSet(object.reference) ? globalThis.String(object.reference) : "",
      repository: isSet(object.repository) ? globalThis.String(object.repository) : "",
      projects: globalThis.Array.isArray(object?.projects) ? object.projects.map((e: any) => globalThis.String(e)) : [],
      scanNodes: globalThis.Array.isArray(object?.scanNodes)
        ? object.scanNodes.map((e: any) => globalThis.String(e))
        : [],
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: AlertEvent_Alert_Bot): unknown {
    const obj: any = {};
    if (message.chainIds?.length) {
      obj.chainIds = message.chainIds;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.developer !== "") {
      obj.developer = message.developer;
    }
    if (message.DocReference !== "") {
      obj.DocReference = message.DocReference;
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.reference !== "") {
      obj.reference = message.reference;
    }
    if (message.repository !== "") {
      obj.repository = message.repository;
    }
    if (message.projects?.length) {
      obj.projects = message.projects;
    }
    if (message.scanNodes?.length) {
      obj.scanNodes = message.scanNodes;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertEvent_Alert_Bot>, I>>(base?: I): AlertEvent_Alert_Bot {
    return AlertEvent_Alert_Bot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertEvent_Alert_Bot>, I>>(object: I): AlertEvent_Alert_Bot {
    const message = createBaseAlertEvent_Alert_Bot();
    message.chainIds = object.chainIds?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? "";
    message.description = object.description ?? "";
    message.developer = object.developer ?? "";
    message.DocReference = object.DocReference ?? "";
    message.enabled = object.enabled ?? false;
    message.id = object.id ?? "";
    message.image = object.image ?? "";
    message.name = object.name ?? "";
    message.reference = object.reference ?? "";
    message.repository = object.repository ?? "";
    message.projects = object.projects?.map((e) => e) || [];
    message.scanNodes = object.scanNodes?.map((e) => e) || [];
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseAlertEvent_Alert_SourceAlertEvent(): AlertEvent_Alert_SourceAlertEvent {
  return { botId: "", hash: "", timestamp: "", chainId: 0 };
}

export const AlertEvent_Alert_SourceAlertEvent = {
  encode(message: AlertEvent_Alert_SourceAlertEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.botId !== "") {
      writer.uint32(10).string(message.botId);
    }
    if (message.hash !== "") {
      writer.uint32(18).string(message.hash);
    }
    if (message.timestamp !== "") {
      writer.uint32(26).string(message.timestamp);
    }
    if (message.chainId !== 0) {
      writer.uint32(32).uint64(message.chainId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AlertEvent_Alert_SourceAlertEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertEvent_Alert_SourceAlertEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.botId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hash = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.timestamp = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.chainId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertEvent_Alert_SourceAlertEvent {
    return {
      botId: isSet(object.botId) ? globalThis.String(object.botId) : "",
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
      chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
    };
  },

  toJSON(message: AlertEvent_Alert_SourceAlertEvent): unknown {
    const obj: any = {};
    if (message.botId !== "") {
      obj.botId = message.botId;
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    if (message.timestamp !== "") {
      obj.timestamp = message.timestamp;
    }
    if (message.chainId !== 0) {
      obj.chainId = Math.round(message.chainId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertEvent_Alert_SourceAlertEvent>, I>>(
    base?: I,
  ): AlertEvent_Alert_SourceAlertEvent {
    return AlertEvent_Alert_SourceAlertEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertEvent_Alert_SourceAlertEvent>, I>>(
    object: I,
  ): AlertEvent_Alert_SourceAlertEvent {
    const message = createBaseAlertEvent_Alert_SourceAlertEvent();
    message.botId = object.botId ?? "";
    message.hash = object.hash ?? "";
    message.timestamp = object.timestamp ?? "";
    message.chainId = object.chainId ?? 0;
    return message;
  },
};

function createBaseAlertEvent_Alert_Source(): AlertEvent_Alert_Source {
  return { transactionHash: "", bot: undefined, block: undefined, sourceAlert: undefined };
}

export const AlertEvent_Alert_Source = {
  encode(message: AlertEvent_Alert_Source, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.transactionHash !== "") {
      writer.uint32(10).string(message.transactionHash);
    }
    if (message.bot !== undefined) {
      AlertEvent_Alert_Bot.encode(message.bot, writer.uint32(18).fork()).ldelim();
    }
    if (message.block !== undefined) {
      AlertEvent_Alert_Block.encode(message.block, writer.uint32(26).fork()).ldelim();
    }
    if (message.sourceAlert !== undefined) {
      AlertEvent_Alert_SourceAlertEvent.encode(message.sourceAlert, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AlertEvent_Alert_Source {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertEvent_Alert_Source();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transactionHash = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bot = AlertEvent_Alert_Bot.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.block = AlertEvent_Alert_Block.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sourceAlert = AlertEvent_Alert_SourceAlertEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertEvent_Alert_Source {
    return {
      transactionHash: isSet(object.transactionHash) ? globalThis.String(object.transactionHash) : "",
      bot: isSet(object.bot) ? AlertEvent_Alert_Bot.fromJSON(object.bot) : undefined,
      block: isSet(object.block) ? AlertEvent_Alert_Block.fromJSON(object.block) : undefined,
      sourceAlert: isSet(object.sourceAlert)
        ? AlertEvent_Alert_SourceAlertEvent.fromJSON(object.sourceAlert)
        : undefined,
    };
  },

  toJSON(message: AlertEvent_Alert_Source): unknown {
    const obj: any = {};
    if (message.transactionHash !== "") {
      obj.transactionHash = message.transactionHash;
    }
    if (message.bot !== undefined) {
      obj.bot = AlertEvent_Alert_Bot.toJSON(message.bot);
    }
    if (message.block !== undefined) {
      obj.block = AlertEvent_Alert_Block.toJSON(message.block);
    }
    if (message.sourceAlert !== undefined) {
      obj.sourceAlert = AlertEvent_Alert_SourceAlertEvent.toJSON(message.sourceAlert);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertEvent_Alert_Source>, I>>(base?: I): AlertEvent_Alert_Source {
    return AlertEvent_Alert_Source.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertEvent_Alert_Source>, I>>(object: I): AlertEvent_Alert_Source {
    const message = createBaseAlertEvent_Alert_Source();
    message.transactionHash = object.transactionHash ?? "";
    message.bot = (object.bot !== undefined && object.bot !== null)
      ? AlertEvent_Alert_Bot.fromPartial(object.bot)
      : undefined;
    message.block = (object.block !== undefined && object.block !== null)
      ? AlertEvent_Alert_Block.fromPartial(object.block)
      : undefined;
    message.sourceAlert = (object.sourceAlert !== undefined && object.sourceAlert !== null)
      ? AlertEvent_Alert_SourceAlertEvent.fromPartial(object.sourceAlert)
      : undefined;
    return message;
  },
};

function createBaseAlertEvent_Alert_Label(): AlertEvent_Alert_Label {
  return {
    label: "",
    confidence: 0,
    entity: "",
    entityType: "",
    remove: false,
    metadata: [],
    uniqueKey: "",
    embedding: [],
  };
}

export const AlertEvent_Alert_Label = {
  encode(message: AlertEvent_Alert_Label, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.label !== "") {
      writer.uint32(10).string(message.label);
    }
    if (message.confidence !== 0) {
      writer.uint32(21).float(message.confidence);
    }
    if (message.entity !== "") {
      writer.uint32(26).string(message.entity);
    }
    if (message.entityType !== "") {
      writer.uint32(34).string(message.entityType);
    }
    if (message.remove !== false) {
      writer.uint32(40).bool(message.remove);
    }
    for (const v of message.metadata) {
      writer.uint32(50).string(v!);
    }
    if (message.uniqueKey !== "") {
      writer.uint32(58).string(message.uniqueKey);
    }
    writer.uint32(66).fork();
    for (const v of message.embedding) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AlertEvent_Alert_Label {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertEvent_Alert_Label();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.confidence = reader.float();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.entity = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.entityType = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.remove = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.metadata.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.uniqueKey = reader.string();
          continue;
        case 8:
          if (tag === 69) {
            message.embedding.push(reader.float());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.embedding.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertEvent_Alert_Label {
    return {
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
      entityType: isSet(object.entityType) ? globalThis.String(object.entityType) : "",
      remove: isSet(object.remove) ? globalThis.Boolean(object.remove) : false,
      metadata: globalThis.Array.isArray(object?.metadata) ? object.metadata.map((e: any) => globalThis.String(e)) : [],
      uniqueKey: isSet(object.uniqueKey) ? globalThis.String(object.uniqueKey) : "",
      embedding: globalThis.Array.isArray(object?.embedding)
        ? object.embedding.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: AlertEvent_Alert_Label): unknown {
    const obj: any = {};
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.entity !== "") {
      obj.entity = message.entity;
    }
    if (message.entityType !== "") {
      obj.entityType = message.entityType;
    }
    if (message.remove !== false) {
      obj.remove = message.remove;
    }
    if (message.metadata?.length) {
      obj.metadata = message.metadata;
    }
    if (message.uniqueKey !== "") {
      obj.uniqueKey = message.uniqueKey;
    }
    if (message.embedding?.length) {
      obj.embedding = message.embedding;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertEvent_Alert_Label>, I>>(base?: I): AlertEvent_Alert_Label {
    return AlertEvent_Alert_Label.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertEvent_Alert_Label>, I>>(object: I): AlertEvent_Alert_Label {
    const message = createBaseAlertEvent_Alert_Label();
    message.label = object.label ?? "";
    message.confidence = object.confidence ?? 0;
    message.entity = object.entity ?? "";
    message.entityType = object.entityType ?? "";
    message.remove = object.remove ?? false;
    message.metadata = object.metadata?.map((e) => e) || [];
    message.uniqueKey = object.uniqueKey ?? "";
    message.embedding = object.embedding?.map((e) => e) || [];
    return message;
  },
};

function createBaseAlertEvent_Alert_MetadataEntry(): AlertEvent_Alert_MetadataEntry {
  return { key: "", value: "" };
}

export const AlertEvent_Alert_MetadataEntry = {
  encode(message: AlertEvent_Alert_MetadataEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AlertEvent_Alert_MetadataEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertEvent_Alert_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertEvent_Alert_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AlertEvent_Alert_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AlertEvent_Alert_MetadataEntry>, I>>(base?: I): AlertEvent_Alert_MetadataEntry {
    return AlertEvent_Alert_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlertEvent_Alert_MetadataEntry>, I>>(
    object: I,
  ): AlertEvent_Alert_MetadataEntry {
    const message = createBaseAlertEvent_Alert_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

export interface AgentService {
  Initialize(request: InitializeRequest): Promise<InitializeResponse>;
  EvaluateTx(request: EvaluateTxRequest): Promise<EvaluateTxResponse>;
  EvaluateBlock(request: EvaluateBlockRequest): Promise<EvaluateBlockResponse>;
  EvaluateAlert(request: EvaluateAlertRequest): Promise<EvaluateAlertResponse>;
  HealthCheck(request: HealthCheckRequest): Promise<HealthCheckResponse>;
}

export const AgentServiceServiceName = "model.v1.AgentService";
export class AgentServiceClientImpl implements AgentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AgentServiceServiceName;
    this.rpc = rpc;
    this.Initialize = this.Initialize.bind(this);
    this.EvaluateTx = this.EvaluateTx.bind(this);
    this.EvaluateBlock = this.EvaluateBlock.bind(this);
    this.EvaluateAlert = this.EvaluateAlert.bind(this);
    this.HealthCheck = this.HealthCheck.bind(this);
  }
  Initialize(request: InitializeRequest): Promise<InitializeResponse> {
    const data = InitializeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Initialize", data);
    return promise.then((data) => InitializeResponse.decode(_m0.Reader.create(data)));
  }

  EvaluateTx(request: EvaluateTxRequest): Promise<EvaluateTxResponse> {
    const data = EvaluateTxRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EvaluateTx", data);
    return promise.then((data) => EvaluateTxResponse.decode(_m0.Reader.create(data)));
  }

  EvaluateBlock(request: EvaluateBlockRequest): Promise<EvaluateBlockResponse> {
    const data = EvaluateBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EvaluateBlock", data);
    return promise.then((data) => EvaluateBlockResponse.decode(_m0.Reader.create(data)));
  }

  EvaluateAlert(request: EvaluateAlertRequest): Promise<EvaluateAlertResponse> {
    const data = EvaluateAlertRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EvaluateAlert", data);
    return promise.then((data) => EvaluateAlertResponse.decode(_m0.Reader.create(data)));
  }

  HealthCheck(request: HealthCheckRequest): Promise<HealthCheckResponse> {
    const data = HealthCheckRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "HealthCheck", data);
    return promise.then((data) => HealthCheckResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
