"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               unknown
// source: model/v1/agent.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlertEvent_Alert_SourceAlertEvent = exports.AlertEvent_Alert_Bot = exports.AlertEvent_Alert_Block = exports.AlertEvent_Alert_Project = exports.AlertEvent_Alert_Contract = exports.AlertEvent_Alert = exports.AlertEvent = exports.TransactionEvent_TxAddressesEntry = exports.TransactionEvent_AddressesEntry = exports.TransactionEvent_Trace = exports.TransactionEvent_TraceResult = exports.TransactionEvent_TraceAction = exports.TransactionEvent_EthReceipt = exports.TransactionEvent_Log = exports.TransactionEvent_EthTransaction = exports.TransactionEvent_EthBlock = exports.TransactionEvent_Network = exports.TransactionEvent = exports.BlockEvent_EthBlock = exports.BlockEvent_Network = exports.BlockEvent = exports.EvaluateAlertResponse_MetadataEntry = exports.EvaluateAlertResponse = exports.EvaluateBlockResponse_MetadataEntry = exports.EvaluateBlockResponse = exports.EvaluateTxResponse_MetadataEntry = exports.EvaluateTxResponse = exports.EvaluateAlertRequest = exports.EvaluateBlockRequest = exports.EvaluateTxRequest = exports.CombinerBotSubscription = exports.AlertConfig = exports.InitializeResponse = exports.InitializeRequest = exports.HealthCheckResponse = exports.HealthCheckRequest = exports.Error = exports.transactionEvent_EventTypeToJSON = exports.transactionEvent_EventTypeFromJSON = exports.TransactionEvent_EventType = exports.blockEvent_EventTypeToJSON = exports.blockEvent_EventTypeFromJSON = exports.BlockEvent_EventType = exports.healthCheckResponse_ResponseStatusToJSON = exports.healthCheckResponse_ResponseStatusFromJSON = exports.HealthCheckResponse_ResponseStatus = exports.responseStatusToJSON = exports.responseStatusFromJSON = exports.ResponseStatus = exports.protobufPackage = void 0;
exports.AgentServiceClientImpl = exports.AgentServiceServiceName = exports.AlertEvent_Alert_MetadataEntry = exports.AlertEvent_Alert_Label = exports.AlertEvent_Alert_Source = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const alert_1 = require("./alert");
const finding_1 = require("./finding");
const Long = require("long");
exports.protobufPackage = "model.v1";
var ResponseStatus;
(function (ResponseStatus) {
    ResponseStatus[ResponseStatus["UNKNOWN"] = 0] = "UNKNOWN";
    ResponseStatus[ResponseStatus["ERROR"] = 1] = "ERROR";
    ResponseStatus[ResponseStatus["SUCCESS"] = 2] = "SUCCESS";
    ResponseStatus[ResponseStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ResponseStatus || (exports.ResponseStatus = ResponseStatus = {}));
function responseStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN":
            return ResponseStatus.UNKNOWN;
        case 1:
        case "ERROR":
            return ResponseStatus.ERROR;
        case 2:
        case "SUCCESS":
            return ResponseStatus.SUCCESS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ResponseStatus.UNRECOGNIZED;
    }
}
exports.responseStatusFromJSON = responseStatusFromJSON;
function responseStatusToJSON(object) {
    switch (object) {
        case ResponseStatus.UNKNOWN:
            return "UNKNOWN";
        case ResponseStatus.ERROR:
            return "ERROR";
        case ResponseStatus.SUCCESS:
            return "SUCCESS";
        case ResponseStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.responseStatusToJSON = responseStatusToJSON;
var HealthCheckResponse_ResponseStatus;
(function (HealthCheckResponse_ResponseStatus) {
    HealthCheckResponse_ResponseStatus[HealthCheckResponse_ResponseStatus["UNKNOWN"] = 0] = "UNKNOWN";
    HealthCheckResponse_ResponseStatus[HealthCheckResponse_ResponseStatus["ERROR"] = 1] = "ERROR";
    HealthCheckResponse_ResponseStatus[HealthCheckResponse_ResponseStatus["SUCCESS"] = 2] = "SUCCESS";
    HealthCheckResponse_ResponseStatus[HealthCheckResponse_ResponseStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(HealthCheckResponse_ResponseStatus || (exports.HealthCheckResponse_ResponseStatus = HealthCheckResponse_ResponseStatus = {}));
function healthCheckResponse_ResponseStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN":
            return HealthCheckResponse_ResponseStatus.UNKNOWN;
        case 1:
        case "ERROR":
            return HealthCheckResponse_ResponseStatus.ERROR;
        case 2:
        case "SUCCESS":
            return HealthCheckResponse_ResponseStatus.SUCCESS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return HealthCheckResponse_ResponseStatus.UNRECOGNIZED;
    }
}
exports.healthCheckResponse_ResponseStatusFromJSON = healthCheckResponse_ResponseStatusFromJSON;
function healthCheckResponse_ResponseStatusToJSON(object) {
    switch (object) {
        case HealthCheckResponse_ResponseStatus.UNKNOWN:
            return "UNKNOWN";
        case HealthCheckResponse_ResponseStatus.ERROR:
            return "ERROR";
        case HealthCheckResponse_ResponseStatus.SUCCESS:
            return "SUCCESS";
        case HealthCheckResponse_ResponseStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.healthCheckResponse_ResponseStatusToJSON = healthCheckResponse_ResponseStatusToJSON;
var BlockEvent_EventType;
(function (BlockEvent_EventType) {
    BlockEvent_EventType[BlockEvent_EventType["BLOCK"] = 0] = "BLOCK";
    /** @deprecated */
    BlockEvent_EventType[BlockEvent_EventType["REORG"] = 1] = "REORG";
    BlockEvent_EventType[BlockEvent_EventType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BlockEvent_EventType || (exports.BlockEvent_EventType = BlockEvent_EventType = {}));
function blockEvent_EventTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "BLOCK":
            return BlockEvent_EventType.BLOCK;
        case 1:
        case "REORG":
            return BlockEvent_EventType.REORG;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BlockEvent_EventType.UNRECOGNIZED;
    }
}
exports.blockEvent_EventTypeFromJSON = blockEvent_EventTypeFromJSON;
function blockEvent_EventTypeToJSON(object) {
    switch (object) {
        case BlockEvent_EventType.BLOCK:
            return "BLOCK";
        case BlockEvent_EventType.REORG:
            return "REORG";
        case BlockEvent_EventType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.blockEvent_EventTypeToJSON = blockEvent_EventTypeToJSON;
var TransactionEvent_EventType;
(function (TransactionEvent_EventType) {
    TransactionEvent_EventType[TransactionEvent_EventType["BLOCK"] = 0] = "BLOCK";
    TransactionEvent_EventType[TransactionEvent_EventType["REORG"] = 1] = "REORG";
    TransactionEvent_EventType[TransactionEvent_EventType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TransactionEvent_EventType || (exports.TransactionEvent_EventType = TransactionEvent_EventType = {}));
function transactionEvent_EventTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "BLOCK":
            return TransactionEvent_EventType.BLOCK;
        case 1:
        case "REORG":
            return TransactionEvent_EventType.REORG;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TransactionEvent_EventType.UNRECOGNIZED;
    }
}
exports.transactionEvent_EventTypeFromJSON = transactionEvent_EventTypeFromJSON;
function transactionEvent_EventTypeToJSON(object) {
    switch (object) {
        case TransactionEvent_EventType.BLOCK:
            return "BLOCK";
        case TransactionEvent_EventType.REORG:
            return "REORG";
        case TransactionEvent_EventType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.transactionEvent_EventTypeToJSON = transactionEvent_EventTypeToJSON;
function createBaseError() {
    return { message: "" };
}
exports.Error = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.Error.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseError();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseHealthCheckRequest() {
    return {};
}
exports.HealthCheckRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthCheckRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.HealthCheckRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseHealthCheckRequest();
        return message;
    },
};
function createBaseHealthCheckResponse() {
    return { status: 0, errors: [] };
}
exports.HealthCheckResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        for (const v of message.errors) {
            exports.Error.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthCheckResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errors.push(exports.Error.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? healthCheckResponse_ResponseStatusFromJSON(object.status) : 0,
            errors: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.errors) ? object.errors.map((e) => exports.Error.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.status !== 0) {
            obj.status = healthCheckResponse_ResponseStatusToJSON(message.status);
        }
        if ((_a = message.errors) === null || _a === void 0 ? void 0 : _a.length) {
            obj.errors = message.errors.map((e) => exports.Error.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.HealthCheckResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseHealthCheckResponse();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;
        message.errors = ((_b = object.errors) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Error.fromPartial(e))) || [];
        return message;
    },
};
function createBaseInitializeRequest() {
    return { agentId: "", proxyHost: "", shardId: 0 };
}
exports.InitializeRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.agentId !== "") {
            writer.uint32(10).string(message.agentId);
        }
        if (message.proxyHost !== "") {
            writer.uint32(18).string(message.proxyHost);
        }
        if (message.shardId !== 0) {
            writer.uint32(24).int32(message.shardId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInitializeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.agentId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.proxyHost = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.shardId = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            agentId: isSet(object.agentId) ? globalThis.String(object.agentId) : "",
            proxyHost: isSet(object.proxyHost) ? globalThis.String(object.proxyHost) : "",
            shardId: isSet(object.shardId) ? globalThis.Number(object.shardId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.agentId !== "") {
            obj.agentId = message.agentId;
        }
        if (message.proxyHost !== "") {
            obj.proxyHost = message.proxyHost;
        }
        if (message.shardId !== 0) {
            obj.shardId = Math.round(message.shardId);
        }
        return obj;
    },
    create(base) {
        return exports.InitializeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseInitializeRequest();
        message.agentId = (_a = object.agentId) !== null && _a !== void 0 ? _a : "";
        message.proxyHost = (_b = object.proxyHost) !== null && _b !== void 0 ? _b : "";
        message.shardId = (_c = object.shardId) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseInitializeResponse() {
    return { status: 0, errors: [], addresses: [], alertConfig: undefined };
}
exports.InitializeResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        for (const v of message.errors) {
            exports.Error.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.addresses) {
            writer.uint32(26).string(v);
        }
        if (message.alertConfig !== undefined) {
            exports.AlertConfig.encode(message.alertConfig, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInitializeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errors.push(exports.Error.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.alertConfig = exports.AlertConfig.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? responseStatusFromJSON(object.status) : 0,
            errors: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.errors) ? object.errors.map((e) => exports.Error.fromJSON(e)) : [],
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            alertConfig: isSet(object.alertConfig) ? exports.AlertConfig.fromJSON(object.alertConfig) : undefined,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.status !== 0) {
            obj.status = responseStatusToJSON(message.status);
        }
        if ((_a = message.errors) === null || _a === void 0 ? void 0 : _a.length) {
            obj.errors = message.errors.map((e) => exports.Error.toJSON(e));
        }
        if ((_b = message.addresses) === null || _b === void 0 ? void 0 : _b.length) {
            obj.addresses = message.addresses;
        }
        if (message.alertConfig !== undefined) {
            obj.alertConfig = exports.AlertConfig.toJSON(message.alertConfig);
        }
        return obj;
    },
    create(base) {
        return exports.InitializeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseInitializeResponse();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;
        message.errors = ((_b = object.errors) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Error.fromPartial(e))) || [];
        message.addresses = ((_c = object.addresses) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.alertConfig = (object.alertConfig !== undefined && object.alertConfig !== null)
            ? exports.AlertConfig.fromPartial(object.alertConfig)
            : undefined;
        return message;
    },
};
function createBaseAlertConfig() {
    return { subscriptions: [] };
}
exports.AlertConfig = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.subscriptions) {
            exports.CombinerBotSubscription.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptions.push(exports.CombinerBotSubscription.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriptions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.subscriptions)
                ? object.subscriptions.map((e) => exports.CombinerBotSubscription.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.subscriptions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.subscriptions = message.subscriptions.map((e) => exports.CombinerBotSubscription.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.AlertConfig.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAlertConfig();
        message.subscriptions = ((_a = object.subscriptions) === null || _a === void 0 ? void 0 : _a.map((e) => exports.CombinerBotSubscription.fromPartial(e))) || [];
        return message;
    },
};
function createBaseCombinerBotSubscription() {
    return { botId: "", alertId: "", alertIds: [], chainId: 0 };
}
exports.CombinerBotSubscription = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.botId !== "") {
            writer.uint32(10).string(message.botId);
        }
        if (message.alertId !== "") {
            writer.uint32(18).string(message.alertId);
        }
        for (const v of message.alertIds) {
            writer.uint32(26).string(v);
        }
        if (message.chainId !== 0) {
            writer.uint32(32).uint64(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCombinerBotSubscription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.botId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.alertId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.alertIds.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.chainId = longToNumber(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            botId: isSet(object.botId) ? globalThis.String(object.botId) : "",
            alertId: isSet(object.alertId) ? globalThis.String(object.alertId) : "",
            alertIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.alertIds) ? object.alertIds.map((e) => globalThis.String(e)) : [],
            chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.botId !== "") {
            obj.botId = message.botId;
        }
        if (message.alertId !== "") {
            obj.alertId = message.alertId;
        }
        if ((_a = message.alertIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.alertIds = message.alertIds;
        }
        if (message.chainId !== 0) {
            obj.chainId = Math.round(message.chainId);
        }
        return obj;
    },
    create(base) {
        return exports.CombinerBotSubscription.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCombinerBotSubscription();
        message.botId = (_a = object.botId) !== null && _a !== void 0 ? _a : "";
        message.alertId = (_b = object.alertId) !== null && _b !== void 0 ? _b : "";
        message.alertIds = ((_c = object.alertIds) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.chainId = (_d = object.chainId) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseEvaluateTxRequest() {
    return { requestId: "", event: undefined, shardId: 0 };
}
exports.EvaluateTxRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.event !== undefined) {
            exports.TransactionEvent.encode(message.event, writer.uint32(18).fork()).ldelim();
        }
        if (message.shardId !== 0) {
            writer.uint32(24).int32(message.shardId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvaluateTxRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.event = exports.TransactionEvent.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.shardId = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            event: isSet(object.event) ? exports.TransactionEvent.fromJSON(object.event) : undefined,
            shardId: isSet(object.shardId) ? globalThis.Number(object.shardId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.event !== undefined) {
            obj.event = exports.TransactionEvent.toJSON(message.event);
        }
        if (message.shardId !== 0) {
            obj.shardId = Math.round(message.shardId);
        }
        return obj;
    },
    create(base) {
        return exports.EvaluateTxRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEvaluateTxRequest();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        message.event = (object.event !== undefined && object.event !== null)
            ? exports.TransactionEvent.fromPartial(object.event)
            : undefined;
        message.shardId = (_b = object.shardId) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseEvaluateBlockRequest() {
    return { requestId: "", event: undefined, shardId: 0 };
}
exports.EvaluateBlockRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.event !== undefined) {
            exports.BlockEvent.encode(message.event, writer.uint32(18).fork()).ldelim();
        }
        if (message.shardId !== 0) {
            writer.uint32(24).int32(message.shardId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvaluateBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.event = exports.BlockEvent.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.shardId = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            event: isSet(object.event) ? exports.BlockEvent.fromJSON(object.event) : undefined,
            shardId: isSet(object.shardId) ? globalThis.Number(object.shardId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.event !== undefined) {
            obj.event = exports.BlockEvent.toJSON(message.event);
        }
        if (message.shardId !== 0) {
            obj.shardId = Math.round(message.shardId);
        }
        return obj;
    },
    create(base) {
        return exports.EvaluateBlockRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEvaluateBlockRequest();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        message.event = (object.event !== undefined && object.event !== null)
            ? exports.BlockEvent.fromPartial(object.event)
            : undefined;
        message.shardId = (_b = object.shardId) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseEvaluateAlertRequest() {
    return { requestId: "", event: undefined, targetBotId: "", shardId: 0 };
}
exports.EvaluateAlertRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.event !== undefined) {
            exports.AlertEvent.encode(message.event, writer.uint32(18).fork()).ldelim();
        }
        if (message.targetBotId !== "") {
            writer.uint32(26).string(message.targetBotId);
        }
        if (message.shardId !== 0) {
            writer.uint32(32).int32(message.shardId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvaluateAlertRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.event = exports.AlertEvent.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.targetBotId = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.shardId = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            event: isSet(object.event) ? exports.AlertEvent.fromJSON(object.event) : undefined,
            targetBotId: isSet(object.targetBotId) ? globalThis.String(object.targetBotId) : "",
            shardId: isSet(object.shardId) ? globalThis.Number(object.shardId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.event !== undefined) {
            obj.event = exports.AlertEvent.toJSON(message.event);
        }
        if (message.targetBotId !== "") {
            obj.targetBotId = message.targetBotId;
        }
        if (message.shardId !== 0) {
            obj.shardId = Math.round(message.shardId);
        }
        return obj;
    },
    create(base) {
        return exports.EvaluateAlertRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEvaluateAlertRequest();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        message.event = (object.event !== undefined && object.event !== null)
            ? exports.AlertEvent.fromPartial(object.event)
            : undefined;
        message.targetBotId = (_b = object.targetBotId) !== null && _b !== void 0 ? _b : "";
        message.shardId = (_c = object.shardId) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseEvaluateTxResponse() {
    return { status: 0, errors: [], findings: [], metadata: {}, timestamp: "", latencyMs: 0, private: false };
}
exports.EvaluateTxResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        for (const v of message.errors) {
            exports.Error.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.findings) {
            finding_1.Finding.encode(v, writer.uint32(26).fork()).ldelim();
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.EvaluateTxResponse_MetadataEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        if (message.timestamp !== "") {
            writer.uint32(42).string(message.timestamp);
        }
        if (message.latencyMs !== 0) {
            writer.uint32(48).uint32(message.latencyMs);
        }
        if (message.private !== false) {
            writer.uint32(56).bool(message.private);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvaluateTxResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errors.push(exports.Error.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.findings.push(finding_1.Finding.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = exports.EvaluateTxResponse_MetadataEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.metadata[entry4.key] = entry4.value;
                    }
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.timestamp = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.latencyMs = reader.uint32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.private = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? responseStatusFromJSON(object.status) : 0,
            errors: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.errors) ? object.errors.map((e) => exports.Error.fromJSON(e)) : [],
            findings: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.findings) ? object.findings.map((e) => finding_1.Finding.fromJSON(e)) : [],
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
            latencyMs: isSet(object.latencyMs) ? globalThis.Number(object.latencyMs) : 0,
            private: isSet(object.private) ? globalThis.Boolean(object.private) : false,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.status !== 0) {
            obj.status = responseStatusToJSON(message.status);
        }
        if ((_a = message.errors) === null || _a === void 0 ? void 0 : _a.length) {
            obj.errors = message.errors.map((e) => exports.Error.toJSON(e));
        }
        if ((_b = message.findings) === null || _b === void 0 ? void 0 : _b.length) {
            obj.findings = message.findings.map((e) => finding_1.Finding.toJSON(e));
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        if (message.timestamp !== "") {
            obj.timestamp = message.timestamp;
        }
        if (message.latencyMs !== 0) {
            obj.latencyMs = Math.round(message.latencyMs);
        }
        if (message.private !== false) {
            obj.private = message.private;
        }
        return obj;
    },
    create(base) {
        return exports.EvaluateTxResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseEvaluateTxResponse();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;
        message.errors = ((_b = object.errors) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Error.fromPartial(e))) || [];
        message.findings = ((_c = object.findings) === null || _c === void 0 ? void 0 : _c.map((e) => finding_1.Finding.fromPartial(e))) || [];
        message.metadata = Object.entries((_d = object.metadata) !== null && _d !== void 0 ? _d : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.timestamp = (_e = object.timestamp) !== null && _e !== void 0 ? _e : "";
        message.latencyMs = (_f = object.latencyMs) !== null && _f !== void 0 ? _f : 0;
        message.private = (_g = object.private) !== null && _g !== void 0 ? _g : false;
        return message;
    },
};
function createBaseEvaluateTxResponse_MetadataEntry() {
    return { key: "", value: "" };
}
exports.EvaluateTxResponse_MetadataEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvaluateTxResponse_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.EvaluateTxResponse_MetadataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEvaluateTxResponse_MetadataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEvaluateBlockResponse() {
    return { status: 0, errors: [], findings: [], metadata: {}, timestamp: "", latencyMs: 0, private: false };
}
exports.EvaluateBlockResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        for (const v of message.errors) {
            exports.Error.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.findings) {
            finding_1.Finding.encode(v, writer.uint32(26).fork()).ldelim();
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.EvaluateBlockResponse_MetadataEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        if (message.timestamp !== "") {
            writer.uint32(42).string(message.timestamp);
        }
        if (message.latencyMs !== 0) {
            writer.uint32(48).uint32(message.latencyMs);
        }
        if (message.private !== false) {
            writer.uint32(56).bool(message.private);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvaluateBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errors.push(exports.Error.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.findings.push(finding_1.Finding.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = exports.EvaluateBlockResponse_MetadataEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.metadata[entry4.key] = entry4.value;
                    }
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.timestamp = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.latencyMs = reader.uint32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.private = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? responseStatusFromJSON(object.status) : 0,
            errors: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.errors) ? object.errors.map((e) => exports.Error.fromJSON(e)) : [],
            findings: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.findings) ? object.findings.map((e) => finding_1.Finding.fromJSON(e)) : [],
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
            latencyMs: isSet(object.latencyMs) ? globalThis.Number(object.latencyMs) : 0,
            private: isSet(object.private) ? globalThis.Boolean(object.private) : false,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.status !== 0) {
            obj.status = responseStatusToJSON(message.status);
        }
        if ((_a = message.errors) === null || _a === void 0 ? void 0 : _a.length) {
            obj.errors = message.errors.map((e) => exports.Error.toJSON(e));
        }
        if ((_b = message.findings) === null || _b === void 0 ? void 0 : _b.length) {
            obj.findings = message.findings.map((e) => finding_1.Finding.toJSON(e));
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        if (message.timestamp !== "") {
            obj.timestamp = message.timestamp;
        }
        if (message.latencyMs !== 0) {
            obj.latencyMs = Math.round(message.latencyMs);
        }
        if (message.private !== false) {
            obj.private = message.private;
        }
        return obj;
    },
    create(base) {
        return exports.EvaluateBlockResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseEvaluateBlockResponse();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;
        message.errors = ((_b = object.errors) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Error.fromPartial(e))) || [];
        message.findings = ((_c = object.findings) === null || _c === void 0 ? void 0 : _c.map((e) => finding_1.Finding.fromPartial(e))) || [];
        message.metadata = Object.entries((_d = object.metadata) !== null && _d !== void 0 ? _d : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.timestamp = (_e = object.timestamp) !== null && _e !== void 0 ? _e : "";
        message.latencyMs = (_f = object.latencyMs) !== null && _f !== void 0 ? _f : 0;
        message.private = (_g = object.private) !== null && _g !== void 0 ? _g : false;
        return message;
    },
};
function createBaseEvaluateBlockResponse_MetadataEntry() {
    return { key: "", value: "" };
}
exports.EvaluateBlockResponse_MetadataEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvaluateBlockResponse_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.EvaluateBlockResponse_MetadataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEvaluateBlockResponse_MetadataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEvaluateAlertResponse() {
    return { status: 0, errors: [], findings: [], metadata: {}, timestamp: "", latencyMs: 0, private: false };
}
exports.EvaluateAlertResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        for (const v of message.errors) {
            exports.Error.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.findings) {
            finding_1.Finding.encode(v, writer.uint32(26).fork()).ldelim();
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.EvaluateAlertResponse_MetadataEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        if (message.timestamp !== "") {
            writer.uint32(42).string(message.timestamp);
        }
        if (message.latencyMs !== 0) {
            writer.uint32(48).uint32(message.latencyMs);
        }
        if (message.private !== false) {
            writer.uint32(56).bool(message.private);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvaluateAlertResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errors.push(exports.Error.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.findings.push(finding_1.Finding.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = exports.EvaluateAlertResponse_MetadataEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.metadata[entry4.key] = entry4.value;
                    }
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.timestamp = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.latencyMs = reader.uint32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.private = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? responseStatusFromJSON(object.status) : 0,
            errors: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.errors) ? object.errors.map((e) => exports.Error.fromJSON(e)) : [],
            findings: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.findings) ? object.findings.map((e) => finding_1.Finding.fromJSON(e)) : [],
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
            latencyMs: isSet(object.latencyMs) ? globalThis.Number(object.latencyMs) : 0,
            private: isSet(object.private) ? globalThis.Boolean(object.private) : false,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.status !== 0) {
            obj.status = responseStatusToJSON(message.status);
        }
        if ((_a = message.errors) === null || _a === void 0 ? void 0 : _a.length) {
            obj.errors = message.errors.map((e) => exports.Error.toJSON(e));
        }
        if ((_b = message.findings) === null || _b === void 0 ? void 0 : _b.length) {
            obj.findings = message.findings.map((e) => finding_1.Finding.toJSON(e));
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        if (message.timestamp !== "") {
            obj.timestamp = message.timestamp;
        }
        if (message.latencyMs !== 0) {
            obj.latencyMs = Math.round(message.latencyMs);
        }
        if (message.private !== false) {
            obj.private = message.private;
        }
        return obj;
    },
    create(base) {
        return exports.EvaluateAlertResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseEvaluateAlertResponse();
        message.status = (_a = object.status) !== null && _a !== void 0 ? _a : 0;
        message.errors = ((_b = object.errors) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Error.fromPartial(e))) || [];
        message.findings = ((_c = object.findings) === null || _c === void 0 ? void 0 : _c.map((e) => finding_1.Finding.fromPartial(e))) || [];
        message.metadata = Object.entries((_d = object.metadata) !== null && _d !== void 0 ? _d : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.timestamp = (_e = object.timestamp) !== null && _e !== void 0 ? _e : "";
        message.latencyMs = (_f = object.latencyMs) !== null && _f !== void 0 ? _f : 0;
        message.private = (_g = object.private) !== null && _g !== void 0 ? _g : false;
        return message;
    },
};
function createBaseEvaluateAlertResponse_MetadataEntry() {
    return { key: "", value: "" };
}
exports.EvaluateAlertResponse_MetadataEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEvaluateAlertResponse_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.EvaluateAlertResponse_MetadataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEvaluateAlertResponse_MetadataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseBlockEvent() {
    return { type: 0, blockHash: "", blockNumber: "", network: undefined, block: undefined, timestamps: undefined };
}
exports.BlockEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.blockHash !== "") {
            writer.uint32(18).string(message.blockHash);
        }
        if (message.blockNumber !== "") {
            writer.uint32(26).string(message.blockNumber);
        }
        if (message.network !== undefined) {
            exports.BlockEvent_Network.encode(message.network, writer.uint32(34).fork()).ldelim();
        }
        if (message.block !== undefined) {
            exports.BlockEvent_EthBlock.encode(message.block, writer.uint32(42).fork()).ldelim();
        }
        if (message.timestamps !== undefined) {
            alert_1.TrackingTimestamps.encode(message.timestamps, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.blockNumber = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.network = exports.BlockEvent_Network.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.block = exports.BlockEvent_EthBlock.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.timestamps = alert_1.TrackingTimestamps.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? blockEvent_EventTypeFromJSON(object.type) : 0,
            blockHash: isSet(object.blockHash) ? globalThis.String(object.blockHash) : "",
            blockNumber: isSet(object.blockNumber) ? globalThis.String(object.blockNumber) : "",
            network: isSet(object.network) ? exports.BlockEvent_Network.fromJSON(object.network) : undefined,
            block: isSet(object.block) ? exports.BlockEvent_EthBlock.fromJSON(object.block) : undefined,
            timestamps: isSet(object.timestamps) ? alert_1.TrackingTimestamps.fromJSON(object.timestamps) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = blockEvent_EventTypeToJSON(message.type);
        }
        if (message.blockHash !== "") {
            obj.blockHash = message.blockHash;
        }
        if (message.blockNumber !== "") {
            obj.blockNumber = message.blockNumber;
        }
        if (message.network !== undefined) {
            obj.network = exports.BlockEvent_Network.toJSON(message.network);
        }
        if (message.block !== undefined) {
            obj.block = exports.BlockEvent_EthBlock.toJSON(message.block);
        }
        if (message.timestamps !== undefined) {
            obj.timestamps = alert_1.TrackingTimestamps.toJSON(message.timestamps);
        }
        return obj;
    },
    create(base) {
        return exports.BlockEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBlockEvent();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.blockHash = (_b = object.blockHash) !== null && _b !== void 0 ? _b : "";
        message.blockNumber = (_c = object.blockNumber) !== null && _c !== void 0 ? _c : "";
        message.network = (object.network !== undefined && object.network !== null)
            ? exports.BlockEvent_Network.fromPartial(object.network)
            : undefined;
        message.block = (object.block !== undefined && object.block !== null)
            ? exports.BlockEvent_EthBlock.fromPartial(object.block)
            : undefined;
        message.timestamps = (object.timestamps !== undefined && object.timestamps !== null)
            ? alert_1.TrackingTimestamps.fromPartial(object.timestamps)
            : undefined;
        return message;
    },
};
function createBaseBlockEvent_Network() {
    return { chainId: "" };
}
exports.BlockEvent_Network = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockEvent_Network();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.chainId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.chainId !== "") {
            obj.chainId = message.chainId;
        }
        return obj;
    },
    create(base) {
        return exports.BlockEvent_Network.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBlockEvent_Network();
        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseBlockEvent_EthBlock() {
    return {
        difficulty: "",
        extraData: "",
        gasLimit: "",
        gasUsed: "",
        hash: "",
        logsBloom: "",
        miner: "",
        mixHash: "",
        nonce: "",
        number: "",
        parentHash: "",
        receiptsRoot: "",
        sha3Uncles: "",
        size: "",
        stateRoot: "",
        timestamp: "",
        totalDifficulty: "",
        transactions: [],
        transactionsRoot: "",
        uncles: [],
        baseFeePerGas: "",
    };
}
exports.BlockEvent_EthBlock = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.difficulty !== "") {
            writer.uint32(10).string(message.difficulty);
        }
        if (message.extraData !== "") {
            writer.uint32(18).string(message.extraData);
        }
        if (message.gasLimit !== "") {
            writer.uint32(26).string(message.gasLimit);
        }
        if (message.gasUsed !== "") {
            writer.uint32(34).string(message.gasUsed);
        }
        if (message.hash !== "") {
            writer.uint32(42).string(message.hash);
        }
        if (message.logsBloom !== "") {
            writer.uint32(50).string(message.logsBloom);
        }
        if (message.miner !== "") {
            writer.uint32(58).string(message.miner);
        }
        if (message.mixHash !== "") {
            writer.uint32(66).string(message.mixHash);
        }
        if (message.nonce !== "") {
            writer.uint32(74).string(message.nonce);
        }
        if (message.number !== "") {
            writer.uint32(82).string(message.number);
        }
        if (message.parentHash !== "") {
            writer.uint32(90).string(message.parentHash);
        }
        if (message.receiptsRoot !== "") {
            writer.uint32(98).string(message.receiptsRoot);
        }
        if (message.sha3Uncles !== "") {
            writer.uint32(106).string(message.sha3Uncles);
        }
        if (message.size !== "") {
            writer.uint32(114).string(message.size);
        }
        if (message.stateRoot !== "") {
            writer.uint32(122).string(message.stateRoot);
        }
        if (message.timestamp !== "") {
            writer.uint32(130).string(message.timestamp);
        }
        if (message.totalDifficulty !== "") {
            writer.uint32(138).string(message.totalDifficulty);
        }
        for (const v of message.transactions) {
            writer.uint32(146).string(v);
        }
        if (message.transactionsRoot !== "") {
            writer.uint32(154).string(message.transactionsRoot);
        }
        for (const v of message.uncles) {
            writer.uint32(162).string(v);
        }
        if (message.baseFeePerGas !== "") {
            writer.uint32(170).string(message.baseFeePerGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockEvent_EthBlock();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.difficulty = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.extraData = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.gasLimit = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.gasUsed = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.logsBloom = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.miner = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.mixHash = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.nonce = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.number = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.parentHash = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.receiptsRoot = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.sha3Uncles = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.size = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.stateRoot = reader.string();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.timestamp = reader.string();
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.totalDifficulty = reader.string();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.transactions.push(reader.string());
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.transactionsRoot = reader.string();
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.uncles.push(reader.string());
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.baseFeePerGas = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            difficulty: isSet(object.difficulty) ? globalThis.String(object.difficulty) : "",
            extraData: isSet(object.extraData) ? globalThis.String(object.extraData) : "",
            gasLimit: isSet(object.gasLimit) ? globalThis.String(object.gasLimit) : "",
            gasUsed: isSet(object.gasUsed) ? globalThis.String(object.gasUsed) : "",
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            logsBloom: isSet(object.logsBloom) ? globalThis.String(object.logsBloom) : "",
            miner: isSet(object.miner) ? globalThis.String(object.miner) : "",
            mixHash: isSet(object.mixHash) ? globalThis.String(object.mixHash) : "",
            nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
            number: isSet(object.number) ? globalThis.String(object.number) : "",
            parentHash: isSet(object.parentHash) ? globalThis.String(object.parentHash) : "",
            receiptsRoot: isSet(object.receiptsRoot) ? globalThis.String(object.receiptsRoot) : "",
            sha3Uncles: isSet(object.sha3Uncles) ? globalThis.String(object.sha3Uncles) : "",
            size: isSet(object.size) ? globalThis.String(object.size) : "",
            stateRoot: isSet(object.stateRoot) ? globalThis.String(object.stateRoot) : "",
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
            totalDifficulty: isSet(object.totalDifficulty) ? globalThis.String(object.totalDifficulty) : "",
            transactions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.transactions)
                ? object.transactions.map((e) => globalThis.String(e))
                : [],
            transactionsRoot: isSet(object.transactionsRoot) ? globalThis.String(object.transactionsRoot) : "",
            uncles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.uncles) ? object.uncles.map((e) => globalThis.String(e)) : [],
            baseFeePerGas: isSet(object.baseFeePerGas) ? globalThis.String(object.baseFeePerGas) : "",
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.difficulty !== "") {
            obj.difficulty = message.difficulty;
        }
        if (message.extraData !== "") {
            obj.extraData = message.extraData;
        }
        if (message.gasLimit !== "") {
            obj.gasLimit = message.gasLimit;
        }
        if (message.gasUsed !== "") {
            obj.gasUsed = message.gasUsed;
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.logsBloom !== "") {
            obj.logsBloom = message.logsBloom;
        }
        if (message.miner !== "") {
            obj.miner = message.miner;
        }
        if (message.mixHash !== "") {
            obj.mixHash = message.mixHash;
        }
        if (message.nonce !== "") {
            obj.nonce = message.nonce;
        }
        if (message.number !== "") {
            obj.number = message.number;
        }
        if (message.parentHash !== "") {
            obj.parentHash = message.parentHash;
        }
        if (message.receiptsRoot !== "") {
            obj.receiptsRoot = message.receiptsRoot;
        }
        if (message.sha3Uncles !== "") {
            obj.sha3Uncles = message.sha3Uncles;
        }
        if (message.size !== "") {
            obj.size = message.size;
        }
        if (message.stateRoot !== "") {
            obj.stateRoot = message.stateRoot;
        }
        if (message.timestamp !== "") {
            obj.timestamp = message.timestamp;
        }
        if (message.totalDifficulty !== "") {
            obj.totalDifficulty = message.totalDifficulty;
        }
        if ((_a = message.transactions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.transactions = message.transactions;
        }
        if (message.transactionsRoot !== "") {
            obj.transactionsRoot = message.transactionsRoot;
        }
        if ((_b = message.uncles) === null || _b === void 0 ? void 0 : _b.length) {
            obj.uncles = message.uncles;
        }
        if (message.baseFeePerGas !== "") {
            obj.baseFeePerGas = message.baseFeePerGas;
        }
        return obj;
    },
    create(base) {
        return exports.BlockEvent_EthBlock.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
        const message = createBaseBlockEvent_EthBlock();
        message.difficulty = (_a = object.difficulty) !== null && _a !== void 0 ? _a : "";
        message.extraData = (_b = object.extraData) !== null && _b !== void 0 ? _b : "";
        message.gasLimit = (_c = object.gasLimit) !== null && _c !== void 0 ? _c : "";
        message.gasUsed = (_d = object.gasUsed) !== null && _d !== void 0 ? _d : "";
        message.hash = (_e = object.hash) !== null && _e !== void 0 ? _e : "";
        message.logsBloom = (_f = object.logsBloom) !== null && _f !== void 0 ? _f : "";
        message.miner = (_g = object.miner) !== null && _g !== void 0 ? _g : "";
        message.mixHash = (_h = object.mixHash) !== null && _h !== void 0 ? _h : "";
        message.nonce = (_j = object.nonce) !== null && _j !== void 0 ? _j : "";
        message.number = (_k = object.number) !== null && _k !== void 0 ? _k : "";
        message.parentHash = (_l = object.parentHash) !== null && _l !== void 0 ? _l : "";
        message.receiptsRoot = (_m = object.receiptsRoot) !== null && _m !== void 0 ? _m : "";
        message.sha3Uncles = (_o = object.sha3Uncles) !== null && _o !== void 0 ? _o : "";
        message.size = (_p = object.size) !== null && _p !== void 0 ? _p : "";
        message.stateRoot = (_q = object.stateRoot) !== null && _q !== void 0 ? _q : "";
        message.timestamp = (_r = object.timestamp) !== null && _r !== void 0 ? _r : "";
        message.totalDifficulty = (_s = object.totalDifficulty) !== null && _s !== void 0 ? _s : "";
        message.transactions = ((_t = object.transactions) === null || _t === void 0 ? void 0 : _t.map((e) => e)) || [];
        message.transactionsRoot = (_u = object.transactionsRoot) !== null && _u !== void 0 ? _u : "";
        message.uncles = ((_v = object.uncles) === null || _v === void 0 ? void 0 : _v.map((e) => e)) || [];
        message.baseFeePerGas = (_w = object.baseFeePerGas) !== null && _w !== void 0 ? _w : "";
        return message;
    },
};
function createBaseTransactionEvent() {
    return {
        type: 0,
        transaction: undefined,
        receipt: undefined,
        network: undefined,
        traces: [],
        addresses: {},
        block: undefined,
        logs: [],
        isContractDeployment: false,
        contractAddress: "",
        timestamps: undefined,
        txAddresses: {},
    };
}
exports.TransactionEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.transaction !== undefined) {
            exports.TransactionEvent_EthTransaction.encode(message.transaction, writer.uint32(18).fork()).ldelim();
        }
        if (message.receipt !== undefined) {
            exports.TransactionEvent_EthReceipt.encode(message.receipt, writer.uint32(26).fork()).ldelim();
        }
        if (message.network !== undefined) {
            exports.TransactionEvent_Network.encode(message.network, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.traces) {
            exports.TransactionEvent_Trace.encode(v, writer.uint32(42).fork()).ldelim();
        }
        Object.entries(message.addresses).forEach(([key, value]) => {
            exports.TransactionEvent_AddressesEntry.encode({ key: key, value }, writer.uint32(50).fork()).ldelim();
        });
        if (message.block !== undefined) {
            exports.TransactionEvent_EthBlock.encode(message.block, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.logs) {
            exports.TransactionEvent_Log.encode(v, writer.uint32(66).fork()).ldelim();
        }
        if (message.isContractDeployment !== false) {
            writer.uint32(72).bool(message.isContractDeployment);
        }
        if (message.contractAddress !== "") {
            writer.uint32(82).string(message.contractAddress);
        }
        if (message.timestamps !== undefined) {
            alert_1.TrackingTimestamps.encode(message.timestamps, writer.uint32(90).fork()).ldelim();
        }
        Object.entries(message.txAddresses).forEach(([key, value]) => {
            exports.TransactionEvent_TxAddressesEntry.encode({ key: key, value }, writer.uint32(98).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.transaction = exports.TransactionEvent_EthTransaction.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.receipt = exports.TransactionEvent_EthReceipt.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.network = exports.TransactionEvent_Network.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.traces.push(exports.TransactionEvent_Trace.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    const entry6 = exports.TransactionEvent_AddressesEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.addresses[entry6.key] = entry6.value;
                    }
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.block = exports.TransactionEvent_EthBlock.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.logs.push(exports.TransactionEvent_Log.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.isContractDeployment = reader.bool();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.contractAddress = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.timestamps = alert_1.TrackingTimestamps.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    const entry12 = exports.TransactionEvent_TxAddressesEntry.decode(reader, reader.uint32());
                    if (entry12.value !== undefined) {
                        message.txAddresses[entry12.key] = entry12.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? transactionEvent_EventTypeFromJSON(object.type) : 0,
            transaction: isSet(object.transaction) ? exports.TransactionEvent_EthTransaction.fromJSON(object.transaction) : undefined,
            receipt: isSet(object.receipt) ? exports.TransactionEvent_EthReceipt.fromJSON(object.receipt) : undefined,
            network: isSet(object.network) ? exports.TransactionEvent_Network.fromJSON(object.network) : undefined,
            traces: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.traces)
                ? object.traces.map((e) => exports.TransactionEvent_Trace.fromJSON(e))
                : [],
            addresses: isObject(object.addresses)
                ? Object.entries(object.addresses).reduce((acc, [key, value]) => {
                    acc[key] = Boolean(value);
                    return acc;
                }, {})
                : {},
            block: isSet(object.block) ? exports.TransactionEvent_EthBlock.fromJSON(object.block) : undefined,
            logs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.logs) ? object.logs.map((e) => exports.TransactionEvent_Log.fromJSON(e)) : [],
            isContractDeployment: isSet(object.isContractDeployment)
                ? globalThis.Boolean(object.isContractDeployment)
                : false,
            contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
            timestamps: isSet(object.timestamps) ? alert_1.TrackingTimestamps.fromJSON(object.timestamps) : undefined,
            txAddresses: isObject(object.txAddresses)
                ? Object.entries(object.txAddresses).reduce((acc, [key, value]) => {
                    acc[key] = Boolean(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.type !== 0) {
            obj.type = transactionEvent_EventTypeToJSON(message.type);
        }
        if (message.transaction !== undefined) {
            obj.transaction = exports.TransactionEvent_EthTransaction.toJSON(message.transaction);
        }
        if (message.receipt !== undefined) {
            obj.receipt = exports.TransactionEvent_EthReceipt.toJSON(message.receipt);
        }
        if (message.network !== undefined) {
            obj.network = exports.TransactionEvent_Network.toJSON(message.network);
        }
        if ((_a = message.traces) === null || _a === void 0 ? void 0 : _a.length) {
            obj.traces = message.traces.map((e) => exports.TransactionEvent_Trace.toJSON(e));
        }
        if (message.addresses) {
            const entries = Object.entries(message.addresses);
            if (entries.length > 0) {
                obj.addresses = {};
                entries.forEach(([k, v]) => {
                    obj.addresses[k] = v;
                });
            }
        }
        if (message.block !== undefined) {
            obj.block = exports.TransactionEvent_EthBlock.toJSON(message.block);
        }
        if ((_b = message.logs) === null || _b === void 0 ? void 0 : _b.length) {
            obj.logs = message.logs.map((e) => exports.TransactionEvent_Log.toJSON(e));
        }
        if (message.isContractDeployment !== false) {
            obj.isContractDeployment = message.isContractDeployment;
        }
        if (message.contractAddress !== "") {
            obj.contractAddress = message.contractAddress;
        }
        if (message.timestamps !== undefined) {
            obj.timestamps = alert_1.TrackingTimestamps.toJSON(message.timestamps);
        }
        if (message.txAddresses) {
            const entries = Object.entries(message.txAddresses);
            if (entries.length > 0) {
                obj.txAddresses = {};
                entries.forEach(([k, v]) => {
                    obj.txAddresses[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseTransactionEvent();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.transaction = (object.transaction !== undefined && object.transaction !== null)
            ? exports.TransactionEvent_EthTransaction.fromPartial(object.transaction)
            : undefined;
        message.receipt = (object.receipt !== undefined && object.receipt !== null)
            ? exports.TransactionEvent_EthReceipt.fromPartial(object.receipt)
            : undefined;
        message.network = (object.network !== undefined && object.network !== null)
            ? exports.TransactionEvent_Network.fromPartial(object.network)
            : undefined;
        message.traces = ((_b = object.traces) === null || _b === void 0 ? void 0 : _b.map((e) => exports.TransactionEvent_Trace.fromPartial(e))) || [];
        message.addresses = Object.entries((_c = object.addresses) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Boolean(value);
            }
            return acc;
        }, {});
        message.block = (object.block !== undefined && object.block !== null)
            ? exports.TransactionEvent_EthBlock.fromPartial(object.block)
            : undefined;
        message.logs = ((_d = object.logs) === null || _d === void 0 ? void 0 : _d.map((e) => exports.TransactionEvent_Log.fromPartial(e))) || [];
        message.isContractDeployment = (_e = object.isContractDeployment) !== null && _e !== void 0 ? _e : false;
        message.contractAddress = (_f = object.contractAddress) !== null && _f !== void 0 ? _f : "";
        message.timestamps = (object.timestamps !== undefined && object.timestamps !== null)
            ? alert_1.TrackingTimestamps.fromPartial(object.timestamps)
            : undefined;
        message.txAddresses = Object.entries((_g = object.txAddresses) !== null && _g !== void 0 ? _g : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Boolean(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseTransactionEvent_Network() {
    return { chainId: "" };
}
exports.TransactionEvent_Network = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_Network();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.chainId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.chainId !== "") {
            obj.chainId = message.chainId;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_Network.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTransactionEvent_Network();
        message.chainId = (_a = object.chainId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseTransactionEvent_EthBlock() {
    return { blockHash: "", blockNumber: "", blockTimestamp: "", baseFeePerGas: "" };
}
exports.TransactionEvent_EthBlock = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.blockHash !== "") {
            writer.uint32(10).string(message.blockHash);
        }
        if (message.blockNumber !== "") {
            writer.uint32(18).string(message.blockNumber);
        }
        if (message.blockTimestamp !== "") {
            writer.uint32(26).string(message.blockTimestamp);
        }
        if (message.baseFeePerGas !== "") {
            writer.uint32(34).string(message.baseFeePerGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_EthBlock();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.blockNumber = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.blockTimestamp = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.baseFeePerGas = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockHash: isSet(object.blockHash) ? globalThis.String(object.blockHash) : "",
            blockNumber: isSet(object.blockNumber) ? globalThis.String(object.blockNumber) : "",
            blockTimestamp: isSet(object.blockTimestamp) ? globalThis.String(object.blockTimestamp) : "",
            baseFeePerGas: isSet(object.baseFeePerGas) ? globalThis.String(object.baseFeePerGas) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.blockHash !== "") {
            obj.blockHash = message.blockHash;
        }
        if (message.blockNumber !== "") {
            obj.blockNumber = message.blockNumber;
        }
        if (message.blockTimestamp !== "") {
            obj.blockTimestamp = message.blockTimestamp;
        }
        if (message.baseFeePerGas !== "") {
            obj.baseFeePerGas = message.baseFeePerGas;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_EthBlock.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTransactionEvent_EthBlock();
        message.blockHash = (_a = object.blockHash) !== null && _a !== void 0 ? _a : "";
        message.blockNumber = (_b = object.blockNumber) !== null && _b !== void 0 ? _b : "";
        message.blockTimestamp = (_c = object.blockTimestamp) !== null && _c !== void 0 ? _c : "";
        message.baseFeePerGas = (_d = object.baseFeePerGas) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseTransactionEvent_EthTransaction() {
    return {
        type: "",
        nonce: "",
        gasPrice: "",
        gas: "",
        value: "",
        input: "",
        v: "",
        r: "",
        s: "",
        to: "",
        hash: "",
        from: "",
        maxFeePerGas: "",
        maxPriorityFeePerGas: "",
    };
}
exports.TransactionEvent_EthTransaction = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.nonce !== "") {
            writer.uint32(18).string(message.nonce);
        }
        if (message.gasPrice !== "") {
            writer.uint32(26).string(message.gasPrice);
        }
        if (message.gas !== "") {
            writer.uint32(34).string(message.gas);
        }
        if (message.value !== "") {
            writer.uint32(42).string(message.value);
        }
        if (message.input !== "") {
            writer.uint32(50).string(message.input);
        }
        if (message.v !== "") {
            writer.uint32(58).string(message.v);
        }
        if (message.r !== "") {
            writer.uint32(66).string(message.r);
        }
        if (message.s !== "") {
            writer.uint32(74).string(message.s);
        }
        if (message.to !== "") {
            writer.uint32(82).string(message.to);
        }
        if (message.hash !== "") {
            writer.uint32(90).string(message.hash);
        }
        if (message.from !== "") {
            writer.uint32(98).string(message.from);
        }
        if (message.maxFeePerGas !== "") {
            writer.uint32(106).string(message.maxFeePerGas);
        }
        if (message.maxPriorityFeePerGas !== "") {
            writer.uint32(114).string(message.maxPriorityFeePerGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_EthTransaction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.nonce = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.gasPrice = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.gas = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.input = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.v = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.r = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.s = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.maxFeePerGas = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.maxPriorityFeePerGas = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
            gasPrice: isSet(object.gasPrice) ? globalThis.String(object.gasPrice) : "",
            gas: isSet(object.gas) ? globalThis.String(object.gas) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
            input: isSet(object.input) ? globalThis.String(object.input) : "",
            v: isSet(object.v) ? globalThis.String(object.v) : "",
            r: isSet(object.r) ? globalThis.String(object.r) : "",
            s: isSet(object.s) ? globalThis.String(object.s) : "",
            to: isSet(object.to) ? globalThis.String(object.to) : "",
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            from: isSet(object.from) ? globalThis.String(object.from) : "",
            maxFeePerGas: isSet(object.maxFeePerGas) ? globalThis.String(object.maxFeePerGas) : "",
            maxPriorityFeePerGas: isSet(object.maxPriorityFeePerGas) ? globalThis.String(object.maxPriorityFeePerGas) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.nonce !== "") {
            obj.nonce = message.nonce;
        }
        if (message.gasPrice !== "") {
            obj.gasPrice = message.gasPrice;
        }
        if (message.gas !== "") {
            obj.gas = message.gas;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.input !== "") {
            obj.input = message.input;
        }
        if (message.v !== "") {
            obj.v = message.v;
        }
        if (message.r !== "") {
            obj.r = message.r;
        }
        if (message.s !== "") {
            obj.s = message.s;
        }
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.from !== "") {
            obj.from = message.from;
        }
        if (message.maxFeePerGas !== "") {
            obj.maxFeePerGas = message.maxFeePerGas;
        }
        if (message.maxPriorityFeePerGas !== "") {
            obj.maxPriorityFeePerGas = message.maxPriorityFeePerGas;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_EthTransaction.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const message = createBaseTransactionEvent_EthTransaction();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : "";
        message.nonce = (_b = object.nonce) !== null && _b !== void 0 ? _b : "";
        message.gasPrice = (_c = object.gasPrice) !== null && _c !== void 0 ? _c : "";
        message.gas = (_d = object.gas) !== null && _d !== void 0 ? _d : "";
        message.value = (_e = object.value) !== null && _e !== void 0 ? _e : "";
        message.input = (_f = object.input) !== null && _f !== void 0 ? _f : "";
        message.v = (_g = object.v) !== null && _g !== void 0 ? _g : "";
        message.r = (_h = object.r) !== null && _h !== void 0 ? _h : "";
        message.s = (_j = object.s) !== null && _j !== void 0 ? _j : "";
        message.to = (_k = object.to) !== null && _k !== void 0 ? _k : "";
        message.hash = (_l = object.hash) !== null && _l !== void 0 ? _l : "";
        message.from = (_m = object.from) !== null && _m !== void 0 ? _m : "";
        message.maxFeePerGas = (_o = object.maxFeePerGas) !== null && _o !== void 0 ? _o : "";
        message.maxPriorityFeePerGas = (_p = object.maxPriorityFeePerGas) !== null && _p !== void 0 ? _p : "";
        return message;
    },
};
function createBaseTransactionEvent_Log() {
    return {
        address: "",
        topics: [],
        data: "",
        blockNumber: "",
        transactionHash: "",
        transactionIndex: "",
        blockHash: "",
        logIndex: "",
        removed: false,
    };
}
exports.TransactionEvent_Log = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        for (const v of message.topics) {
            writer.uint32(18).string(v);
        }
        if (message.data !== "") {
            writer.uint32(26).string(message.data);
        }
        if (message.blockNumber !== "") {
            writer.uint32(34).string(message.blockNumber);
        }
        if (message.transactionHash !== "") {
            writer.uint32(42).string(message.transactionHash);
        }
        if (message.transactionIndex !== "") {
            writer.uint32(50).string(message.transactionIndex);
        }
        if (message.blockHash !== "") {
            writer.uint32(58).string(message.blockHash);
        }
        if (message.logIndex !== "") {
            writer.uint32(66).string(message.logIndex);
        }
        if (message.removed !== false) {
            writer.uint32(72).bool(message.removed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_Log();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.topics.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.data = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.blockNumber = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.transactionHash = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.transactionIndex = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.logIndex = reader.string();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.removed = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            topics: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.topics) ? object.topics.map((e) => globalThis.String(e)) : [],
            data: isSet(object.data) ? globalThis.String(object.data) : "",
            blockNumber: isSet(object.blockNumber) ? globalThis.String(object.blockNumber) : "",
            transactionHash: isSet(object.transactionHash) ? globalThis.String(object.transactionHash) : "",
            transactionIndex: isSet(object.transactionIndex) ? globalThis.String(object.transactionIndex) : "",
            blockHash: isSet(object.blockHash) ? globalThis.String(object.blockHash) : "",
            logIndex: isSet(object.logIndex) ? globalThis.String(object.logIndex) : "",
            removed: isSet(object.removed) ? globalThis.Boolean(object.removed) : false,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if ((_a = message.topics) === null || _a === void 0 ? void 0 : _a.length) {
            obj.topics = message.topics;
        }
        if (message.data !== "") {
            obj.data = message.data;
        }
        if (message.blockNumber !== "") {
            obj.blockNumber = message.blockNumber;
        }
        if (message.transactionHash !== "") {
            obj.transactionHash = message.transactionHash;
        }
        if (message.transactionIndex !== "") {
            obj.transactionIndex = message.transactionIndex;
        }
        if (message.blockHash !== "") {
            obj.blockHash = message.blockHash;
        }
        if (message.logIndex !== "") {
            obj.logIndex = message.logIndex;
        }
        if (message.removed !== false) {
            obj.removed = message.removed;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_Log.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseTransactionEvent_Log();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.topics = ((_b = object.topics) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.data = (_c = object.data) !== null && _c !== void 0 ? _c : "";
        message.blockNumber = (_d = object.blockNumber) !== null && _d !== void 0 ? _d : "";
        message.transactionHash = (_e = object.transactionHash) !== null && _e !== void 0 ? _e : "";
        message.transactionIndex = (_f = object.transactionIndex) !== null && _f !== void 0 ? _f : "";
        message.blockHash = (_g = object.blockHash) !== null && _g !== void 0 ? _g : "";
        message.logIndex = (_h = object.logIndex) !== null && _h !== void 0 ? _h : "";
        message.removed = (_j = object.removed) !== null && _j !== void 0 ? _j : false;
        return message;
    },
};
function createBaseTransactionEvent_EthReceipt() {
    return {
        root: "",
        status: "",
        cumulativeGasUsed: "",
        logsBloom: "",
        logs: [],
        transactionHash: "",
        contractAddress: "",
        gasUsed: "",
        blockHash: "",
        blockNumber: "",
        transactionIndex: "",
    };
}
exports.TransactionEvent_EthReceipt = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.root !== "") {
            writer.uint32(10).string(message.root);
        }
        if (message.status !== "") {
            writer.uint32(18).string(message.status);
        }
        if (message.cumulativeGasUsed !== "") {
            writer.uint32(26).string(message.cumulativeGasUsed);
        }
        if (message.logsBloom !== "") {
            writer.uint32(34).string(message.logsBloom);
        }
        for (const v of message.logs) {
            exports.TransactionEvent_Log.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.transactionHash !== "") {
            writer.uint32(50).string(message.transactionHash);
        }
        if (message.contractAddress !== "") {
            writer.uint32(58).string(message.contractAddress);
        }
        if (message.gasUsed !== "") {
            writer.uint32(66).string(message.gasUsed);
        }
        if (message.blockHash !== "") {
            writer.uint32(74).string(message.blockHash);
        }
        if (message.blockNumber !== "") {
            writer.uint32(82).string(message.blockNumber);
        }
        if (message.transactionIndex !== "") {
            writer.uint32(90).string(message.transactionIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_EthReceipt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.root = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.status = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.cumulativeGasUsed = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.logsBloom = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.logs.push(exports.TransactionEvent_Log.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.transactionHash = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.contractAddress = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.gasUsed = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.blockNumber = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.transactionIndex = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            root: isSet(object.root) ? globalThis.String(object.root) : "",
            status: isSet(object.status) ? globalThis.String(object.status) : "",
            cumulativeGasUsed: isSet(object.cumulativeGasUsed) ? globalThis.String(object.cumulativeGasUsed) : "",
            logsBloom: isSet(object.logsBloom) ? globalThis.String(object.logsBloom) : "",
            logs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.logs) ? object.logs.map((e) => exports.TransactionEvent_Log.fromJSON(e)) : [],
            transactionHash: isSet(object.transactionHash) ? globalThis.String(object.transactionHash) : "",
            contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
            gasUsed: isSet(object.gasUsed) ? globalThis.String(object.gasUsed) : "",
            blockHash: isSet(object.blockHash) ? globalThis.String(object.blockHash) : "",
            blockNumber: isSet(object.blockNumber) ? globalThis.String(object.blockNumber) : "",
            transactionIndex: isSet(object.transactionIndex) ? globalThis.String(object.transactionIndex) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.root !== "") {
            obj.root = message.root;
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        if (message.cumulativeGasUsed !== "") {
            obj.cumulativeGasUsed = message.cumulativeGasUsed;
        }
        if (message.logsBloom !== "") {
            obj.logsBloom = message.logsBloom;
        }
        if ((_a = message.logs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.logs = message.logs.map((e) => exports.TransactionEvent_Log.toJSON(e));
        }
        if (message.transactionHash !== "") {
            obj.transactionHash = message.transactionHash;
        }
        if (message.contractAddress !== "") {
            obj.contractAddress = message.contractAddress;
        }
        if (message.gasUsed !== "") {
            obj.gasUsed = message.gasUsed;
        }
        if (message.blockHash !== "") {
            obj.blockHash = message.blockHash;
        }
        if (message.blockNumber !== "") {
            obj.blockNumber = message.blockNumber;
        }
        if (message.transactionIndex !== "") {
            obj.transactionIndex = message.transactionIndex;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_EthReceipt.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseTransactionEvent_EthReceipt();
        message.root = (_a = object.root) !== null && _a !== void 0 ? _a : "";
        message.status = (_b = object.status) !== null && _b !== void 0 ? _b : "";
        message.cumulativeGasUsed = (_c = object.cumulativeGasUsed) !== null && _c !== void 0 ? _c : "";
        message.logsBloom = (_d = object.logsBloom) !== null && _d !== void 0 ? _d : "";
        message.logs = ((_e = object.logs) === null || _e === void 0 ? void 0 : _e.map((e) => exports.TransactionEvent_Log.fromPartial(e))) || [];
        message.transactionHash = (_f = object.transactionHash) !== null && _f !== void 0 ? _f : "";
        message.contractAddress = (_g = object.contractAddress) !== null && _g !== void 0 ? _g : "";
        message.gasUsed = (_h = object.gasUsed) !== null && _h !== void 0 ? _h : "";
        message.blockHash = (_j = object.blockHash) !== null && _j !== void 0 ? _j : "";
        message.blockNumber = (_k = object.blockNumber) !== null && _k !== void 0 ? _k : "";
        message.transactionIndex = (_l = object.transactionIndex) !== null && _l !== void 0 ? _l : "";
        return message;
    },
};
function createBaseTransactionEvent_TraceAction() {
    return {
        callType: "",
        to: "",
        input: "",
        from: "",
        value: "",
        init: "",
        address: "",
        balance: "",
        refundAddress: "",
    };
}
exports.TransactionEvent_TraceAction = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.callType !== "") {
            writer.uint32(10).string(message.callType);
        }
        if (message.to !== "") {
            writer.uint32(18).string(message.to);
        }
        if (message.input !== "") {
            writer.uint32(26).string(message.input);
        }
        if (message.from !== "") {
            writer.uint32(34).string(message.from);
        }
        if (message.value !== "") {
            writer.uint32(42).string(message.value);
        }
        if (message.init !== "") {
            writer.uint32(50).string(message.init);
        }
        if (message.address !== "") {
            writer.uint32(58).string(message.address);
        }
        if (message.balance !== "") {
            writer.uint32(66).string(message.balance);
        }
        if (message.refundAddress !== "") {
            writer.uint32(74).string(message.refundAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_TraceAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.callType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.input = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.init = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.balance = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.refundAddress = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            callType: isSet(object.callType) ? globalThis.String(object.callType) : "",
            to: isSet(object.to) ? globalThis.String(object.to) : "",
            input: isSet(object.input) ? globalThis.String(object.input) : "",
            from: isSet(object.from) ? globalThis.String(object.from) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
            init: isSet(object.init) ? globalThis.String(object.init) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            balance: isSet(object.balance) ? globalThis.String(object.balance) : "",
            refundAddress: isSet(object.refundAddress) ? globalThis.String(object.refundAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.callType !== "") {
            obj.callType = message.callType;
        }
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.input !== "") {
            obj.input = message.input;
        }
        if (message.from !== "") {
            obj.from = message.from;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.init !== "") {
            obj.init = message.init;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.balance !== "") {
            obj.balance = message.balance;
        }
        if (message.refundAddress !== "") {
            obj.refundAddress = message.refundAddress;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_TraceAction.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseTransactionEvent_TraceAction();
        message.callType = (_a = object.callType) !== null && _a !== void 0 ? _a : "";
        message.to = (_b = object.to) !== null && _b !== void 0 ? _b : "";
        message.input = (_c = object.input) !== null && _c !== void 0 ? _c : "";
        message.from = (_d = object.from) !== null && _d !== void 0 ? _d : "";
        message.value = (_e = object.value) !== null && _e !== void 0 ? _e : "";
        message.init = (_f = object.init) !== null && _f !== void 0 ? _f : "";
        message.address = (_g = object.address) !== null && _g !== void 0 ? _g : "";
        message.balance = (_h = object.balance) !== null && _h !== void 0 ? _h : "";
        message.refundAddress = (_j = object.refundAddress) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseTransactionEvent_TraceResult() {
    return { gasUsed: "", address: "", code: "", output: "" };
}
exports.TransactionEvent_TraceResult = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.gasUsed !== "") {
            writer.uint32(10).string(message.gasUsed);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.code !== "") {
            writer.uint32(26).string(message.code);
        }
        if (message.output !== "") {
            writer.uint32(34).string(message.output);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_TraceResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.gasUsed = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.output = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            gasUsed: isSet(object.gasUsed) ? globalThis.String(object.gasUsed) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            code: isSet(object.code) ? globalThis.String(object.code) : "",
            output: isSet(object.output) ? globalThis.String(object.output) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.gasUsed !== "") {
            obj.gasUsed = message.gasUsed;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.code !== "") {
            obj.code = message.code;
        }
        if (message.output !== "") {
            obj.output = message.output;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_TraceResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTransactionEvent_TraceResult();
        message.gasUsed = (_a = object.gasUsed) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        message.code = (_c = object.code) !== null && _c !== void 0 ? _c : "";
        message.output = (_d = object.output) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseTransactionEvent_Trace() {
    return {
        action: undefined,
        blockHash: "",
        blockNumber: 0,
        result: undefined,
        subtraces: 0,
        traceAddress: [],
        transactionHash: "",
        transactionPosition: 0,
        type: "",
        error: "",
    };
}
exports.TransactionEvent_Trace = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.action !== undefined) {
            exports.TransactionEvent_TraceAction.encode(message.action, writer.uint32(10).fork()).ldelim();
        }
        if (message.blockHash !== "") {
            writer.uint32(18).string(message.blockHash);
        }
        if (message.blockNumber !== 0) {
            writer.uint32(24).int64(message.blockNumber);
        }
        if (message.result !== undefined) {
            exports.TransactionEvent_TraceResult.encode(message.result, writer.uint32(34).fork()).ldelim();
        }
        if (message.subtraces !== 0) {
            writer.uint32(40).int64(message.subtraces);
        }
        writer.uint32(50).fork();
        for (const v of message.traceAddress) {
            writer.int64(v);
        }
        writer.ldelim();
        if (message.transactionHash !== "") {
            writer.uint32(58).string(message.transactionHash);
        }
        if (message.transactionPosition !== 0) {
            writer.uint32(64).int64(message.transactionPosition);
        }
        if (message.type !== "") {
            writer.uint32(74).string(message.type);
        }
        if (message.error !== "") {
            writer.uint32(82).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_Trace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.action = exports.TransactionEvent_TraceAction.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.blockHash = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.blockNumber = longToNumber(reader.int64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.result = exports.TransactionEvent_TraceResult.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.subtraces = longToNumber(reader.int64());
                    continue;
                case 6:
                    if (tag === 48) {
                        message.traceAddress.push(longToNumber(reader.int64()));
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.traceAddress.push(longToNumber(reader.int64()));
                        }
                        continue;
                    }
                    break;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.transactionHash = reader.string();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.transactionPosition = longToNumber(reader.int64());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            action: isSet(object.action) ? exports.TransactionEvent_TraceAction.fromJSON(object.action) : undefined,
            blockHash: isSet(object.blockHash) ? globalThis.String(object.blockHash) : "",
            blockNumber: isSet(object.blockNumber) ? globalThis.Number(object.blockNumber) : 0,
            result: isSet(object.result) ? exports.TransactionEvent_TraceResult.fromJSON(object.result) : undefined,
            subtraces: isSet(object.subtraces) ? globalThis.Number(object.subtraces) : 0,
            traceAddress: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.traceAddress)
                ? object.traceAddress.map((e) => globalThis.Number(e))
                : [],
            transactionHash: isSet(object.transactionHash) ? globalThis.String(object.transactionHash) : "",
            transactionPosition: isSet(object.transactionPosition) ? globalThis.Number(object.transactionPosition) : 0,
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            error: isSet(object.error) ? globalThis.String(object.error) : "",
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.action !== undefined) {
            obj.action = exports.TransactionEvent_TraceAction.toJSON(message.action);
        }
        if (message.blockHash !== "") {
            obj.blockHash = message.blockHash;
        }
        if (message.blockNumber !== 0) {
            obj.blockNumber = Math.round(message.blockNumber);
        }
        if (message.result !== undefined) {
            obj.result = exports.TransactionEvent_TraceResult.toJSON(message.result);
        }
        if (message.subtraces !== 0) {
            obj.subtraces = Math.round(message.subtraces);
        }
        if ((_a = message.traceAddress) === null || _a === void 0 ? void 0 : _a.length) {
            obj.traceAddress = message.traceAddress.map((e) => Math.round(e));
        }
        if (message.transactionHash !== "") {
            obj.transactionHash = message.transactionHash;
        }
        if (message.transactionPosition !== 0) {
            obj.transactionPosition = Math.round(message.transactionPosition);
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_Trace.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseTransactionEvent_Trace();
        message.action = (object.action !== undefined && object.action !== null)
            ? exports.TransactionEvent_TraceAction.fromPartial(object.action)
            : undefined;
        message.blockHash = (_a = object.blockHash) !== null && _a !== void 0 ? _a : "";
        message.blockNumber = (_b = object.blockNumber) !== null && _b !== void 0 ? _b : 0;
        message.result = (object.result !== undefined && object.result !== null)
            ? exports.TransactionEvent_TraceResult.fromPartial(object.result)
            : undefined;
        message.subtraces = (_c = object.subtraces) !== null && _c !== void 0 ? _c : 0;
        message.traceAddress = ((_d = object.traceAddress) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.transactionHash = (_e = object.transactionHash) !== null && _e !== void 0 ? _e : "";
        message.transactionPosition = (_f = object.transactionPosition) !== null && _f !== void 0 ? _f : 0;
        message.type = (_g = object.type) !== null && _g !== void 0 ? _g : "";
        message.error = (_h = object.error) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseTransactionEvent_AddressesEntry() {
    return { key: "", value: false };
}
exports.TransactionEvent_AddressesEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== false) {
            writer.uint32(16).bool(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_AddressesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== false) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_AddressesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTransactionEvent_AddressesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseTransactionEvent_TxAddressesEntry() {
    return { key: "", value: false };
}
exports.TransactionEvent_TxAddressesEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== false) {
            writer.uint32(16).bool(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransactionEvent_TxAddressesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== false) {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.TransactionEvent_TxAddressesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTransactionEvent_TxAddressesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseAlertEvent() {
    return { alert: undefined, timestamps: undefined };
}
exports.AlertEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.alert !== undefined) {
            exports.AlertEvent_Alert.encode(message.alert, writer.uint32(10).fork()).ldelim();
        }
        if (message.timestamps !== undefined) {
            alert_1.TrackingTimestamps.encode(message.timestamps, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alert = exports.AlertEvent_Alert.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.timestamps = alert_1.TrackingTimestamps.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alert: isSet(object.alert) ? exports.AlertEvent_Alert.fromJSON(object.alert) : undefined,
            timestamps: isSet(object.timestamps) ? alert_1.TrackingTimestamps.fromJSON(object.timestamps) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.alert !== undefined) {
            obj.alert = exports.AlertEvent_Alert.toJSON(message.alert);
        }
        if (message.timestamps !== undefined) {
            obj.timestamps = alert_1.TrackingTimestamps.toJSON(message.timestamps);
        }
        return obj;
    },
    create(base) {
        return exports.AlertEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAlertEvent();
        message.alert = (object.alert !== undefined && object.alert !== null)
            ? exports.AlertEvent_Alert.fromPartial(object.alert)
            : undefined;
        message.timestamps = (object.timestamps !== undefined && object.timestamps !== null)
            ? alert_1.TrackingTimestamps.fromPartial(object.timestamps)
            : undefined;
        return message;
    },
};
function createBaseAlertEvent_Alert() {
    return {
        alertId: "",
        addresses: [],
        contracts: [],
        createdAt: "",
        description: "",
        hash: "",
        metadata: {},
        name: "",
        projects: [],
        scanNodeCount: 0,
        severity: "",
        source: undefined,
        findingType: "",
        relatedAlerts: [],
        chainId: 0,
        labels: [],
        truncated: false,
        addressBloomFilter: undefined,
    };
}
exports.AlertEvent_Alert = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.alertId !== "") {
            writer.uint32(10).string(message.alertId);
        }
        for (const v of message.addresses) {
            writer.uint32(18).string(v);
        }
        for (const v of message.contracts) {
            exports.AlertEvent_Alert_Contract.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.createdAt !== "") {
            writer.uint32(34).string(message.createdAt);
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        if (message.hash !== "") {
            writer.uint32(50).string(message.hash);
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            exports.AlertEvent_Alert_MetadataEntry.encode({ key: key, value }, writer.uint32(58).fork()).ldelim();
        });
        if (message.name !== "") {
            writer.uint32(66).string(message.name);
        }
        for (const v of message.projects) {
            exports.AlertEvent_Alert_Project.encode(v, writer.uint32(74).fork()).ldelim();
        }
        if (message.scanNodeCount !== 0) {
            writer.uint32(80).int32(message.scanNodeCount);
        }
        if (message.severity !== "") {
            writer.uint32(90).string(message.severity);
        }
        if (message.source !== undefined) {
            exports.AlertEvent_Alert_Source.encode(message.source, writer.uint32(98).fork()).ldelim();
        }
        if (message.findingType !== "") {
            writer.uint32(106).string(message.findingType);
        }
        for (const v of message.relatedAlerts) {
            writer.uint32(114).string(v);
        }
        if (message.chainId !== 0) {
            writer.uint32(120).uint64(message.chainId);
        }
        for (const v of message.labels) {
            exports.AlertEvent_Alert_Label.encode(v, writer.uint32(130).fork()).ldelim();
        }
        if (message.truncated !== false) {
            writer.uint32(136).bool(message.truncated);
        }
        if (message.addressBloomFilter !== undefined) {
            alert_1.BloomFilter.encode(message.addressBloomFilter, writer.uint32(146).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertEvent_Alert();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alertId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.addresses.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.contracts.push(exports.AlertEvent_Alert_Contract.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    const entry7 = exports.AlertEvent_Alert_MetadataEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.metadata[entry7.key] = entry7.value;
                    }
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.projects.push(exports.AlertEvent_Alert_Project.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.scanNodeCount = reader.int32();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.severity = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.source = exports.AlertEvent_Alert_Source.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.findingType = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.relatedAlerts.push(reader.string());
                    continue;
                case 15:
                    if (tag !== 120) {
                        break;
                    }
                    message.chainId = longToNumber(reader.uint64());
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.labels.push(exports.AlertEvent_Alert_Label.decode(reader, reader.uint32()));
                    continue;
                case 17:
                    if (tag !== 136) {
                        break;
                    }
                    message.truncated = reader.bool();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.addressBloomFilter = alert_1.BloomFilter.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alertId: isSet(object.alertId) ? globalThis.String(object.alertId) : "",
            addresses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.addresses)
                ? object.addresses.map((e) => globalThis.String(e))
                : [],
            contracts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.contracts)
                ? object.contracts.map((e) => exports.AlertEvent_Alert_Contract.fromJSON(e))
                : [],
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            projects: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projects)
                ? object.projects.map((e) => exports.AlertEvent_Alert_Project.fromJSON(e))
                : [],
            scanNodeCount: isSet(object.scanNodeCount) ? globalThis.Number(object.scanNodeCount) : 0,
            severity: isSet(object.severity) ? globalThis.String(object.severity) : "",
            source: isSet(object.source) ? exports.AlertEvent_Alert_Source.fromJSON(object.source) : undefined,
            findingType: isSet(object.findingType) ? globalThis.String(object.findingType) : "",
            relatedAlerts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.relatedAlerts)
                ? object.relatedAlerts.map((e) => globalThis.String(e))
                : [],
            chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
            labels: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.labels)
                ? object.labels.map((e) => exports.AlertEvent_Alert_Label.fromJSON(e))
                : [],
            truncated: isSet(object.truncated) ? globalThis.Boolean(object.truncated) : false,
            addressBloomFilter: isSet(object.addressBloomFilter)
                ? alert_1.BloomFilter.fromJSON(object.addressBloomFilter)
                : undefined,
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e;
        const obj = {};
        if (message.alertId !== "") {
            obj.alertId = message.alertId;
        }
        if ((_a = message.addresses) === null || _a === void 0 ? void 0 : _a.length) {
            obj.addresses = message.addresses;
        }
        if ((_b = message.contracts) === null || _b === void 0 ? void 0 : _b.length) {
            obj.contracts = message.contracts.map((e) => exports.AlertEvent_Alert_Contract.toJSON(e));
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if ((_c = message.projects) === null || _c === void 0 ? void 0 : _c.length) {
            obj.projects = message.projects.map((e) => exports.AlertEvent_Alert_Project.toJSON(e));
        }
        if (message.scanNodeCount !== 0) {
            obj.scanNodeCount = Math.round(message.scanNodeCount);
        }
        if (message.severity !== "") {
            obj.severity = message.severity;
        }
        if (message.source !== undefined) {
            obj.source = exports.AlertEvent_Alert_Source.toJSON(message.source);
        }
        if (message.findingType !== "") {
            obj.findingType = message.findingType;
        }
        if ((_d = message.relatedAlerts) === null || _d === void 0 ? void 0 : _d.length) {
            obj.relatedAlerts = message.relatedAlerts;
        }
        if (message.chainId !== 0) {
            obj.chainId = Math.round(message.chainId);
        }
        if ((_e = message.labels) === null || _e === void 0 ? void 0 : _e.length) {
            obj.labels = message.labels.map((e) => exports.AlertEvent_Alert_Label.toJSON(e));
        }
        if (message.truncated !== false) {
            obj.truncated = message.truncated;
        }
        if (message.addressBloomFilter !== undefined) {
            obj.addressBloomFilter = alert_1.BloomFilter.toJSON(message.addressBloomFilter);
        }
        return obj;
    },
    create(base) {
        return exports.AlertEvent_Alert.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        const message = createBaseAlertEvent_Alert();
        message.alertId = (_a = object.alertId) !== null && _a !== void 0 ? _a : "";
        message.addresses = ((_b = object.addresses) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.contracts = ((_c = object.contracts) === null || _c === void 0 ? void 0 : _c.map((e) => exports.AlertEvent_Alert_Contract.fromPartial(e))) || [];
        message.createdAt = (_d = object.createdAt) !== null && _d !== void 0 ? _d : "";
        message.description = (_e = object.description) !== null && _e !== void 0 ? _e : "";
        message.hash = (_f = object.hash) !== null && _f !== void 0 ? _f : "";
        message.metadata = Object.entries((_g = object.metadata) !== null && _g !== void 0 ? _g : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.name = (_h = object.name) !== null && _h !== void 0 ? _h : "";
        message.projects = ((_j = object.projects) === null || _j === void 0 ? void 0 : _j.map((e) => exports.AlertEvent_Alert_Project.fromPartial(e))) || [];
        message.scanNodeCount = (_k = object.scanNodeCount) !== null && _k !== void 0 ? _k : 0;
        message.severity = (_l = object.severity) !== null && _l !== void 0 ? _l : "";
        message.source = (object.source !== undefined && object.source !== null)
            ? exports.AlertEvent_Alert_Source.fromPartial(object.source)
            : undefined;
        message.findingType = (_m = object.findingType) !== null && _m !== void 0 ? _m : "";
        message.relatedAlerts = ((_o = object.relatedAlerts) === null || _o === void 0 ? void 0 : _o.map((e) => e)) || [];
        message.chainId = (_p = object.chainId) !== null && _p !== void 0 ? _p : 0;
        message.labels = ((_q = object.labels) === null || _q === void 0 ? void 0 : _q.map((e) => exports.AlertEvent_Alert_Label.fromPartial(e))) || [];
        message.truncated = (_r = object.truncated) !== null && _r !== void 0 ? _r : false;
        message.addressBloomFilter = (object.addressBloomFilter !== undefined && object.addressBloomFilter !== null)
            ? alert_1.BloomFilter.fromPartial(object.addressBloomFilter)
            : undefined;
        return message;
    },
};
function createBaseAlertEvent_Alert_Contract() {
    return { name: "", projectId: "" };
}
exports.AlertEvent_Alert_Contract = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.projectId !== "") {
            writer.uint32(18).string(message.projectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertEvent_Alert_Contract();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.projectId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.projectId !== "") {
            obj.projectId = message.projectId;
        }
        return obj;
    },
    create(base) {
        return exports.AlertEvent_Alert_Contract.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAlertEvent_Alert_Contract();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.projectId = (_b = object.projectId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAlertEvent_Alert_Project() {
    return { id: "" };
}
exports.AlertEvent_Alert_Project = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertEvent_Alert_Project();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AlertEvent_Alert_Project.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAlertEvent_Alert_Project();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAlertEvent_Alert_Block() {
    return { number: 0, hash: "", timestamp: "", chainId: 0 };
}
exports.AlertEvent_Alert_Block = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.number !== 0) {
            writer.uint32(8).uint64(message.number);
        }
        if (message.hash !== "") {
            writer.uint32(18).string(message.hash);
        }
        if (message.timestamp !== "") {
            writer.uint32(26).string(message.timestamp);
        }
        if (message.chainId !== 0) {
            writer.uint32(32).uint64(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertEvent_Alert_Block();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.number = longToNumber(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.timestamp = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.chainId = longToNumber(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            number: isSet(object.number) ? globalThis.Number(object.number) : 0,
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
            chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.number !== 0) {
            obj.number = Math.round(message.number);
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.timestamp !== "") {
            obj.timestamp = message.timestamp;
        }
        if (message.chainId !== 0) {
            obj.chainId = Math.round(message.chainId);
        }
        return obj;
    },
    create(base) {
        return exports.AlertEvent_Alert_Block.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseAlertEvent_Alert_Block();
        message.number = (_a = object.number) !== null && _a !== void 0 ? _a : 0;
        message.hash = (_b = object.hash) !== null && _b !== void 0 ? _b : "";
        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : "";
        message.chainId = (_d = object.chainId) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseAlertEvent_Alert_Bot() {
    return {
        chainIds: [],
        createdAt: "",
        description: "",
        developer: "",
        DocReference: "",
        enabled: false,
        id: "",
        image: "",
        name: "",
        reference: "",
        repository: "",
        projects: [],
        scanNodes: [],
        version: "",
    };
}
exports.AlertEvent_Alert_Bot = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.chainIds) {
            writer.uint32(10).string(v);
        }
        if (message.createdAt !== "") {
            writer.uint32(18).string(message.createdAt);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.developer !== "") {
            writer.uint32(34).string(message.developer);
        }
        if (message.DocReference !== "") {
            writer.uint32(42).string(message.DocReference);
        }
        if (message.enabled !== false) {
            writer.uint32(48).bool(message.enabled);
        }
        if (message.id !== "") {
            writer.uint32(58).string(message.id);
        }
        if (message.image !== "") {
            writer.uint32(66).string(message.image);
        }
        if (message.name !== "") {
            writer.uint32(74).string(message.name);
        }
        if (message.reference !== "") {
            writer.uint32(82).string(message.reference);
        }
        if (message.repository !== "") {
            writer.uint32(90).string(message.repository);
        }
        for (const v of message.projects) {
            writer.uint32(98).string(v);
        }
        for (const v of message.scanNodes) {
            writer.uint32(106).string(v);
        }
        if (message.version !== "") {
            writer.uint32(114).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertEvent_Alert_Bot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.chainIds.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.createdAt = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.developer = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.DocReference = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.enabled = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.image = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.reference = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.repository = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.projects.push(reader.string());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.scanNodes.push(reader.string());
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            chainIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.chainIds) ? object.chainIds.map((e) => globalThis.String(e)) : [],
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            developer: isSet(object.developer) ? globalThis.String(object.developer) : "",
            DocReference: isSet(object.DocReference) ? globalThis.String(object.DocReference) : "",
            enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            image: isSet(object.image) ? globalThis.String(object.image) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            reference: isSet(object.reference) ? globalThis.String(object.reference) : "",
            repository: isSet(object.repository) ? globalThis.String(object.repository) : "",
            projects: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projects) ? object.projects.map((e) => globalThis.String(e)) : [],
            scanNodes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scanNodes)
                ? object.scanNodes.map((e) => globalThis.String(e))
                : [],
            version: isSet(object.version) ? globalThis.String(object.version) : "",
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if ((_a = message.chainIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.chainIds = message.chainIds;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.developer !== "") {
            obj.developer = message.developer;
        }
        if (message.DocReference !== "") {
            obj.DocReference = message.DocReference;
        }
        if (message.enabled !== false) {
            obj.enabled = message.enabled;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.image !== "") {
            obj.image = message.image;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.reference !== "") {
            obj.reference = message.reference;
        }
        if (message.repository !== "") {
            obj.repository = message.repository;
        }
        if ((_b = message.projects) === null || _b === void 0 ? void 0 : _b.length) {
            obj.projects = message.projects;
        }
        if ((_c = message.scanNodes) === null || _c === void 0 ? void 0 : _c.length) {
            obj.scanNodes = message.scanNodes;
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        return obj;
    },
    create(base) {
        return exports.AlertEvent_Alert_Bot.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const message = createBaseAlertEvent_Alert_Bot();
        message.chainIds = ((_a = object.chainIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.createdAt = (_b = object.createdAt) !== null && _b !== void 0 ? _b : "";
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : "";
        message.developer = (_d = object.developer) !== null && _d !== void 0 ? _d : "";
        message.DocReference = (_e = object.DocReference) !== null && _e !== void 0 ? _e : "";
        message.enabled = (_f = object.enabled) !== null && _f !== void 0 ? _f : false;
        message.id = (_g = object.id) !== null && _g !== void 0 ? _g : "";
        message.image = (_h = object.image) !== null && _h !== void 0 ? _h : "";
        message.name = (_j = object.name) !== null && _j !== void 0 ? _j : "";
        message.reference = (_k = object.reference) !== null && _k !== void 0 ? _k : "";
        message.repository = (_l = object.repository) !== null && _l !== void 0 ? _l : "";
        message.projects = ((_m = object.projects) === null || _m === void 0 ? void 0 : _m.map((e) => e)) || [];
        message.scanNodes = ((_o = object.scanNodes) === null || _o === void 0 ? void 0 : _o.map((e) => e)) || [];
        message.version = (_p = object.version) !== null && _p !== void 0 ? _p : "";
        return message;
    },
};
function createBaseAlertEvent_Alert_SourceAlertEvent() {
    return { botId: "", hash: "", timestamp: "", chainId: 0 };
}
exports.AlertEvent_Alert_SourceAlertEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.botId !== "") {
            writer.uint32(10).string(message.botId);
        }
        if (message.hash !== "") {
            writer.uint32(18).string(message.hash);
        }
        if (message.timestamp !== "") {
            writer.uint32(26).string(message.timestamp);
        }
        if (message.chainId !== 0) {
            writer.uint32(32).uint64(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertEvent_Alert_SourceAlertEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.botId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.timestamp = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.chainId = longToNumber(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            botId: isSet(object.botId) ? globalThis.String(object.botId) : "",
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "",
            chainId: isSet(object.chainId) ? globalThis.Number(object.chainId) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.botId !== "") {
            obj.botId = message.botId;
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.timestamp !== "") {
            obj.timestamp = message.timestamp;
        }
        if (message.chainId !== 0) {
            obj.chainId = Math.round(message.chainId);
        }
        return obj;
    },
    create(base) {
        return exports.AlertEvent_Alert_SourceAlertEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseAlertEvent_Alert_SourceAlertEvent();
        message.botId = (_a = object.botId) !== null && _a !== void 0 ? _a : "";
        message.hash = (_b = object.hash) !== null && _b !== void 0 ? _b : "";
        message.timestamp = (_c = object.timestamp) !== null && _c !== void 0 ? _c : "";
        message.chainId = (_d = object.chainId) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseAlertEvent_Alert_Source() {
    return { transactionHash: "", bot: undefined, block: undefined, sourceAlert: undefined };
}
exports.AlertEvent_Alert_Source = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.transactionHash !== "") {
            writer.uint32(10).string(message.transactionHash);
        }
        if (message.bot !== undefined) {
            exports.AlertEvent_Alert_Bot.encode(message.bot, writer.uint32(18).fork()).ldelim();
        }
        if (message.block !== undefined) {
            exports.AlertEvent_Alert_Block.encode(message.block, writer.uint32(26).fork()).ldelim();
        }
        if (message.sourceAlert !== undefined) {
            exports.AlertEvent_Alert_SourceAlertEvent.encode(message.sourceAlert, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertEvent_Alert_Source();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.transactionHash = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.bot = exports.AlertEvent_Alert_Bot.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.block = exports.AlertEvent_Alert_Block.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.sourceAlert = exports.AlertEvent_Alert_SourceAlertEvent.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            transactionHash: isSet(object.transactionHash) ? globalThis.String(object.transactionHash) : "",
            bot: isSet(object.bot) ? exports.AlertEvent_Alert_Bot.fromJSON(object.bot) : undefined,
            block: isSet(object.block) ? exports.AlertEvent_Alert_Block.fromJSON(object.block) : undefined,
            sourceAlert: isSet(object.sourceAlert)
                ? exports.AlertEvent_Alert_SourceAlertEvent.fromJSON(object.sourceAlert)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.transactionHash !== "") {
            obj.transactionHash = message.transactionHash;
        }
        if (message.bot !== undefined) {
            obj.bot = exports.AlertEvent_Alert_Bot.toJSON(message.bot);
        }
        if (message.block !== undefined) {
            obj.block = exports.AlertEvent_Alert_Block.toJSON(message.block);
        }
        if (message.sourceAlert !== undefined) {
            obj.sourceAlert = exports.AlertEvent_Alert_SourceAlertEvent.toJSON(message.sourceAlert);
        }
        return obj;
    },
    create(base) {
        return exports.AlertEvent_Alert_Source.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAlertEvent_Alert_Source();
        message.transactionHash = (_a = object.transactionHash) !== null && _a !== void 0 ? _a : "";
        message.bot = (object.bot !== undefined && object.bot !== null)
            ? exports.AlertEvent_Alert_Bot.fromPartial(object.bot)
            : undefined;
        message.block = (object.block !== undefined && object.block !== null)
            ? exports.AlertEvent_Alert_Block.fromPartial(object.block)
            : undefined;
        message.sourceAlert = (object.sourceAlert !== undefined && object.sourceAlert !== null)
            ? exports.AlertEvent_Alert_SourceAlertEvent.fromPartial(object.sourceAlert)
            : undefined;
        return message;
    },
};
function createBaseAlertEvent_Alert_Label() {
    return {
        label: "",
        confidence: 0,
        entity: "",
        entityType: "",
        remove: false,
        metadata: [],
        uniqueKey: "",
        embedding: [],
    };
}
exports.AlertEvent_Alert_Label = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.label !== "") {
            writer.uint32(10).string(message.label);
        }
        if (message.confidence !== 0) {
            writer.uint32(21).float(message.confidence);
        }
        if (message.entity !== "") {
            writer.uint32(26).string(message.entity);
        }
        if (message.entityType !== "") {
            writer.uint32(34).string(message.entityType);
        }
        if (message.remove !== false) {
            writer.uint32(40).bool(message.remove);
        }
        for (const v of message.metadata) {
            writer.uint32(50).string(v);
        }
        if (message.uniqueKey !== "") {
            writer.uint32(58).string(message.uniqueKey);
        }
        writer.uint32(66).fork();
        for (const v of message.embedding) {
            writer.float(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertEvent_Alert_Label();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.confidence = reader.float();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.entity = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.entityType = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.remove = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.metadata.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.uniqueKey = reader.string();
                    continue;
                case 8:
                    if (tag === 69) {
                        message.embedding.push(reader.float());
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.embedding.push(reader.float());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            label: isSet(object.label) ? globalThis.String(object.label) : "",
            confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
            entity: isSet(object.entity) ? globalThis.String(object.entity) : "",
            entityType: isSet(object.entityType) ? globalThis.String(object.entityType) : "",
            remove: isSet(object.remove) ? globalThis.Boolean(object.remove) : false,
            metadata: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.metadata) ? object.metadata.map((e) => globalThis.String(e)) : [],
            uniqueKey: isSet(object.uniqueKey) ? globalThis.String(object.uniqueKey) : "",
            embedding: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.embedding)
                ? object.embedding.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.label !== "") {
            obj.label = message.label;
        }
        if (message.confidence !== 0) {
            obj.confidence = message.confidence;
        }
        if (message.entity !== "") {
            obj.entity = message.entity;
        }
        if (message.entityType !== "") {
            obj.entityType = message.entityType;
        }
        if (message.remove !== false) {
            obj.remove = message.remove;
        }
        if ((_a = message.metadata) === null || _a === void 0 ? void 0 : _a.length) {
            obj.metadata = message.metadata;
        }
        if (message.uniqueKey !== "") {
            obj.uniqueKey = message.uniqueKey;
        }
        if ((_b = message.embedding) === null || _b === void 0 ? void 0 : _b.length) {
            obj.embedding = message.embedding;
        }
        return obj;
    },
    create(base) {
        return exports.AlertEvent_Alert_Label.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseAlertEvent_Alert_Label();
        message.label = (_a = object.label) !== null && _a !== void 0 ? _a : "";
        message.confidence = (_b = object.confidence) !== null && _b !== void 0 ? _b : 0;
        message.entity = (_c = object.entity) !== null && _c !== void 0 ? _c : "";
        message.entityType = (_d = object.entityType) !== null && _d !== void 0 ? _d : "";
        message.remove = (_e = object.remove) !== null && _e !== void 0 ? _e : false;
        message.metadata = ((_f = object.metadata) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.uniqueKey = (_g = object.uniqueKey) !== null && _g !== void 0 ? _g : "";
        message.embedding = ((_h = object.embedding) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        return message;
    },
};
function createBaseAlertEvent_Alert_MetadataEntry() {
    return { key: "", value: "" };
}
exports.AlertEvent_Alert_MetadataEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlertEvent_Alert_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.AlertEvent_Alert_MetadataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAlertEvent_Alert_MetadataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
exports.AgentServiceServiceName = "model.v1.AgentService";
class AgentServiceClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.AgentServiceServiceName;
        this.rpc = rpc;
        this.Initialize = this.Initialize.bind(this);
        this.EvaluateTx = this.EvaluateTx.bind(this);
        this.EvaluateBlock = this.EvaluateBlock.bind(this);
        this.EvaluateAlert = this.EvaluateAlert.bind(this);
        this.HealthCheck = this.HealthCheck.bind(this);
    }
    Initialize(request) {
        const data = exports.InitializeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Initialize", data);
        return promise.then((data) => exports.InitializeResponse.decode(_m0.Reader.create(data)));
    }
    EvaluateTx(request) {
        const data = exports.EvaluateTxRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EvaluateTx", data);
        return promise.then((data) => exports.EvaluateTxResponse.decode(_m0.Reader.create(data)));
    }
    EvaluateBlock(request) {
        const data = exports.EvaluateBlockRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EvaluateBlock", data);
        return promise.then((data) => exports.EvaluateBlockResponse.decode(_m0.Reader.create(data)));
    }
    EvaluateAlert(request) {
        const data = exports.EvaluateAlertRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EvaluateAlert", data);
        return promise.then((data) => exports.EvaluateAlertResponse.decode(_m0.Reader.create(data)));
    }
    HealthCheck(request) {
        const data = exports.HealthCheckRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "HealthCheck", data);
        return promise.then((data) => exports.HealthCheckResponse.decode(_m0.Reader.create(data)));
    }
}
exports.AgentServiceClientImpl = AgentServiceClientImpl;
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
