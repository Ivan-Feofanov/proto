// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file model/v1/agent.proto (package model.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BloomFilter, Finding, TrackingTimestamps } from "./alert_pb.js";

/**
 * @generated from enum model.v1.ResponseStatus
 */
export enum ResponseStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: ERROR = 1;
   */
  ERROR = 1,

  /**
   * @generated from enum value: SUCCESS = 2;
   */
  SUCCESS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ResponseStatus)
proto3.util.setEnumType(ResponseStatus, "model.v1.ResponseStatus", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "ERROR" },
  { no: 2, name: "SUCCESS" },
]);

/**
 * @generated from message model.v1.Error
 */
export class Error extends Message<Error> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error {
    return new Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJsonString(jsonString, options);
  }

  static equals(a: Error | PlainMessage<Error> | undefined, b: Error | PlainMessage<Error> | undefined): boolean {
    return proto3.util.equals(Error, a, b);
  }
}

/**
 * @generated from message model.v1.HealthCheckRequest
 */
export class HealthCheckRequest extends Message<HealthCheckRequest> {
  constructor(data?: PartialMessage<HealthCheckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.HealthCheckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheckRequest {
    return new HealthCheckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheckRequest {
    return new HealthCheckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheckRequest {
    return new HealthCheckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HealthCheckRequest | PlainMessage<HealthCheckRequest> | undefined, b: HealthCheckRequest | PlainMessage<HealthCheckRequest> | undefined): boolean {
    return proto3.util.equals(HealthCheckRequest, a, b);
  }
}

/**
 * @generated from message model.v1.HealthCheckResponse
 */
export class HealthCheckResponse extends Message<HealthCheckResponse> {
  /**
   * @generated from field: model.v1.HealthCheckResponse.ResponseStatus status = 1;
   */
  status = HealthCheckResponse_ResponseStatus.UNKNOWN;

  /**
   * @generated from field: repeated model.v1.Error errors = 2;
   */
  errors: Error[] = [];

  constructor(data?: PartialMessage<HealthCheckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.HealthCheckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(HealthCheckResponse_ResponseStatus) },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheckResponse {
    return new HealthCheckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheckResponse {
    return new HealthCheckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheckResponse {
    return new HealthCheckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HealthCheckResponse | PlainMessage<HealthCheckResponse> | undefined, b: HealthCheckResponse | PlainMessage<HealthCheckResponse> | undefined): boolean {
    return proto3.util.equals(HealthCheckResponse, a, b);
  }
}

/**
 * @generated from enum model.v1.HealthCheckResponse.ResponseStatus
 */
export enum HealthCheckResponse_ResponseStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: ERROR = 1;
   */
  ERROR = 1,

  /**
   * @generated from enum value: SUCCESS = 2;
   */
  SUCCESS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(HealthCheckResponse_ResponseStatus)
proto3.util.setEnumType(HealthCheckResponse_ResponseStatus, "model.v1.HealthCheckResponse.ResponseStatus", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "ERROR" },
  { no: 2, name: "SUCCESS" },
]);

/**
 * @generated from message model.v1.InitializeRequest
 */
export class InitializeRequest extends Message<InitializeRequest> {
  /**
   * @generated from field: string agentId = 1;
   */
  agentId = "";

  /**
   * @generated from field: string proxyHost = 2;
   */
  proxyHost = "";

  /**
   * @generated from field: int32 shardId = 3;
   */
  shardId = 0;

  constructor(data?: PartialMessage<InitializeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.InitializeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agentId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "proxyHost", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "shardId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeRequest {
    return new InitializeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeRequest {
    return new InitializeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeRequest {
    return new InitializeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeRequest | PlainMessage<InitializeRequest> | undefined, b: InitializeRequest | PlainMessage<InitializeRequest> | undefined): boolean {
    return proto3.util.equals(InitializeRequest, a, b);
  }
}

/**
 * @generated from message model.v1.InitializeResponse
 */
export class InitializeResponse extends Message<InitializeResponse> {
  /**
   * @generated from field: model.v1.ResponseStatus status = 1;
   */
  status = ResponseStatus.UNKNOWN;

  /**
   * @generated from field: repeated model.v1.Error errors = 2;
   */
  errors: Error[] = [];

  /**
   * @generated from field: repeated string addresses = 3;
   */
  addresses: string[] = [];

  /**
   * @generated from field: model.v1.AlertConfig alertConfig = 4;
   */
  alertConfig?: AlertConfig;

  constructor(data?: PartialMessage<InitializeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.InitializeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ResponseStatus) },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
    { no: 3, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "alertConfig", kind: "message", T: AlertConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeResponse {
    return new InitializeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeResponse {
    return new InitializeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeResponse {
    return new InitializeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeResponse | PlainMessage<InitializeResponse> | undefined, b: InitializeResponse | PlainMessage<InitializeResponse> | undefined): boolean {
    return proto3.util.equals(InitializeResponse, a, b);
  }
}

/**
 * @generated from message model.v1.AlertConfig
 */
export class AlertConfig extends Message<AlertConfig> {
  /**
   * @generated from field: repeated model.v1.CombinerBotSubscription subscriptions = 1;
   */
  subscriptions: CombinerBotSubscription[] = [];

  constructor(data?: PartialMessage<AlertConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.AlertConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscriptions", kind: "message", T: CombinerBotSubscription, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConfig {
    return new AlertConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConfig {
    return new AlertConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConfig {
    return new AlertConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConfig | PlainMessage<AlertConfig> | undefined, b: AlertConfig | PlainMessage<AlertConfig> | undefined): boolean {
    return proto3.util.equals(AlertConfig, a, b);
  }
}

/**
 * @generated from message model.v1.CombinerBotSubscription
 */
export class CombinerBotSubscription extends Message<CombinerBotSubscription> {
  /**
   * @generated from field: string botId = 1;
   */
  botId = "";

  /**
   * @generated from field: string alertId = 2;
   */
  alertId = "";

  /**
   * @generated from field: repeated string alertIds = 3;
   */
  alertIds: string[] = [];

  /**
   * @generated from field: uint64 chainId = 4;
   */
  chainId = protoInt64.zero;

  constructor(data?: PartialMessage<CombinerBotSubscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.CombinerBotSubscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "botId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alertId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "alertIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "chainId", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CombinerBotSubscription {
    return new CombinerBotSubscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CombinerBotSubscription {
    return new CombinerBotSubscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CombinerBotSubscription {
    return new CombinerBotSubscription().fromJsonString(jsonString, options);
  }

  static equals(a: CombinerBotSubscription | PlainMessage<CombinerBotSubscription> | undefined, b: CombinerBotSubscription | PlainMessage<CombinerBotSubscription> | undefined): boolean {
    return proto3.util.equals(CombinerBotSubscription, a, b);
  }
}

/**
 * @generated from message model.v1.EvaluateTxRequest
 */
export class EvaluateTxRequest extends Message<EvaluateTxRequest> {
  /**
   * @generated from field: string requestId = 1;
   */
  requestId = "";

  /**
   * @generated from field: model.v1.TransactionEvent event = 2;
   */
  event?: TransactionEvent;

  /**
   * @generated from field: int32 shardId = 3;
   */
  shardId = 0;

  constructor(data?: PartialMessage<EvaluateTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.EvaluateTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requestId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event", kind: "message", T: TransactionEvent },
    { no: 3, name: "shardId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvaluateTxRequest {
    return new EvaluateTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvaluateTxRequest {
    return new EvaluateTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvaluateTxRequest {
    return new EvaluateTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EvaluateTxRequest | PlainMessage<EvaluateTxRequest> | undefined, b: EvaluateTxRequest | PlainMessage<EvaluateTxRequest> | undefined): boolean {
    return proto3.util.equals(EvaluateTxRequest, a, b);
  }
}

/**
 * @generated from message model.v1.EvaluateBlockRequest
 */
export class EvaluateBlockRequest extends Message<EvaluateBlockRequest> {
  /**
   * @generated from field: string requestId = 1;
   */
  requestId = "";

  /**
   * @generated from field: model.v1.BlockEvent event = 2;
   */
  event?: BlockEvent;

  /**
   * @generated from field: int32 shardId = 3;
   */
  shardId = 0;

  constructor(data?: PartialMessage<EvaluateBlockRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.EvaluateBlockRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requestId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event", kind: "message", T: BlockEvent },
    { no: 3, name: "shardId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvaluateBlockRequest {
    return new EvaluateBlockRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvaluateBlockRequest {
    return new EvaluateBlockRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvaluateBlockRequest {
    return new EvaluateBlockRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EvaluateBlockRequest | PlainMessage<EvaluateBlockRequest> | undefined, b: EvaluateBlockRequest | PlainMessage<EvaluateBlockRequest> | undefined): boolean {
    return proto3.util.equals(EvaluateBlockRequest, a, b);
  }
}

/**
 * @generated from message model.v1.EvaluateAlertRequest
 */
export class EvaluateAlertRequest extends Message<EvaluateAlertRequest> {
  /**
   * @generated from field: string requestId = 1;
   */
  requestId = "";

  /**
   * @generated from field: model.v1.AlertEvent event = 2;
   */
  event?: AlertEvent;

  /**
   * @generated from field: string targetBotId = 3;
   */
  targetBotId = "";

  /**
   * @generated from field: int32 shardId = 4;
   */
  shardId = 0;

  constructor(data?: PartialMessage<EvaluateAlertRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.EvaluateAlertRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requestId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event", kind: "message", T: AlertEvent },
    { no: 3, name: "targetBotId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "shardId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvaluateAlertRequest {
    return new EvaluateAlertRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvaluateAlertRequest {
    return new EvaluateAlertRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvaluateAlertRequest {
    return new EvaluateAlertRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EvaluateAlertRequest | PlainMessage<EvaluateAlertRequest> | undefined, b: EvaluateAlertRequest | PlainMessage<EvaluateAlertRequest> | undefined): boolean {
    return proto3.util.equals(EvaluateAlertRequest, a, b);
  }
}

/**
 * @generated from message model.v1.EvaluateTxResponse
 */
export class EvaluateTxResponse extends Message<EvaluateTxResponse> {
  /**
   * @generated from field: model.v1.ResponseStatus status = 1;
   */
  status = ResponseStatus.UNKNOWN;

  /**
   * @generated from field: repeated model.v1.Error errors = 2;
   */
  errors: Error[] = [];

  /**
   * @generated from field: repeated model.v1.Finding findings = 3;
   */
  findings: Finding[] = [];

  /**
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: string timestamp = 5;
   */
  timestamp = "";

  /**
   * @generated from field: uint32 latencyMs = 6;
   */
  latencyMs = 0;

  /**
   * @generated from field: bool private = 7;
   */
  private = false;

  constructor(data?: PartialMessage<EvaluateTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.EvaluateTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ResponseStatus) },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
    { no: 3, name: "findings", kind: "message", T: Finding, repeated: true },
    { no: 4, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "latencyMs", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "private", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvaluateTxResponse {
    return new EvaluateTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvaluateTxResponse {
    return new EvaluateTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvaluateTxResponse {
    return new EvaluateTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EvaluateTxResponse | PlainMessage<EvaluateTxResponse> | undefined, b: EvaluateTxResponse | PlainMessage<EvaluateTxResponse> | undefined): boolean {
    return proto3.util.equals(EvaluateTxResponse, a, b);
  }
}

/**
 * @generated from message model.v1.EvaluateBlockResponse
 */
export class EvaluateBlockResponse extends Message<EvaluateBlockResponse> {
  /**
   * @generated from field: model.v1.ResponseStatus status = 1;
   */
  status = ResponseStatus.UNKNOWN;

  /**
   * @generated from field: repeated model.v1.Error errors = 2;
   */
  errors: Error[] = [];

  /**
   * @generated from field: repeated model.v1.Finding findings = 3;
   */
  findings: Finding[] = [];

  /**
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: string timestamp = 5;
   */
  timestamp = "";

  /**
   * @generated from field: uint32 latencyMs = 6;
   */
  latencyMs = 0;

  /**
   * @generated from field: bool private = 7;
   */
  private = false;

  constructor(data?: PartialMessage<EvaluateBlockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.EvaluateBlockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ResponseStatus) },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
    { no: 3, name: "findings", kind: "message", T: Finding, repeated: true },
    { no: 4, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "latencyMs", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "private", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvaluateBlockResponse {
    return new EvaluateBlockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvaluateBlockResponse {
    return new EvaluateBlockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvaluateBlockResponse {
    return new EvaluateBlockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EvaluateBlockResponse | PlainMessage<EvaluateBlockResponse> | undefined, b: EvaluateBlockResponse | PlainMessage<EvaluateBlockResponse> | undefined): boolean {
    return proto3.util.equals(EvaluateBlockResponse, a, b);
  }
}

/**
 * @generated from message model.v1.EvaluateAlertResponse
 */
export class EvaluateAlertResponse extends Message<EvaluateAlertResponse> {
  /**
   * @generated from field: model.v1.ResponseStatus status = 1;
   */
  status = ResponseStatus.UNKNOWN;

  /**
   * @generated from field: repeated model.v1.Error errors = 2;
   */
  errors: Error[] = [];

  /**
   * @generated from field: repeated model.v1.Finding findings = 3;
   */
  findings: Finding[] = [];

  /**
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: string timestamp = 5;
   */
  timestamp = "";

  /**
   * @generated from field: uint32 latencyMs = 6;
   */
  latencyMs = 0;

  /**
   * @generated from field: bool private = 7;
   */
  private = false;

  constructor(data?: PartialMessage<EvaluateAlertResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.EvaluateAlertResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ResponseStatus) },
    { no: 2, name: "errors", kind: "message", T: Error, repeated: true },
    { no: 3, name: "findings", kind: "message", T: Finding, repeated: true },
    { no: 4, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "latencyMs", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "private", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvaluateAlertResponse {
    return new EvaluateAlertResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvaluateAlertResponse {
    return new EvaluateAlertResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvaluateAlertResponse {
    return new EvaluateAlertResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EvaluateAlertResponse | PlainMessage<EvaluateAlertResponse> | undefined, b: EvaluateAlertResponse | PlainMessage<EvaluateAlertResponse> | undefined): boolean {
    return proto3.util.equals(EvaluateAlertResponse, a, b);
  }
}

/**
 * @generated from message model.v1.BlockEvent
 */
export class BlockEvent extends Message<BlockEvent> {
  /**
   * @generated from field: model.v1.BlockEvent.EventType type = 1;
   */
  type = BlockEvent_EventType.BLOCK;

  /**
   * @generated from field: string blockHash = 2;
   */
  blockHash = "";

  /**
   * @generated from field: string blockNumber = 3;
   */
  blockNumber = "";

  /**
   * @generated from field: model.v1.BlockEvent.Network network = 4;
   */
  network?: BlockEvent_Network;

  /**
   * @generated from field: model.v1.BlockEvent.EthBlock block = 5;
   */
  block?: BlockEvent_EthBlock;

  /**
   * @generated from field: model.v1.TrackingTimestamps timestamps = 6;
   */
  timestamps?: TrackingTimestamps;

  constructor(data?: PartialMessage<BlockEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.BlockEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(BlockEvent_EventType) },
    { no: 2, name: "blockHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blockNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "network", kind: "message", T: BlockEvent_Network },
    { no: 5, name: "block", kind: "message", T: BlockEvent_EthBlock },
    { no: 6, name: "timestamps", kind: "message", T: TrackingTimestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockEvent {
    return new BlockEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockEvent {
    return new BlockEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockEvent {
    return new BlockEvent().fromJsonString(jsonString, options);
  }

  static equals(a: BlockEvent | PlainMessage<BlockEvent> | undefined, b: BlockEvent | PlainMessage<BlockEvent> | undefined): boolean {
    return proto3.util.equals(BlockEvent, a, b);
  }
}

/**
 * @generated from enum model.v1.BlockEvent.EventType
 */
export enum BlockEvent_EventType {
  /**
   * @generated from enum value: BLOCK = 0;
   */
  BLOCK = 0,

  /**
   * @generated from enum value: REORG = 1 [deprecated = true];
   * @deprecated
   */
  REORG = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(BlockEvent_EventType)
proto3.util.setEnumType(BlockEvent_EventType, "model.v1.BlockEvent.EventType", [
  { no: 0, name: "BLOCK" },
  { no: 1, name: "REORG" },
]);

/**
 * @generated from message model.v1.BlockEvent.Network
 */
export class BlockEvent_Network extends Message<BlockEvent_Network> {
  /**
   * @generated from field: string chainId = 1;
   */
  chainId = "";

  constructor(data?: PartialMessage<BlockEvent_Network>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.BlockEvent.Network";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chainId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockEvent_Network {
    return new BlockEvent_Network().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockEvent_Network {
    return new BlockEvent_Network().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockEvent_Network {
    return new BlockEvent_Network().fromJsonString(jsonString, options);
  }

  static equals(a: BlockEvent_Network | PlainMessage<BlockEvent_Network> | undefined, b: BlockEvent_Network | PlainMessage<BlockEvent_Network> | undefined): boolean {
    return proto3.util.equals(BlockEvent_Network, a, b);
  }
}

/**
 * @generated from message model.v1.BlockEvent.EthBlock
 */
export class BlockEvent_EthBlock extends Message<BlockEvent_EthBlock> {
  /**
   * @generated from field: string difficulty = 1;
   */
  difficulty = "";

  /**
   * @generated from field: string extraData = 2;
   */
  extraData = "";

  /**
   * @generated from field: string gasLimit = 3;
   */
  gasLimit = "";

  /**
   * @generated from field: string gasUsed = 4;
   */
  gasUsed = "";

  /**
   * @generated from field: string hash = 5;
   */
  hash = "";

  /**
   * @generated from field: string logsBloom = 6;
   */
  logsBloom = "";

  /**
   * @generated from field: string miner = 7;
   */
  miner = "";

  /**
   * @generated from field: string mixHash = 8;
   */
  mixHash = "";

  /**
   * @generated from field: string nonce = 9;
   */
  nonce = "";

  /**
   * @generated from field: string number = 10;
   */
  number = "";

  /**
   * @generated from field: string parentHash = 11;
   */
  parentHash = "";

  /**
   * @generated from field: string receiptsRoot = 12;
   */
  receiptsRoot = "";

  /**
   * @generated from field: string sha3Uncles = 13;
   */
  sha3Uncles = "";

  /**
   * @generated from field: string size = 14;
   */
  size = "";

  /**
   * @generated from field: string stateRoot = 15;
   */
  stateRoot = "";

  /**
   * @generated from field: string timestamp = 16;
   */
  timestamp = "";

  /**
   * @generated from field: string totalDifficulty = 17;
   */
  totalDifficulty = "";

  /**
   * @generated from field: repeated string transactions = 18;
   */
  transactions: string[] = [];

  /**
   * @generated from field: string transactionsRoot = 19;
   */
  transactionsRoot = "";

  /**
   * @generated from field: repeated string uncles = 20;
   */
  uncles: string[] = [];

  /**
   * @generated from field: string baseFeePerGas = 21;
   */
  baseFeePerGas = "";

  constructor(data?: PartialMessage<BlockEvent_EthBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.BlockEvent.EthBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "difficulty", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "extraData", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gasLimit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "gasUsed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "logsBloom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "miner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "mixHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "parentHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "receiptsRoot", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "sha3Uncles", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "stateRoot", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "totalDifficulty", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "transactions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 19, name: "transactionsRoot", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "uncles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 21, name: "baseFeePerGas", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockEvent_EthBlock {
    return new BlockEvent_EthBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockEvent_EthBlock {
    return new BlockEvent_EthBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockEvent_EthBlock {
    return new BlockEvent_EthBlock().fromJsonString(jsonString, options);
  }

  static equals(a: BlockEvent_EthBlock | PlainMessage<BlockEvent_EthBlock> | undefined, b: BlockEvent_EthBlock | PlainMessage<BlockEvent_EthBlock> | undefined): boolean {
    return proto3.util.equals(BlockEvent_EthBlock, a, b);
  }
}

/**
 * @generated from message model.v1.TransactionEvent
 */
export class TransactionEvent extends Message<TransactionEvent> {
  /**
   * @generated from field: model.v1.TransactionEvent.EventType type = 1;
   */
  type = TransactionEvent_EventType.BLOCK;

  /**
   * @generated from field: model.v1.TransactionEvent.EthTransaction transaction = 2;
   */
  transaction?: TransactionEvent_EthTransaction;

  /**
   * @generated from field: model.v1.TransactionEvent.EthReceipt receipt = 3 [deprecated = true];
   * @deprecated
   */
  receipt?: TransactionEvent_EthReceipt;

  /**
   * @generated from field: model.v1.TransactionEvent.Network network = 4;
   */
  network?: TransactionEvent_Network;

  /**
   * @generated from field: repeated model.v1.TransactionEvent.Trace traces = 5;
   */
  traces: TransactionEvent_Trace[] = [];

  /**
   * @generated from field: map<string, bool> addresses = 6;
   */
  addresses: { [key: string]: boolean } = {};

  /**
   * @generated from field: model.v1.TransactionEvent.EthBlock block = 7;
   */
  block?: TransactionEvent_EthBlock;

  /**
   * @generated from field: repeated model.v1.TransactionEvent.Log logs = 8;
   */
  logs: TransactionEvent_Log[] = [];

  /**
   * @generated from field: bool isContractDeployment = 9;
   */
  isContractDeployment = false;

  /**
   * @generated from field: string contractAddress = 10;
   */
  contractAddress = "";

  /**
   * @generated from field: model.v1.TrackingTimestamps timestamps = 11;
   */
  timestamps?: TrackingTimestamps;

  /**
   * @generated from field: map<string, bool> txAddresses = 12;
   */
  txAddresses: { [key: string]: boolean } = {};

  constructor(data?: PartialMessage<TransactionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.TransactionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(TransactionEvent_EventType) },
    { no: 2, name: "transaction", kind: "message", T: TransactionEvent_EthTransaction },
    { no: 3, name: "receipt", kind: "message", T: TransactionEvent_EthReceipt },
    { no: 4, name: "network", kind: "message", T: TransactionEvent_Network },
    { no: 5, name: "traces", kind: "message", T: TransactionEvent_Trace, repeated: true },
    { no: 6, name: "addresses", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
    { no: 7, name: "block", kind: "message", T: TransactionEvent_EthBlock },
    { no: 8, name: "logs", kind: "message", T: TransactionEvent_Log, repeated: true },
    { no: 9, name: "isContractDeployment", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "contractAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "timestamps", kind: "message", T: TrackingTimestamps },
    { no: 12, name: "txAddresses", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionEvent {
    return new TransactionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionEvent {
    return new TransactionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionEvent {
    return new TransactionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionEvent | PlainMessage<TransactionEvent> | undefined, b: TransactionEvent | PlainMessage<TransactionEvent> | undefined): boolean {
    return proto3.util.equals(TransactionEvent, a, b);
  }
}

/**
 * @generated from enum model.v1.TransactionEvent.EventType
 */
export enum TransactionEvent_EventType {
  /**
   * @generated from enum value: BLOCK = 0;
   */
  BLOCK = 0,

  /**
   * @generated from enum value: REORG = 1;
   */
  REORG = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(TransactionEvent_EventType)
proto3.util.setEnumType(TransactionEvent_EventType, "model.v1.TransactionEvent.EventType", [
  { no: 0, name: "BLOCK" },
  { no: 1, name: "REORG" },
]);

/**
 * @generated from message model.v1.TransactionEvent.Network
 */
export class TransactionEvent_Network extends Message<TransactionEvent_Network> {
  /**
   * @generated from field: string chainId = 1;
   */
  chainId = "";

  constructor(data?: PartialMessage<TransactionEvent_Network>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.TransactionEvent.Network";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chainId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionEvent_Network {
    return new TransactionEvent_Network().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionEvent_Network {
    return new TransactionEvent_Network().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionEvent_Network {
    return new TransactionEvent_Network().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionEvent_Network | PlainMessage<TransactionEvent_Network> | undefined, b: TransactionEvent_Network | PlainMessage<TransactionEvent_Network> | undefined): boolean {
    return proto3.util.equals(TransactionEvent_Network, a, b);
  }
}

/**
 * @generated from message model.v1.TransactionEvent.EthBlock
 */
export class TransactionEvent_EthBlock extends Message<TransactionEvent_EthBlock> {
  /**
   * @generated from field: string blockHash = 1;
   */
  blockHash = "";

  /**
   * @generated from field: string blockNumber = 2;
   */
  blockNumber = "";

  /**
   * @generated from field: string blockTimestamp = 3;
   */
  blockTimestamp = "";

  /**
   * @generated from field: string baseFeePerGas = 4;
   */
  baseFeePerGas = "";

  constructor(data?: PartialMessage<TransactionEvent_EthBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.TransactionEvent.EthBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blockHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "blockNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blockTimestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "baseFeePerGas", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionEvent_EthBlock {
    return new TransactionEvent_EthBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionEvent_EthBlock {
    return new TransactionEvent_EthBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionEvent_EthBlock {
    return new TransactionEvent_EthBlock().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionEvent_EthBlock | PlainMessage<TransactionEvent_EthBlock> | undefined, b: TransactionEvent_EthBlock | PlainMessage<TransactionEvent_EthBlock> | undefined): boolean {
    return proto3.util.equals(TransactionEvent_EthBlock, a, b);
  }
}

/**
 * @generated from message model.v1.TransactionEvent.EthTransaction
 */
export class TransactionEvent_EthTransaction extends Message<TransactionEvent_EthTransaction> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string nonce = 2;
   */
  nonce = "";

  /**
   * @generated from field: string gasPrice = 3;
   */
  gasPrice = "";

  /**
   * @generated from field: string gas = 4;
   */
  gas = "";

  /**
   * @generated from field: string value = 5;
   */
  value = "";

  /**
   * @generated from field: string input = 6;
   */
  input = "";

  /**
   * @generated from field: string v = 7;
   */
  v = "";

  /**
   * @generated from field: string r = 8;
   */
  r = "";

  /**
   * @generated from field: string s = 9;
   */
  s = "";

  /**
   * @generated from field: string to = 10;
   */
  to = "";

  /**
   * @generated from field: string hash = 11;
   */
  hash = "";

  /**
   * @generated from field: string from = 12;
   */
  from = "";

  /**
   * @generated from field: string maxFeePerGas = 13;
   */
  maxFeePerGas = "";

  /**
   * @generated from field: string maxPriorityFeePerGas = 14;
   */
  maxPriorityFeePerGas = "";

  constructor(data?: PartialMessage<TransactionEvent_EthTransaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.TransactionEvent.EthTransaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "gasPrice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "gas", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "input", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "v", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "r", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "s", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "maxFeePerGas", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "maxPriorityFeePerGas", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionEvent_EthTransaction {
    return new TransactionEvent_EthTransaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionEvent_EthTransaction {
    return new TransactionEvent_EthTransaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionEvent_EthTransaction {
    return new TransactionEvent_EthTransaction().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionEvent_EthTransaction | PlainMessage<TransactionEvent_EthTransaction> | undefined, b: TransactionEvent_EthTransaction | PlainMessage<TransactionEvent_EthTransaction> | undefined): boolean {
    return proto3.util.equals(TransactionEvent_EthTransaction, a, b);
  }
}

/**
 * @generated from message model.v1.TransactionEvent.Log
 */
export class TransactionEvent_Log extends Message<TransactionEvent_Log> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: repeated string topics = 2;
   */
  topics: string[] = [];

  /**
   * @generated from field: string data = 3;
   */
  data = "";

  /**
   * @generated from field: string blockNumber = 4;
   */
  blockNumber = "";

  /**
   * @generated from field: string transactionHash = 5;
   */
  transactionHash = "";

  /**
   * @generated from field: string transactionIndex = 6;
   */
  transactionIndex = "";

  /**
   * @generated from field: string blockHash = 7;
   */
  blockHash = "";

  /**
   * @generated from field: string logIndex = 8;
   */
  logIndex = "";

  /**
   * @generated from field: bool removed = 9;
   */
  removed = false;

  constructor(data?: PartialMessage<TransactionEvent_Log>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.TransactionEvent.Log";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "topics", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "blockNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "transactionHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "transactionIndex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "blockHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "logIndex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "removed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionEvent_Log {
    return new TransactionEvent_Log().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionEvent_Log {
    return new TransactionEvent_Log().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionEvent_Log {
    return new TransactionEvent_Log().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionEvent_Log | PlainMessage<TransactionEvent_Log> | undefined, b: TransactionEvent_Log | PlainMessage<TransactionEvent_Log> | undefined): boolean {
    return proto3.util.equals(TransactionEvent_Log, a, b);
  }
}

/**
 * @generated from message model.v1.TransactionEvent.EthReceipt
 */
export class TransactionEvent_EthReceipt extends Message<TransactionEvent_EthReceipt> {
  /**
   * @generated from field: string root = 1;
   */
  root = "";

  /**
   * @generated from field: string status = 2;
   */
  status = "";

  /**
   * @generated from field: string cumulativeGasUsed = 3;
   */
  cumulativeGasUsed = "";

  /**
   * @generated from field: string logsBloom = 4;
   */
  logsBloom = "";

  /**
   * @generated from field: repeated model.v1.TransactionEvent.Log logs = 5;
   */
  logs: TransactionEvent_Log[] = [];

  /**
   * @generated from field: string transactionHash = 6;
   */
  transactionHash = "";

  /**
   * @generated from field: string contractAddress = 7;
   */
  contractAddress = "";

  /**
   * @generated from field: string gasUsed = 8;
   */
  gasUsed = "";

  /**
   * @generated from field: string blockHash = 9;
   */
  blockHash = "";

  /**
   * @generated from field: string blockNumber = 10;
   */
  blockNumber = "";

  /**
   * @generated from field: string transactionIndex = 11;
   */
  transactionIndex = "";

  constructor(data?: PartialMessage<TransactionEvent_EthReceipt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.TransactionEvent.EthReceipt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cumulativeGasUsed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "logsBloom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "logs", kind: "message", T: TransactionEvent_Log, repeated: true },
    { no: 6, name: "transactionHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "contractAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "gasUsed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "blockHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "blockNumber", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "transactionIndex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionEvent_EthReceipt {
    return new TransactionEvent_EthReceipt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionEvent_EthReceipt {
    return new TransactionEvent_EthReceipt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionEvent_EthReceipt {
    return new TransactionEvent_EthReceipt().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionEvent_EthReceipt | PlainMessage<TransactionEvent_EthReceipt> | undefined, b: TransactionEvent_EthReceipt | PlainMessage<TransactionEvent_EthReceipt> | undefined): boolean {
    return proto3.util.equals(TransactionEvent_EthReceipt, a, b);
  }
}

/**
 * @generated from message model.v1.TransactionEvent.TraceAction
 */
export class TransactionEvent_TraceAction extends Message<TransactionEvent_TraceAction> {
  /**
   * @generated from field: string callType = 1;
   */
  callType = "";

  /**
   * @generated from field: string to = 2;
   */
  to = "";

  /**
   * @generated from field: string input = 3;
   */
  input = "";

  /**
   * @generated from field: string from = 4;
   */
  from = "";

  /**
   * @generated from field: string value = 5;
   */
  value = "";

  /**
   * @generated from field: string init = 6;
   */
  init = "";

  /**
   * @generated from field: string address = 7;
   */
  address = "";

  /**
   * @generated from field: string balance = 8;
   */
  balance = "";

  /**
   * @generated from field: string refundAddress = 9;
   */
  refundAddress = "";

  constructor(data?: PartialMessage<TransactionEvent_TraceAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.TransactionEvent.TraceAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "callType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "input", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "init", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "refundAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionEvent_TraceAction {
    return new TransactionEvent_TraceAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionEvent_TraceAction {
    return new TransactionEvent_TraceAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionEvent_TraceAction {
    return new TransactionEvent_TraceAction().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionEvent_TraceAction | PlainMessage<TransactionEvent_TraceAction> | undefined, b: TransactionEvent_TraceAction | PlainMessage<TransactionEvent_TraceAction> | undefined): boolean {
    return proto3.util.equals(TransactionEvent_TraceAction, a, b);
  }
}

/**
 * @generated from message model.v1.TransactionEvent.TraceResult
 */
export class TransactionEvent_TraceResult extends Message<TransactionEvent_TraceResult> {
  /**
   * @generated from field: string gasUsed = 1;
   */
  gasUsed = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: string code = 3;
   */
  code = "";

  /**
   * @generated from field: string output = 4;
   */
  output = "";

  constructor(data?: PartialMessage<TransactionEvent_TraceResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.TransactionEvent.TraceResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gasUsed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionEvent_TraceResult {
    return new TransactionEvent_TraceResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionEvent_TraceResult {
    return new TransactionEvent_TraceResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionEvent_TraceResult {
    return new TransactionEvent_TraceResult().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionEvent_TraceResult | PlainMessage<TransactionEvent_TraceResult> | undefined, b: TransactionEvent_TraceResult | PlainMessage<TransactionEvent_TraceResult> | undefined): boolean {
    return proto3.util.equals(TransactionEvent_TraceResult, a, b);
  }
}

/**
 * @generated from message model.v1.TransactionEvent.Trace
 */
export class TransactionEvent_Trace extends Message<TransactionEvent_Trace> {
  /**
   * @generated from field: model.v1.TransactionEvent.TraceAction action = 1;
   */
  action?: TransactionEvent_TraceAction;

  /**
   * @generated from field: string blockHash = 2;
   */
  blockHash = "";

  /**
   * @generated from field: int64 blockNumber = 3;
   */
  blockNumber = protoInt64.zero;

  /**
   * @generated from field: model.v1.TransactionEvent.TraceResult result = 4;
   */
  result?: TransactionEvent_TraceResult;

  /**
   * @generated from field: int64 subtraces = 5;
   */
  subtraces = protoInt64.zero;

  /**
   * @generated from field: repeated int64 traceAddress = 6;
   */
  traceAddress: bigint[] = [];

  /**
   * @generated from field: string transactionHash = 7;
   */
  transactionHash = "";

  /**
   * @generated from field: int64 transactionPosition = 8;
   */
  transactionPosition = protoInt64.zero;

  /**
   * @generated from field: string type = 9;
   */
  type = "";

  /**
   * @generated from field: string error = 10;
   */
  error = "";

  constructor(data?: PartialMessage<TransactionEvent_Trace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.TransactionEvent.Trace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "message", T: TransactionEvent_TraceAction },
    { no: 2, name: "blockHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blockNumber", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "result", kind: "message", T: TransactionEvent_TraceResult },
    { no: 5, name: "subtraces", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "traceAddress", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 7, name: "transactionHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "transactionPosition", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransactionEvent_Trace {
    return new TransactionEvent_Trace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransactionEvent_Trace {
    return new TransactionEvent_Trace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransactionEvent_Trace {
    return new TransactionEvent_Trace().fromJsonString(jsonString, options);
  }

  static equals(a: TransactionEvent_Trace | PlainMessage<TransactionEvent_Trace> | undefined, b: TransactionEvent_Trace | PlainMessage<TransactionEvent_Trace> | undefined): boolean {
    return proto3.util.equals(TransactionEvent_Trace, a, b);
  }
}

/**
 * @generated from message model.v1.AlertEvent
 */
export class AlertEvent extends Message<AlertEvent> {
  /**
   * @generated from field: model.v1.AlertEvent.Alert alert = 1;
   */
  alert?: AlertEvent_Alert;

  /**
   * @generated from field: model.v1.TrackingTimestamps timestamps = 2;
   */
  timestamps?: TrackingTimestamps;

  constructor(data?: PartialMessage<AlertEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.AlertEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert", kind: "message", T: AlertEvent_Alert },
    { no: 2, name: "timestamps", kind: "message", T: TrackingTimestamps },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEvent {
    return new AlertEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEvent {
    return new AlertEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEvent {
    return new AlertEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEvent | PlainMessage<AlertEvent> | undefined, b: AlertEvent | PlainMessage<AlertEvent> | undefined): boolean {
    return proto3.util.equals(AlertEvent, a, b);
  }
}

/**
 * @generated from message model.v1.AlertEvent.Alert
 */
export class AlertEvent_Alert extends Message<AlertEvent_Alert> {
  /**
   * Unique string to identify this class of finding,
   * primarily used to group similar findings for the end user
   *
   * @generated from field: string alertId = 1;
   */
  alertId = "";

  /**
   * List of addresses involved in the alert
   *
   * @generated from field: repeated string addresses = 2;
   */
  addresses: string[] = [];

  /**
   * List of contracts related to the alert
   *
   * @generated from field: repeated model.v1.AlertEvent.Alert.Contract contracts = 3;
   */
  contracts: AlertEvent_Alert_Contract[] = [];

  /**
   * Timestamp when the alert was published
   *
   * @generated from field: string createdAt = 4;
   */
  createdAt = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: string hash = 6;
   */
  hash = "";

  /**
   * @generated from field: map<string, string> metadata = 7;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: string name = 8;
   */
  name = "";

  /**
   * @generated from field: repeated model.v1.AlertEvent.Alert.Project projects = 9;
   */
  projects: AlertEvent_Alert_Project[] = [];

  /**
   * @generated from field: int32 scanNodeCount = 10;
   */
  scanNodeCount = 0;

  /**
   * @generated from field: string severity = 11;
   */
  severity = "";

  /**
   * @generated from field: model.v1.AlertEvent.Alert.Source source = 12;
   */
  source?: AlertEvent_Alert_Source;

  /**
   * @generated from field: string findingType = 13;
   */
  findingType = "";

  /**
   * @generated from field: repeated string relatedAlerts = 14;
   */
  relatedAlerts: string[] = [];

  /**
   * @generated from field: uint64 chainId = 15;
   */
  chainId = protoInt64.zero;

  /**
   * @generated from field: repeated model.v1.AlertEvent.Alert.Label labels = 16;
   */
  labels: AlertEvent_Alert_Label[] = [];

  /**
   * @generated from field: bool truncated = 17;
   */
  truncated = false;

  /**
   * @generated from field: model.v1.BloomFilter addressBloomFilter = 18;
   */
  addressBloomFilter?: BloomFilter;

  constructor(data?: PartialMessage<AlertEvent_Alert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.AlertEvent.Alert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alertId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "contracts", kind: "message", T: AlertEvent_Alert_Contract, repeated: true },
    { no: 4, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "projects", kind: "message", T: AlertEvent_Alert_Project, repeated: true },
    { no: 10, name: "scanNodeCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "severity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "source", kind: "message", T: AlertEvent_Alert_Source },
    { no: 13, name: "findingType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "relatedAlerts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: "chainId", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 16, name: "labels", kind: "message", T: AlertEvent_Alert_Label, repeated: true },
    { no: 17, name: "truncated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "addressBloomFilter", kind: "message", T: BloomFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEvent_Alert {
    return new AlertEvent_Alert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEvent_Alert {
    return new AlertEvent_Alert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEvent_Alert {
    return new AlertEvent_Alert().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEvent_Alert | PlainMessage<AlertEvent_Alert> | undefined, b: AlertEvent_Alert | PlainMessage<AlertEvent_Alert> | undefined): boolean {
    return proto3.util.equals(AlertEvent_Alert, a, b);
  }
}

/**
 * @generated from message model.v1.AlertEvent.Alert.Contract
 */
export class AlertEvent_Alert_Contract extends Message<AlertEvent_Alert_Contract> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string projectId = 2;
   */
  projectId = "";

  constructor(data?: PartialMessage<AlertEvent_Alert_Contract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.AlertEvent.Alert.Contract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "projectId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEvent_Alert_Contract {
    return new AlertEvent_Alert_Contract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Contract {
    return new AlertEvent_Alert_Contract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Contract {
    return new AlertEvent_Alert_Contract().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEvent_Alert_Contract | PlainMessage<AlertEvent_Alert_Contract> | undefined, b: AlertEvent_Alert_Contract | PlainMessage<AlertEvent_Alert_Contract> | undefined): boolean {
    return proto3.util.equals(AlertEvent_Alert_Contract, a, b);
  }
}

/**
 * @generated from message model.v1.AlertEvent.Alert.Project
 */
export class AlertEvent_Alert_Project extends Message<AlertEvent_Alert_Project> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<AlertEvent_Alert_Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.AlertEvent.Alert.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEvent_Alert_Project {
    return new AlertEvent_Alert_Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Project {
    return new AlertEvent_Alert_Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Project {
    return new AlertEvent_Alert_Project().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEvent_Alert_Project | PlainMessage<AlertEvent_Alert_Project> | undefined, b: AlertEvent_Alert_Project | PlainMessage<AlertEvent_Alert_Project> | undefined): boolean {
    return proto3.util.equals(AlertEvent_Alert_Project, a, b);
  }
}

/**
 * @generated from message model.v1.AlertEvent.Alert.Block
 */
export class AlertEvent_Alert_Block extends Message<AlertEvent_Alert_Block> {
  /**
   * @generated from field: uint64 number = 1;
   */
  number = protoInt64.zero;

  /**
   * @generated from field: string hash = 2;
   */
  hash = "";

  /**
   * @generated from field: string timestamp = 3;
   */
  timestamp = "";

  /**
   * @generated from field: uint64 chainId = 4;
   */
  chainId = protoInt64.zero;

  constructor(data?: PartialMessage<AlertEvent_Alert_Block>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.AlertEvent.Alert.Block";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "chainId", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEvent_Alert_Block {
    return new AlertEvent_Alert_Block().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Block {
    return new AlertEvent_Alert_Block().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Block {
    return new AlertEvent_Alert_Block().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEvent_Alert_Block | PlainMessage<AlertEvent_Alert_Block> | undefined, b: AlertEvent_Alert_Block | PlainMessage<AlertEvent_Alert_Block> | undefined): boolean {
    return proto3.util.equals(AlertEvent_Alert_Block, a, b);
  }
}

/**
 * @generated from message model.v1.AlertEvent.Alert.Bot
 */
export class AlertEvent_Alert_Bot extends Message<AlertEvent_Alert_Bot> {
  /**
   * @generated from field: repeated string chainIds = 1;
   */
  chainIds: string[] = [];

  /**
   * @generated from field: string createdAt = 2;
   */
  createdAt = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string developer = 4;
   */
  developer = "";

  /**
   * @generated from field: string DocReference = 5;
   */
  DocReference = "";

  /**
   * @generated from field: bool enabled = 6;
   */
  enabled = false;

  /**
   * @generated from field: string id = 7;
   */
  id = "";

  /**
   * @generated from field: string image = 8;
   */
  image = "";

  /**
   * @generated from field: string name = 9;
   */
  name = "";

  /**
   * @generated from field: string reference = 10;
   */
  reference = "";

  /**
   * @generated from field: string repository = 11;
   */
  repository = "";

  /**
   * @generated from field: repeated string projects = 12;
   */
  projects: string[] = [];

  /**
   * @generated from field: repeated string scanNodes = 13;
   */
  scanNodes: string[] = [];

  /**
   * @generated from field: string version = 14;
   */
  version = "";

  constructor(data?: PartialMessage<AlertEvent_Alert_Bot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.AlertEvent.Alert.Bot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chainIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "developer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "DocReference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "repository", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "projects", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "scanNodes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEvent_Alert_Bot {
    return new AlertEvent_Alert_Bot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Bot {
    return new AlertEvent_Alert_Bot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Bot {
    return new AlertEvent_Alert_Bot().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEvent_Alert_Bot | PlainMessage<AlertEvent_Alert_Bot> | undefined, b: AlertEvent_Alert_Bot | PlainMessage<AlertEvent_Alert_Bot> | undefined): boolean {
    return proto3.util.equals(AlertEvent_Alert_Bot, a, b);
  }
}

/**
 * @generated from message model.v1.AlertEvent.Alert.SourceAlertEvent
 */
export class AlertEvent_Alert_SourceAlertEvent extends Message<AlertEvent_Alert_SourceAlertEvent> {
  /**
   * @generated from field: string botId = 1;
   */
  botId = "";

  /**
   * @generated from field: string hash = 2;
   */
  hash = "";

  /**
   * @generated from field: string timestamp = 3;
   */
  timestamp = "";

  /**
   * @generated from field: uint64 chainId = 4;
   */
  chainId = protoInt64.zero;

  constructor(data?: PartialMessage<AlertEvent_Alert_SourceAlertEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.AlertEvent.Alert.SourceAlertEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "botId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "chainId", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEvent_Alert_SourceAlertEvent {
    return new AlertEvent_Alert_SourceAlertEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEvent_Alert_SourceAlertEvent {
    return new AlertEvent_Alert_SourceAlertEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEvent_Alert_SourceAlertEvent {
    return new AlertEvent_Alert_SourceAlertEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEvent_Alert_SourceAlertEvent | PlainMessage<AlertEvent_Alert_SourceAlertEvent> | undefined, b: AlertEvent_Alert_SourceAlertEvent | PlainMessage<AlertEvent_Alert_SourceAlertEvent> | undefined): boolean {
    return proto3.util.equals(AlertEvent_Alert_SourceAlertEvent, a, b);
  }
}

/**
 * @generated from message model.v1.AlertEvent.Alert.Source
 */
export class AlertEvent_Alert_Source extends Message<AlertEvent_Alert_Source> {
  /**
   * @generated from field: string transactionHash = 1;
   */
  transactionHash = "";

  /**
   * @generated from field: model.v1.AlertEvent.Alert.Bot bot = 2;
   */
  bot?: AlertEvent_Alert_Bot;

  /**
   * @generated from field: model.v1.AlertEvent.Alert.Block block = 3;
   */
  block?: AlertEvent_Alert_Block;

  /**
   * @generated from field: model.v1.AlertEvent.Alert.SourceAlertEvent sourceAlert = 4;
   */
  sourceAlert?: AlertEvent_Alert_SourceAlertEvent;

  constructor(data?: PartialMessage<AlertEvent_Alert_Source>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.AlertEvent.Alert.Source";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transactionHash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bot", kind: "message", T: AlertEvent_Alert_Bot },
    { no: 3, name: "block", kind: "message", T: AlertEvent_Alert_Block },
    { no: 4, name: "sourceAlert", kind: "message", T: AlertEvent_Alert_SourceAlertEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEvent_Alert_Source {
    return new AlertEvent_Alert_Source().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Source {
    return new AlertEvent_Alert_Source().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Source {
    return new AlertEvent_Alert_Source().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEvent_Alert_Source | PlainMessage<AlertEvent_Alert_Source> | undefined, b: AlertEvent_Alert_Source | PlainMessage<AlertEvent_Alert_Source> | undefined): boolean {
    return proto3.util.equals(AlertEvent_Alert_Source, a, b);
  }
}

/**
 * @generated from message model.v1.AlertEvent.Alert.Label
 */
export class AlertEvent_Alert_Label extends Message<AlertEvent_Alert_Label> {
  /**
   * @generated from field: string label = 1;
   */
  label = "";

  /**
   * @generated from field: float confidence = 2;
   */
  confidence = 0;

  /**
   * @generated from field: string entity = 3;
   */
  entity = "";

  /**
   * @generated from field: string entityType = 4;
   */
  entityType = "";

  /**
   * @generated from field: bool remove = 5;
   */
  remove = false;

  /**
   * @generated from field: repeated string metadata = 6;
   */
  metadata: string[] = [];

  /**
   * @generated from field: string uniqueKey = 7;
   */
  uniqueKey = "";

  /**
   * @generated from field: repeated float embedding = 8;
   */
  embedding: number[] = [];

  constructor(data?: PartialMessage<AlertEvent_Alert_Label>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.v1.AlertEvent.Alert.Label";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "confidence", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "entity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "remove", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "uniqueKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "embedding", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEvent_Alert_Label {
    return new AlertEvent_Alert_Label().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Label {
    return new AlertEvent_Alert_Label().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEvent_Alert_Label {
    return new AlertEvent_Alert_Label().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEvent_Alert_Label | PlainMessage<AlertEvent_Alert_Label> | undefined, b: AlertEvent_Alert_Label | PlainMessage<AlertEvent_Alert_Label> | undefined): boolean {
    return proto3.util.equals(AlertEvent_Alert_Label, a, b);
  }
}

